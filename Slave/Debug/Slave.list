
Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bdc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08009d74  08009d74  00019d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e6c  08009e6c  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08009e6c  08009e6c  00019e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e74  08009e74  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e74  08009e74  00019e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e78  08009e78  00019e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08009e7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a450  20000018  08009e94  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000a468  08009e94  0002a468  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a0f2  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b75  00000000  00000000  0003a13a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f8  00000000  00000000  0003dcb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001450  00000000  00000000  0003f2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa9a  00000000  00000000  000406f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c9cb  00000000  00000000  0005b192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097172  00000000  00000000  00077b5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010eccf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ae0  00000000  00000000  0010ed20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009d5c 	.word	0x08009d5c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	08009d5c 	.word	0x08009d5c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <mountSDcard>:

struct SD_Iterface SD;



void mountSDcard(void){
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0

	SD.fresult=f_mount(&SD.fs, SDPath, 1);
 80004e0:	2201      	movs	r2, #1
 80004e2:	4908      	ldr	r1, [pc, #32]	; (8000504 <mountSDcard+0x28>)
 80004e4:	4808      	ldr	r0, [pc, #32]	; (8000508 <mountSDcard+0x2c>)
 80004e6:	f008 ff55 	bl	8009394 <f_mount>
 80004ea:	4603      	mov	r3, r0
 80004ec:	461a      	mov	r2, r3
 80004ee:	4b06      	ldr	r3, [pc, #24]	; (8000508 <mountSDcard+0x2c>)
 80004f0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80004f4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	HAL_Delay(100);
 80004f8:	2064      	movs	r0, #100	; 0x64
 80004fa:	f001 facd 	bl	8001a98 <HAL_Delay>

}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	2000a428 	.word	0x2000a428
 8000508:	20000034 	.word	0x20000034

0800050c <openFile>:

void openFile(const TCHAR* path,BYTE mode){
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	460b      	mov	r3, r1
 8000516:	70fb      	strb	r3, [r7, #3]

	SD.fresult=f_open(&SD.fil, path,mode);
 8000518:	78fb      	ldrb	r3, [r7, #3]
 800051a:	461a      	mov	r2, r3
 800051c:	6879      	ldr	r1, [r7, #4]
 800051e:	4807      	ldr	r0, [pc, #28]	; (800053c <openFile+0x30>)
 8000520:	f008 ff7e 	bl	8009420 <f_open>
 8000524:	4603      	mov	r3, r0
 8000526:	461a      	mov	r2, r3
 8000528:	4b05      	ldr	r3, [pc, #20]	; (8000540 <openFile+0x34>)
 800052a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800052e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20001068 	.word	0x20001068
 8000540:	20000034 	.word	0x20000034

08000544 <closeFile>:
void closeFile(){
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0

	SD.fresult=f_close(&SD.fil);
 8000548:	4805      	ldr	r0, [pc, #20]	; (8000560 <closeFile+0x1c>)
 800054a:	f009 fb47 	bl	8009bdc <f_close>
 800054e:	4603      	mov	r3, r0
 8000550:	461a      	mov	r2, r3
 8000552:	4b04      	ldr	r3, [pc, #16]	; (8000564 <closeFile+0x20>)
 8000554:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000558:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
}
 800055c:	bf00      	nop
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20001068 	.word	0x20001068
 8000564:	20000034 	.word	0x20000034

08000568 <writeDataPacked>:


void writeDataPacked(const TCHAR* path,BYTE mode){
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	460b      	mov	r3, r1
 8000572:	70fb      	strb	r3, [r7, #3]
	SD.fresult=f_write(&SD.fil, SD.buffer1, DATASIZE, &SD.bw);
	SD.fresult=f_write(&SD.fil, SD.buffer2,  DATASIZE,&SD.bw);
	SD.fresult=f_write(&SD.fil, SD.buffer3,  DATASIZE,&SD.bw);
	#endif
	#ifdef BUF16KB
	SD.fresult=f_write(&SD.fil, SD.buffer1, DATASIZE, &SD.bw);
 8000574:	4b1d      	ldr	r3, [pc, #116]	; (80005ec <writeDataPacked+0x84>)
 8000576:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 800057a:	491d      	ldr	r1, [pc, #116]	; (80005f0 <writeDataPacked+0x88>)
 800057c:	481d      	ldr	r0, [pc, #116]	; (80005f4 <writeDataPacked+0x8c>)
 800057e:	f009 f91b 	bl	80097b8 <f_write>
 8000582:	4603      	mov	r3, r0
 8000584:	461a      	mov	r2, r3
 8000586:	4b1c      	ldr	r3, [pc, #112]	; (80005f8 <writeDataPacked+0x90>)
 8000588:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800058c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	SD.fresult=f_write(&SD.fil, SD.buffer2,  DATASIZE,&SD.bw);
 8000590:	4b16      	ldr	r3, [pc, #88]	; (80005ec <writeDataPacked+0x84>)
 8000592:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8000596:	4919      	ldr	r1, [pc, #100]	; (80005fc <writeDataPacked+0x94>)
 8000598:	4816      	ldr	r0, [pc, #88]	; (80005f4 <writeDataPacked+0x8c>)
 800059a:	f009 f90d 	bl	80097b8 <f_write>
 800059e:	4603      	mov	r3, r0
 80005a0:	461a      	mov	r2, r3
 80005a2:	4b15      	ldr	r3, [pc, #84]	; (80005f8 <writeDataPacked+0x90>)
 80005a4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80005a8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	SD.fresult=f_write(&SD.fil, SD.buffer3,  DATASIZE,&SD.bw);
 80005ac:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <writeDataPacked+0x84>)
 80005ae:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 80005b2:	4913      	ldr	r1, [pc, #76]	; (8000600 <writeDataPacked+0x98>)
 80005b4:	480f      	ldr	r0, [pc, #60]	; (80005f4 <writeDataPacked+0x8c>)
 80005b6:	f009 f8ff 	bl	80097b8 <f_write>
 80005ba:	4603      	mov	r3, r0
 80005bc:	461a      	mov	r2, r3
 80005be:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <writeDataPacked+0x90>)
 80005c0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80005c4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	SD.fresult=f_write(&SD.fil, SD.buffer4,  DATASIZE,&SD.bw);
 80005c8:	4b08      	ldr	r3, [pc, #32]	; (80005ec <writeDataPacked+0x84>)
 80005ca:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 80005ce:	490d      	ldr	r1, [pc, #52]	; (8000604 <writeDataPacked+0x9c>)
 80005d0:	4808      	ldr	r0, [pc, #32]	; (80005f4 <writeDataPacked+0x8c>)
 80005d2:	f009 f8f1 	bl	80097b8 <f_write>
 80005d6:	4603      	mov	r3, r0
 80005d8:	461a      	mov	r2, r3
 80005da:	4b07      	ldr	r3, [pc, #28]	; (80005f8 <writeDataPacked+0x90>)
 80005dc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80005e0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	#endif
	//SD.fresult=f_close(&SD.fil);
	//bufclear();
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20002098 	.word	0x20002098
 80005f0:	200020a1 	.word	0x200020a1
 80005f4:	20001068 	.word	0x20001068
 80005f8:	20000034 	.word	0x20000034
 80005fc:	200030a1 	.word	0x200030a1
 8000600:	200040a1 	.word	0x200040a1
 8000604:	200050a1 	.word	0x200050a1

08000608 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	4b18      	ldr	r3, [pc, #96]	; (8000674 <MX_DMA_Init+0x6c>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a17      	ldr	r2, [pc, #92]	; (8000674 <MX_DMA_Init+0x6c>)
 8000618:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b15      	ldr	r3, [pc, #84]	; (8000674 <MX_DMA_Init+0x6c>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800062a:	2200      	movs	r2, #0
 800062c:	2100      	movs	r1, #0
 800062e:	2038      	movs	r0, #56	; 0x38
 8000630:	f001 fb31 	bl	8001c96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000634:	2038      	movs	r0, #56	; 0x38
 8000636:	f001 fb4a 	bl	8001cce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800063a:	2200      	movs	r2, #0
 800063c:	2100      	movs	r1, #0
 800063e:	2039      	movs	r0, #57	; 0x39
 8000640:	f001 fb29 	bl	8001c96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000644:	2039      	movs	r0, #57	; 0x39
 8000646:	f001 fb42 	bl	8001cce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	2100      	movs	r1, #0
 800064e:	203b      	movs	r0, #59	; 0x3b
 8000650:	f001 fb21 	bl	8001c96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000654:	203b      	movs	r0, #59	; 0x3b
 8000656:	f001 fb3a 	bl	8001cce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800065a:	2200      	movs	r2, #0
 800065c:	2100      	movs	r1, #0
 800065e:	2045      	movs	r0, #69	; 0x45
 8000660:	f001 fb19 	bl	8001c96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000664:	2045      	movs	r0, #69	; 0x45
 8000666:	f001 fb32 	bl	8001cce <HAL_NVIC_EnableIRQ>

}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800

08000678 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 030c 	add.w	r3, r7, #12
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	4b23      	ldr	r3, [pc, #140]	; (8000720 <MX_GPIO_Init+0xa8>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a22      	ldr	r2, [pc, #136]	; (8000720 <MX_GPIO_Init+0xa8>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b20      	ldr	r3, [pc, #128]	; (8000720 <MX_GPIO_Init+0xa8>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <MX_GPIO_Init+0xa8>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a1b      	ldr	r2, [pc, #108]	; (8000720 <MX_GPIO_Init+0xa8>)
 80006b4:	f043 0302 	orr.w	r3, r3, #2
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b19      	ldr	r3, [pc, #100]	; (8000720 <MX_GPIO_Init+0xa8>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0302 	and.w	r3, r3, #2
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_RST_GPIO_Port, SD_RST_Pin, GPIO_PIN_RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2110      	movs	r1, #16
 80006ca:	4816      	ldr	r0, [pc, #88]	; (8000724 <MX_GPIO_Init+0xac>)
 80006cc:	f002 f854 	bl	8002778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_RST_Pin;
 80006d0:	2310      	movs	r3, #16
 80006d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	2301      	movs	r3, #1
 80006d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006dc:	2300      	movs	r3, #0
 80006de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_RST_GPIO_Port, &GPIO_InitStruct);
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	4619      	mov	r1, r3
 80006e6:	480f      	ldr	r0, [pc, #60]	; (8000724 <MX_GPIO_Init+0xac>)
 80006e8:	f001 feaa 	bl	8002440 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACV_Pin;
 80006ec:	2320      	movs	r3, #32
 80006ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80006f0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80006f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ACV_GPIO_Port, &GPIO_InitStruct);
 80006fa:	f107 030c 	add.w	r3, r7, #12
 80006fe:	4619      	mov	r1, r3
 8000700:	4808      	ldr	r0, [pc, #32]	; (8000724 <MX_GPIO_Init+0xac>)
 8000702:	f001 fe9d 	bl	8002440 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2100      	movs	r1, #0
 800070a:	2017      	movs	r0, #23
 800070c:	f001 fac3 	bl	8001c96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000710:	2017      	movs	r0, #23
 8000712:	f001 fadc 	bl	8001cce <HAL_NVIC_EnableIRQ>

}
 8000716:	bf00      	nop
 8000718:	3720      	adds	r7, #32
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800
 8000724:	40020000 	.word	0x40020000

08000728 <conversion>:
void Sarray(DMA_HandleTypeDef *hdma);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void conversion(uint8_t Whalf){
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]

//16320
	if(Whalf==1){
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d178      	bne.n	800082a <conversion+0x102>
		for( uint16_t i=0;i<BUFLEN/12;i++){
 8000738:	2300      	movs	r3, #0
 800073a:	81fb      	strh	r3, [r7, #14]
 800073c:	e033      	b.n	80007a6 <conversion+0x7e>
			SD.buffer1[3*i]='s';
 800073e:	89fa      	ldrh	r2, [r7, #14]
 8000740:	4613      	mov	r3, r2
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	4413      	add	r3, r2
 8000746:	4a7b      	ldr	r2, [pc, #492]	; (8000934 <conversion+0x20c>)
 8000748:	4413      	add	r3, r2
 800074a:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 800074e:	332d      	adds	r3, #45	; 0x2d
 8000750:	2273      	movs	r2, #115	; 0x73
 8000752:	701a      	strb	r2, [r3, #0]
			SD.buffer1[3*i+1]=databuf[3*i+1];
 8000754:	89fa      	ldrh	r2, [r7, #14]
 8000756:	4613      	mov	r3, r2
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	4413      	add	r3, r2
 800075c:	1c59      	adds	r1, r3, #1
 800075e:	89fa      	ldrh	r2, [r7, #14]
 8000760:	4613      	mov	r3, r2
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	4413      	add	r3, r2
 8000766:	3301      	adds	r3, #1
 8000768:	4a73      	ldr	r2, [pc, #460]	; (8000938 <conversion+0x210>)
 800076a:	5c51      	ldrb	r1, [r2, r1]
 800076c:	4a71      	ldr	r2, [pc, #452]	; (8000934 <conversion+0x20c>)
 800076e:	4413      	add	r3, r2
 8000770:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8000774:	332d      	adds	r3, #45	; 0x2d
 8000776:	460a      	mov	r2, r1
 8000778:	701a      	strb	r2, [r3, #0]
			SD.buffer1[3*i+2]=databuf[3*i+2];
 800077a:	89fa      	ldrh	r2, [r7, #14]
 800077c:	4613      	mov	r3, r2
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	4413      	add	r3, r2
 8000782:	1c99      	adds	r1, r3, #2
 8000784:	89fa      	ldrh	r2, [r7, #14]
 8000786:	4613      	mov	r3, r2
 8000788:	005b      	lsls	r3, r3, #1
 800078a:	4413      	add	r3, r2
 800078c:	3302      	adds	r3, #2
 800078e:	4a6a      	ldr	r2, [pc, #424]	; (8000938 <conversion+0x210>)
 8000790:	5c51      	ldrb	r1, [r2, r1]
 8000792:	4a68      	ldr	r2, [pc, #416]	; (8000934 <conversion+0x20c>)
 8000794:	4413      	add	r3, r2
 8000796:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 800079a:	332d      	adds	r3, #45	; 0x2d
 800079c:	460a      	mov	r2, r1
 800079e:	701a      	strb	r2, [r3, #0]
		for( uint16_t i=0;i<BUFLEN/12;i++){
 80007a0:	89fb      	ldrh	r3, [r7, #14]
 80007a2:	3301      	adds	r3, #1
 80007a4:	81fb      	strh	r3, [r7, #14]
 80007a6:	89fb      	ldrh	r3, [r7, #14]
 80007a8:	f5b3 6faa 	cmp.w	r3, #1360	; 0x550
 80007ac:	d3c7      	bcc.n	800073e <conversion+0x16>
		}
		for(uint16_t i=0;i<BUFLEN/12;i++){
 80007ae:	2300      	movs	r3, #0
 80007b0:	81bb      	strh	r3, [r7, #12]
 80007b2:	e035      	b.n	8000820 <conversion+0xf8>

			SD.buffer2[3*i]='s';
 80007b4:	89ba      	ldrh	r2, [r7, #12]
 80007b6:	4613      	mov	r3, r2
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	4413      	add	r3, r2
 80007bc:	4a5d      	ldr	r2, [pc, #372]	; (8000934 <conversion+0x20c>)
 80007be:	4413      	add	r3, r2
 80007c0:	f503 5341 	add.w	r3, r3, #12352	; 0x3040
 80007c4:	332d      	adds	r3, #45	; 0x2d
 80007c6:	2273      	movs	r2, #115	; 0x73
 80007c8:	701a      	strb	r2, [r3, #0]
			SD.buffer2[3*i+1]=databuf[3*i+1+BUFLEN/4];
 80007ca:	89ba      	ldrh	r2, [r7, #12]
 80007cc:	4613      	mov	r3, r2
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	4413      	add	r3, r2
 80007d2:	f603 71f1 	addw	r1, r3, #4081	; 0xff1
 80007d6:	89ba      	ldrh	r2, [r7, #12]
 80007d8:	4613      	mov	r3, r2
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	4413      	add	r3, r2
 80007de:	3301      	adds	r3, #1
 80007e0:	4a55      	ldr	r2, [pc, #340]	; (8000938 <conversion+0x210>)
 80007e2:	5c51      	ldrb	r1, [r2, r1]
 80007e4:	4a53      	ldr	r2, [pc, #332]	; (8000934 <conversion+0x20c>)
 80007e6:	4413      	add	r3, r2
 80007e8:	f503 5341 	add.w	r3, r3, #12352	; 0x3040
 80007ec:	332d      	adds	r3, #45	; 0x2d
 80007ee:	460a      	mov	r2, r1
 80007f0:	701a      	strb	r2, [r3, #0]
			SD.buffer2[3*i+2]=databuf[3*i+2+BUFLEN/4];
 80007f2:	89ba      	ldrh	r2, [r7, #12]
 80007f4:	4613      	mov	r3, r2
 80007f6:	005b      	lsls	r3, r3, #1
 80007f8:	4413      	add	r3, r2
 80007fa:	f603 71f2 	addw	r1, r3, #4082	; 0xff2
 80007fe:	89ba      	ldrh	r2, [r7, #12]
 8000800:	4613      	mov	r3, r2
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	4413      	add	r3, r2
 8000806:	3302      	adds	r3, #2
 8000808:	4a4b      	ldr	r2, [pc, #300]	; (8000938 <conversion+0x210>)
 800080a:	5c51      	ldrb	r1, [r2, r1]
 800080c:	4a49      	ldr	r2, [pc, #292]	; (8000934 <conversion+0x20c>)
 800080e:	4413      	add	r3, r2
 8000810:	f503 5341 	add.w	r3, r3, #12352	; 0x3040
 8000814:	332d      	adds	r3, #45	; 0x2d
 8000816:	460a      	mov	r2, r1
 8000818:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0;i<BUFLEN/12;i++){
 800081a:	89bb      	ldrh	r3, [r7, #12]
 800081c:	3301      	adds	r3, #1
 800081e:	81bb      	strh	r3, [r7, #12]
 8000820:	89bb      	ldrh	r3, [r7, #12]
 8000822:	f5b3 6faa 	cmp.w	r3, #1360	; 0x550
 8000826:	d3c5      	bcc.n	80007b4 <conversion+0x8c>


	}


}
 8000828:	e07d      	b.n	8000926 <conversion+0x1fe>
		for( uint16_t i=0;i<BUFLEN/12;i++){
 800082a:	2300      	movs	r3, #0
 800082c:	817b      	strh	r3, [r7, #10]
 800082e:	e037      	b.n	80008a0 <conversion+0x178>
			SD.buffer3[3*i]='s';
 8000830:	897a      	ldrh	r2, [r7, #10]
 8000832:	4613      	mov	r3, r2
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	4413      	add	r3, r2
 8000838:	4a3e      	ldr	r2, [pc, #248]	; (8000934 <conversion+0x20c>)
 800083a:	4413      	add	r3, r2
 800083c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000840:	336d      	adds	r3, #109	; 0x6d
 8000842:	2273      	movs	r2, #115	; 0x73
 8000844:	701a      	strb	r2, [r3, #0]
			SD.buffer3[3*i+1]=databuf[3*i+1+BUFLEN/2];
 8000846:	897a      	ldrh	r2, [r7, #10]
 8000848:	4613      	mov	r3, r2
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	4413      	add	r3, r2
 800084e:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 8000852:	3301      	adds	r3, #1
 8000854:	8979      	ldrh	r1, [r7, #10]
 8000856:	460a      	mov	r2, r1
 8000858:	0052      	lsls	r2, r2, #1
 800085a:	440a      	add	r2, r1
 800085c:	3201      	adds	r2, #1
 800085e:	4936      	ldr	r1, [pc, #216]	; (8000938 <conversion+0x210>)
 8000860:	5cc9      	ldrb	r1, [r1, r3]
 8000862:	4b34      	ldr	r3, [pc, #208]	; (8000934 <conversion+0x20c>)
 8000864:	4413      	add	r3, r2
 8000866:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800086a:	336d      	adds	r3, #109	; 0x6d
 800086c:	460a      	mov	r2, r1
 800086e:	701a      	strb	r2, [r3, #0]
			SD.buffer3[3*i+2]=databuf[3*i+2+BUFLEN/2];
 8000870:	897a      	ldrh	r2, [r7, #10]
 8000872:	4613      	mov	r3, r2
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	4413      	add	r3, r2
 8000878:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 800087c:	3302      	adds	r3, #2
 800087e:	8979      	ldrh	r1, [r7, #10]
 8000880:	460a      	mov	r2, r1
 8000882:	0052      	lsls	r2, r2, #1
 8000884:	440a      	add	r2, r1
 8000886:	3202      	adds	r2, #2
 8000888:	492b      	ldr	r1, [pc, #172]	; (8000938 <conversion+0x210>)
 800088a:	5cc9      	ldrb	r1, [r1, r3]
 800088c:	4b29      	ldr	r3, [pc, #164]	; (8000934 <conversion+0x20c>)
 800088e:	4413      	add	r3, r2
 8000890:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000894:	336d      	adds	r3, #109	; 0x6d
 8000896:	460a      	mov	r2, r1
 8000898:	701a      	strb	r2, [r3, #0]
		for( uint16_t i=0;i<BUFLEN/12;i++){
 800089a:	897b      	ldrh	r3, [r7, #10]
 800089c:	3301      	adds	r3, #1
 800089e:	817b      	strh	r3, [r7, #10]
 80008a0:	897b      	ldrh	r3, [r7, #10]
 80008a2:	f5b3 6faa 	cmp.w	r3, #1360	; 0x550
 80008a6:	d3c3      	bcc.n	8000830 <conversion+0x108>
		for( uint16_t i=0;i<BUFLEN/12;i++){
 80008a8:	2300      	movs	r3, #0
 80008aa:	813b      	strh	r3, [r7, #8]
 80008ac:	e037      	b.n	800091e <conversion+0x1f6>
			SD.buffer4[3*i]='s';
 80008ae:	893a      	ldrh	r2, [r7, #8]
 80008b0:	4613      	mov	r3, r2
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	4413      	add	r3, r2
 80008b6:	4a1f      	ldr	r2, [pc, #124]	; (8000934 <conversion+0x20c>)
 80008b8:	4413      	add	r3, r2
 80008ba:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 80008be:	336d      	adds	r3, #109	; 0x6d
 80008c0:	2273      	movs	r2, #115	; 0x73
 80008c2:	701a      	strb	r2, [r3, #0]
			SD.buffer4[3*i+1]=databuf[3*i+1+BUFLEN/2+BUFLEN/4];
 80008c4:	893a      	ldrh	r2, [r7, #8]
 80008c6:	4613      	mov	r3, r2
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	4413      	add	r3, r2
 80008cc:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 80008d0:	3311      	adds	r3, #17
 80008d2:	8939      	ldrh	r1, [r7, #8]
 80008d4:	460a      	mov	r2, r1
 80008d6:	0052      	lsls	r2, r2, #1
 80008d8:	440a      	add	r2, r1
 80008da:	3201      	adds	r2, #1
 80008dc:	4916      	ldr	r1, [pc, #88]	; (8000938 <conversion+0x210>)
 80008de:	5cc9      	ldrb	r1, [r1, r3]
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <conversion+0x20c>)
 80008e2:	4413      	add	r3, r2
 80008e4:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 80008e8:	336d      	adds	r3, #109	; 0x6d
 80008ea:	460a      	mov	r2, r1
 80008ec:	701a      	strb	r2, [r3, #0]
			SD.buffer4[3*i+2]=databuf[3*i+2+BUFLEN/2+BUFLEN/4];
 80008ee:	893a      	ldrh	r2, [r7, #8]
 80008f0:	4613      	mov	r3, r2
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	4413      	add	r3, r2
 80008f6:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 80008fa:	3312      	adds	r3, #18
 80008fc:	8939      	ldrh	r1, [r7, #8]
 80008fe:	460a      	mov	r2, r1
 8000900:	0052      	lsls	r2, r2, #1
 8000902:	440a      	add	r2, r1
 8000904:	3202      	adds	r2, #2
 8000906:	490c      	ldr	r1, [pc, #48]	; (8000938 <conversion+0x210>)
 8000908:	5cc9      	ldrb	r1, [r1, r3]
 800090a:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <conversion+0x20c>)
 800090c:	4413      	add	r3, r2
 800090e:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8000912:	336d      	adds	r3, #109	; 0x6d
 8000914:	460a      	mov	r2, r1
 8000916:	701a      	strb	r2, [r3, #0]
		for( uint16_t i=0;i<BUFLEN/12;i++){
 8000918:	893b      	ldrh	r3, [r7, #8]
 800091a:	3301      	adds	r3, #1
 800091c:	813b      	strh	r3, [r7, #8]
 800091e:	893b      	ldrh	r3, [r7, #8]
 8000920:	f5b3 6faa 	cmp.w	r3, #1360	; 0x550
 8000924:	d3c3      	bcc.n	80008ae <conversion+0x186>
}
 8000926:	bf00      	nop
 8000928:	3714      	adds	r7, #20
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	20000034 	.word	0x20000034
 8000938:	200060d0 	.word	0x200060d0

0800093c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800093c:	b590      	push	{r4, r7, lr}
 800093e:	b0bb      	sub	sp, #236	; 0xec
 8000940:	af3a      	add	r7, sp, #232	; 0xe8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000942:	f001 f837 	bl	80019b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000946:	f000 f8e5 	bl	8000b14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800094a:	f7ff fe95 	bl	8000678 <MX_GPIO_Init>
  MX_DMA_Init();
 800094e:	f7ff fe5b 	bl	8000608 <MX_DMA_Init>
  MX_SPI4_Init();
 8000952:	f000 fbd7 	bl	8001104 <MX_SPI4_Init>
  MX_TIM1_Init();
 8000956:	f000 fd57 	bl	8001408 <MX_TIM1_Init>
  MX_TIM3_Init();
 800095a:	f000 fe55 	bl	8001608 <MX_TIM3_Init>
  MX_SDIO_SD_Init();
 800095e:	f000 fac1 	bl	8000ee4 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000962:	f006 fcdb 	bl	800731c <MX_FATFS_Init>
  MX_TIM2_Init();
 8000966:	f000 fe03 	bl	8001570 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800096a:	f000 ff87 	bl	800187c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  mountSDcard();
 800096e:	f7ff fdb5 	bl	80004dc <mountSDcard>
  HAL_TIM_Base_Start(&htim2);
 8000972:	4850      	ldr	r0, [pc, #320]	; (8000ab4 <main+0x178>)
 8000974:	f004 fb9a 	bl	80050ac <HAL_TIM_Base_Start>
  hdma_tim1_ch1.XferHalfCpltCallback=XferHCplt;
 8000978:	4b4f      	ldr	r3, [pc, #316]	; (8000ab8 <main+0x17c>)
 800097a:	4a50      	ldr	r2, [pc, #320]	; (8000abc <main+0x180>)
 800097c:	641a      	str	r2, [r3, #64]	; 0x40

  InitMCP3208(hspi4, htim1, TIM_CHANNEL_1,htim3, TIM_CHANNEL_1, TIM_CHANNEL_2);
 800097e:	4c50      	ldr	r4, [pc, #320]	; (8000ac0 <main+0x184>)
 8000980:	2304      	movs	r3, #4
 8000982:	9338      	str	r3, [sp, #224]	; 0xe0
 8000984:	2300      	movs	r3, #0
 8000986:	9337      	str	r3, [sp, #220]	; 0xdc
 8000988:	4a4e      	ldr	r2, [pc, #312]	; (8000ac4 <main+0x188>)
 800098a:	ab25      	add	r3, sp, #148	; 0x94
 800098c:	4611      	mov	r1, r2
 800098e:	2248      	movs	r2, #72	; 0x48
 8000990:	4618      	mov	r0, r3
 8000992:	f009 f9cd 	bl	8009d30 <memcpy>
 8000996:	2300      	movs	r3, #0
 8000998:	9324      	str	r3, [sp, #144]	; 0x90
 800099a:	4a4b      	ldr	r2, [pc, #300]	; (8000ac8 <main+0x18c>)
 800099c:	ab12      	add	r3, sp, #72	; 0x48
 800099e:	4611      	mov	r1, r2
 80009a0:	2248      	movs	r2, #72	; 0x48
 80009a2:	4618      	mov	r0, r3
 80009a4:	f009 f9c4 	bl	8009d30 <memcpy>
 80009a8:	4668      	mov	r0, sp
 80009aa:	f104 0310 	add.w	r3, r4, #16
 80009ae:	2248      	movs	r2, #72	; 0x48
 80009b0:	4619      	mov	r1, r3
 80009b2:	f009 f9bd 	bl	8009d30 <memcpy>
 80009b6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80009ba:	f000 f9f5 	bl	8000da8 <InitMCP3208>
  hdma_spi4_rx.XferHalfCpltCallback=Farray;
 80009be:	4b43      	ldr	r3, [pc, #268]	; (8000acc <main+0x190>)
 80009c0:	4a43      	ldr	r2, [pc, #268]	; (8000ad0 <main+0x194>)
 80009c2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma_spi4_rx.XferCpltCallback=Sarray;
 80009c4:	4b41      	ldr	r3, [pc, #260]	; (8000acc <main+0x190>)
 80009c6:	4a43      	ldr	r2, [pc, #268]	; (8000ad4 <main+0x198>)
 80009c8:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(firstconversion){
 80009ca:	4b43      	ldr	r3, [pc, #268]	; (8000ad8 <main+0x19c>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d005      	beq.n	80009e0 <main+0xa4>
		  conversion( 1);
 80009d4:	2001      	movs	r0, #1
 80009d6:	f7ff fea7 	bl	8000728 <conversion>
		  firstconversion=0;
 80009da:	4b3f      	ldr	r3, [pc, #252]	; (8000ad8 <main+0x19c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	701a      	strb	r2, [r3, #0]
	  }
	  if(secondconversion){
 80009e0:	4b3e      	ldr	r3, [pc, #248]	; (8000adc <main+0x1a0>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d0ef      	beq.n	80009ca <main+0x8e>

		  conversion( 2);
 80009ea:	2002      	movs	r0, #2
 80009ec:	f7ff fe9c 	bl	8000728 <conversion>

#ifdef TIMEDEBUG
		  tsaveSD1=TIM2->CNT;
 80009f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009f6:	4a3a      	ldr	r2, [pc, #232]	; (8000ae0 <main+0x1a4>)
 80009f8:	6013      	str	r3, [r2, #0]
#endif
		  if(ACV==1){
 80009fa:	4b3a      	ldr	r3, [pc, #232]	; (8000ae4 <main+0x1a8>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d12d      	bne.n	8000a60 <main+0x124>
			  if(savestart){
 8000a04:	4b38      	ldr	r3, [pc, #224]	; (8000ae8 <main+0x1ac>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d009      	beq.n	8000a20 <main+0xe4>
				  openFile(myfilename, FA_OPEN_APPEND | FA_WRITE | FA_READ);
 8000a0c:	2133      	movs	r1, #51	; 0x33
 8000a0e:	4837      	ldr	r0, [pc, #220]	; (8000aec <main+0x1b0>)
 8000a10:	f7ff fd7c 	bl	800050c <openFile>
				  savestart=0;
 8000a14:	4b34      	ldr	r3, [pc, #208]	; (8000ae8 <main+0x1ac>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	701a      	strb	r2, [r3, #0]
				  savestop=1;
 8000a1a:	4b35      	ldr	r3, [pc, #212]	; (8000af0 <main+0x1b4>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	701a      	strb	r2, [r3, #0]
			  }
			  writeDataPacked(myfilename, FA_OPEN_APPEND | FA_WRITE | FA_READ);
 8000a20:	2133      	movs	r1, #51	; 0x33
 8000a22:	4832      	ldr	r0, [pc, #200]	; (8000aec <main+0x1b0>)
 8000a24:	f7ff fda0 	bl	8000568 <writeDataPacked>
			  HAL_UART_Transmit(&huart2,(uint8_t *)SD.buffer1 , BUFLEN/4, 10);
 8000a28:	230a      	movs	r3, #10
 8000a2a:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8000a2e:	4931      	ldr	r1, [pc, #196]	; (8000af4 <main+0x1b8>)
 8000a30:	4831      	ldr	r0, [pc, #196]	; (8000af8 <main+0x1bc>)
 8000a32:	f005 fb8a 	bl	800614a <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2,(uint8_t *)SD.buffer2 , BUFLEN/4, 10);
 8000a36:	230a      	movs	r3, #10
 8000a38:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8000a3c:	492f      	ldr	r1, [pc, #188]	; (8000afc <main+0x1c0>)
 8000a3e:	482e      	ldr	r0, [pc, #184]	; (8000af8 <main+0x1bc>)
 8000a40:	f005 fb83 	bl	800614a <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2,(uint8_t *)SD.buffer3 , BUFLEN/4, 10);
 8000a44:	230a      	movs	r3, #10
 8000a46:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8000a4a:	492d      	ldr	r1, [pc, #180]	; (8000b00 <main+0x1c4>)
 8000a4c:	482a      	ldr	r0, [pc, #168]	; (8000af8 <main+0x1bc>)
 8000a4e:	f005 fb7c 	bl	800614a <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2,(uint8_t *)SD.buffer4, BUFLEN/4, 10);
 8000a52:	230a      	movs	r3, #10
 8000a54:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8000a58:	492a      	ldr	r1, [pc, #168]	; (8000b04 <main+0x1c8>)
 8000a5a:	4827      	ldr	r0, [pc, #156]	; (8000af8 <main+0x1bc>)
 8000a5c:	f005 fb75 	bl	800614a <HAL_UART_Transmit>
		    }
		  if(ACV==0 && savestop==1){
 8000a60:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <main+0x1a8>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d10b      	bne.n	8000a82 <main+0x146>
 8000a6a:	4b21      	ldr	r3, [pc, #132]	; (8000af0 <main+0x1b4>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d107      	bne.n	8000a82 <main+0x146>
			  savestart=1;
 8000a72:	4b1d      	ldr	r3, [pc, #116]	; (8000ae8 <main+0x1ac>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	701a      	strb	r2, [r3, #0]
			  savestop=0;
 8000a78:	4b1d      	ldr	r3, [pc, #116]	; (8000af0 <main+0x1b4>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
			  closeFile();
 8000a7e:	f7ff fd61 	bl	8000544 <closeFile>
		  }
		  if(SD.fresult!=FR_OK){
 8000a82:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <main+0x1cc>)
 8000a84:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000a88:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d004      	beq.n	8000a9a <main+0x15e>
			  HAL_GPIO_WritePin(SD_RST_GPIO_Port,SD_RST_Pin,GPIO_PIN_SET);
 8000a90:	2201      	movs	r2, #1
 8000a92:	2110      	movs	r1, #16
 8000a94:	481d      	ldr	r0, [pc, #116]	; (8000b0c <main+0x1d0>)
 8000a96:	f001 fe6f 	bl	8002778 <HAL_GPIO_WritePin>

		  }

#ifdef TIMEDEBUG
		  tsaveSD2=TIM2->CNT-tsaveSD1;
 8000a9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <main+0x1a4>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	4a1a      	ldr	r2, [pc, #104]	; (8000b10 <main+0x1d4>)
 8000aa8:	6013      	str	r3, [r2, #0]
#endif



	  	secondconversion=0;
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <main+0x1a0>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	701a      	strb	r2, [r3, #0]
	  if(firstconversion){
 8000ab0:	e78b      	b.n	80009ca <main+0x8e>
 8000ab2:	bf00      	nop
 8000ab4:	2000a2ec 	.word	0x2000a2ec
 8000ab8:	2000a37c 	.word	0x2000a37c
 8000abc:	08000be5 	.word	0x08000be5
 8000ac0:	2000a1ec 	.word	0x2000a1ec
 8000ac4:	2000a334 	.word	0x2000a334
 8000ac8:	2000a2a4 	.word	0x2000a2a4
 8000acc:	2000a244 	.word	0x2000a244
 8000ad0:	08000cf1 	.word	0x08000cf1
 8000ad4:	08000d1d 	.word	0x08000d1d
 8000ad8:	200060a5 	.word	0x200060a5
 8000adc:	200060a6 	.word	0x200060a6
 8000ae0:	200060c8 	.word	0x200060c8
 8000ae4:	200060a4 	.word	0x200060a4
 8000ae8:	20000009 	.word	0x20000009
 8000aec:	20000000 	.word	0x20000000
 8000af0:	200060b8 	.word	0x200060b8
 8000af4:	200020a1 	.word	0x200020a1
 8000af8:	2000a3dc 	.word	0x2000a3dc
 8000afc:	200030a1 	.word	0x200030a1
 8000b00:	200040a1 	.word	0x200040a1
 8000b04:	200050a1 	.word	0x200050a1
 8000b08:	20000034 	.word	0x20000034
 8000b0c:	40020000 	.word	0x40020000
 8000b10:	200060cc 	.word	0x200060cc

08000b14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b094      	sub	sp, #80	; 0x50
 8000b18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b1a:	f107 0320 	add.w	r3, r7, #32
 8000b1e:	2230      	movs	r2, #48	; 0x30
 8000b20:	2100      	movs	r1, #0
 8000b22:	4618      	mov	r0, r3
 8000b24:	f009 f912 	bl	8009d4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b28:	f107 030c 	add.w	r3, r7, #12
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	4b27      	ldr	r3, [pc, #156]	; (8000bdc <SystemClock_Config+0xc8>)
 8000b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b40:	4a26      	ldr	r2, [pc, #152]	; (8000bdc <SystemClock_Config+0xc8>)
 8000b42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b46:	6413      	str	r3, [r2, #64]	; 0x40
 8000b48:	4b24      	ldr	r3, [pc, #144]	; (8000bdc <SystemClock_Config+0xc8>)
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b54:	2300      	movs	r3, #0
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <SystemClock_Config+0xcc>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a20      	ldr	r2, [pc, #128]	; (8000be0 <SystemClock_Config+0xcc>)
 8000b5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b62:	6013      	str	r3, [r2, #0]
 8000b64:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <SystemClock_Config+0xcc>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b70:	2302      	movs	r3, #2
 8000b72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b74:	2301      	movs	r3, #1
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b78:	2310      	movs	r3, #16
 8000b7a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b80:	2300      	movs	r3, #0
 8000b82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b84:	2308      	movs	r3, #8
 8000b86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000b88:	2364      	movs	r3, #100	; 0x64
 8000b8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000b90:	2305      	movs	r3, #5
 8000b92:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b94:	f107 0320 	add.w	r3, r7, #32
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f001 fe1f 	bl	80027dc <HAL_RCC_OscConfig>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ba4:	f000 f8fa 	bl	8000d9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba8:	230f      	movs	r3, #15
 8000baa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bac:	2302      	movs	r3, #2
 8000bae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bbe:	f107 030c 	add.w	r3, r7, #12
 8000bc2:	2103      	movs	r1, #3
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f002 f881 	bl	8002ccc <HAL_RCC_ClockConfig>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000bd0:	f000 f8e4 	bl	8000d9c <Error_Handler>
  }
}
 8000bd4:	bf00      	nop
 8000bd6:	3750      	adds	r7, #80	; 0x50
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40007000 	.word	0x40007000

08000be4 <XferHCplt>:

/* USER CODE BEGIN 4 */

void XferHCplt(DMA_HandleTypeDef *hdma) {
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	 adcdata[0]=databuf[2] | (((uint16_t) (databuf[1] & 0x0f)) << 8);
 8000bec:	4b3e      	ldr	r3, [pc, #248]	; (8000ce8 <XferHCplt+0x104>)
 8000bee:	789b      	ldrb	r3, [r3, #2]
 8000bf0:	b21a      	sxth	r2, r3
 8000bf2:	4b3d      	ldr	r3, [pc, #244]	; (8000ce8 <XferHCplt+0x104>)
 8000bf4:	785b      	ldrb	r3, [r3, #1]
 8000bf6:	021b      	lsls	r3, r3, #8
 8000bf8:	b21b      	sxth	r3, r3
 8000bfa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000bfe:	b21b      	sxth	r3, r3
 8000c00:	4313      	orrs	r3, r2
 8000c02:	b21b      	sxth	r3, r3
 8000c04:	b29a      	uxth	r2, r3
 8000c06:	4b39      	ldr	r3, [pc, #228]	; (8000cec <XferHCplt+0x108>)
 8000c08:	801a      	strh	r2, [r3, #0]
	 adcdata[1]=databuf[5] | (((uint16_t) (databuf[4] & 0x0f)) << 8);
 8000c0a:	4b37      	ldr	r3, [pc, #220]	; (8000ce8 <XferHCplt+0x104>)
 8000c0c:	795b      	ldrb	r3, [r3, #5]
 8000c0e:	b21a      	sxth	r2, r3
 8000c10:	4b35      	ldr	r3, [pc, #212]	; (8000ce8 <XferHCplt+0x104>)
 8000c12:	791b      	ldrb	r3, [r3, #4]
 8000c14:	021b      	lsls	r3, r3, #8
 8000c16:	b21b      	sxth	r3, r3
 8000c18:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000c1c:	b21b      	sxth	r3, r3
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	b21b      	sxth	r3, r3
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	4b31      	ldr	r3, [pc, #196]	; (8000cec <XferHCplt+0x108>)
 8000c26:	805a      	strh	r2, [r3, #2]
	 adcdata[2]=databuf[8] | (((uint16_t) (databuf[7] & 0x0f)) << 8);
 8000c28:	4b2f      	ldr	r3, [pc, #188]	; (8000ce8 <XferHCplt+0x104>)
 8000c2a:	7a1b      	ldrb	r3, [r3, #8]
 8000c2c:	b21a      	sxth	r2, r3
 8000c2e:	4b2e      	ldr	r3, [pc, #184]	; (8000ce8 <XferHCplt+0x104>)
 8000c30:	79db      	ldrb	r3, [r3, #7]
 8000c32:	021b      	lsls	r3, r3, #8
 8000c34:	b21b      	sxth	r3, r3
 8000c36:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000c3a:	b21b      	sxth	r3, r3
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	b21b      	sxth	r3, r3
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	4b2a      	ldr	r3, [pc, #168]	; (8000cec <XferHCplt+0x108>)
 8000c44:	809a      	strh	r2, [r3, #4]
	 adcdata[3]=databuf[11] | (((uint16_t) (databuf[10] & 0x0f)) << 8);
 8000c46:	4b28      	ldr	r3, [pc, #160]	; (8000ce8 <XferHCplt+0x104>)
 8000c48:	7adb      	ldrb	r3, [r3, #11]
 8000c4a:	b21a      	sxth	r2, r3
 8000c4c:	4b26      	ldr	r3, [pc, #152]	; (8000ce8 <XferHCplt+0x104>)
 8000c4e:	7a9b      	ldrb	r3, [r3, #10]
 8000c50:	021b      	lsls	r3, r3, #8
 8000c52:	b21b      	sxth	r3, r3
 8000c54:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000c58:	b21b      	sxth	r3, r3
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	b21b      	sxth	r3, r3
 8000c5e:	b29a      	uxth	r2, r3
 8000c60:	4b22      	ldr	r3, [pc, #136]	; (8000cec <XferHCplt+0x108>)
 8000c62:	80da      	strh	r2, [r3, #6]
	 adcdata[4]=databuf[14] | (((uint16_t) (databuf[13] & 0x0f)) << 8);
 8000c64:	4b20      	ldr	r3, [pc, #128]	; (8000ce8 <XferHCplt+0x104>)
 8000c66:	7b9b      	ldrb	r3, [r3, #14]
 8000c68:	b21a      	sxth	r2, r3
 8000c6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ce8 <XferHCplt+0x104>)
 8000c6c:	7b5b      	ldrb	r3, [r3, #13]
 8000c6e:	021b      	lsls	r3, r3, #8
 8000c70:	b21b      	sxth	r3, r3
 8000c72:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000c76:	b21b      	sxth	r3, r3
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	b21b      	sxth	r3, r3
 8000c7c:	b29a      	uxth	r2, r3
 8000c7e:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <XferHCplt+0x108>)
 8000c80:	811a      	strh	r2, [r3, #8]
	 adcdata[5]=databuf[17] | (((uint16_t) (databuf[16] & 0x0f)) << 8);
 8000c82:	4b19      	ldr	r3, [pc, #100]	; (8000ce8 <XferHCplt+0x104>)
 8000c84:	7c5b      	ldrb	r3, [r3, #17]
 8000c86:	b21a      	sxth	r2, r3
 8000c88:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <XferHCplt+0x104>)
 8000c8a:	7c1b      	ldrb	r3, [r3, #16]
 8000c8c:	021b      	lsls	r3, r3, #8
 8000c8e:	b21b      	sxth	r3, r3
 8000c90:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000c94:	b21b      	sxth	r3, r3
 8000c96:	4313      	orrs	r3, r2
 8000c98:	b21b      	sxth	r3, r3
 8000c9a:	b29a      	uxth	r2, r3
 8000c9c:	4b13      	ldr	r3, [pc, #76]	; (8000cec <XferHCplt+0x108>)
 8000c9e:	815a      	strh	r2, [r3, #10]
	 adcdata[6]=databuf[20] | (((uint16_t) (databuf[19] & 0x0f)) << 8);
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <XferHCplt+0x104>)
 8000ca2:	7d1b      	ldrb	r3, [r3, #20]
 8000ca4:	b21a      	sxth	r2, r3
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <XferHCplt+0x104>)
 8000ca8:	7cdb      	ldrb	r3, [r3, #19]
 8000caa:	021b      	lsls	r3, r3, #8
 8000cac:	b21b      	sxth	r3, r3
 8000cae:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000cb2:	b21b      	sxth	r3, r3
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	b21b      	sxth	r3, r3
 8000cb8:	b29a      	uxth	r2, r3
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <XferHCplt+0x108>)
 8000cbc:	819a      	strh	r2, [r3, #12]
	 adcdata[7]=databuf[23] | (((uint16_t) (databuf[22] & 0x0f)) << 8);
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <XferHCplt+0x104>)
 8000cc0:	7ddb      	ldrb	r3, [r3, #23]
 8000cc2:	b21a      	sxth	r2, r3
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <XferHCplt+0x104>)
 8000cc6:	7d9b      	ldrb	r3, [r3, #22]
 8000cc8:	021b      	lsls	r3, r3, #8
 8000cca:	b21b      	sxth	r3, r3
 8000ccc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000cd0:	b21b      	sxth	r3, r3
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	b21b      	sxth	r3, r3
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	4b04      	ldr	r3, [pc, #16]	; (8000cec <XferHCplt+0x108>)
 8000cda:	81da      	strh	r2, [r3, #14]

}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	200060d0 	.word	0x200060d0
 8000cec:	200060a8 	.word	0x200060a8

08000cf0 <Farray>:


void Farray(DMA_HandleTypeDef *hdma) {
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	firstconversion=1;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <Farray+0x24>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	701a      	strb	r2, [r3, #0]
#ifdef TIMEDEBUG
	thalfread1=TIM2->CNT;
 8000cfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d04:	4a04      	ldr	r2, [pc, #16]	; (8000d18 <Farray+0x28>)
 8000d06:	6013      	str	r3, [r2, #0]
#endif
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	200060a5 	.word	0x200060a5
 8000d18:	200060bc 	.word	0x200060bc

08000d1c <Sarray>:

void Sarray(DMA_HandleTypeDef *hdma) {
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	secondconversion = 1;
 8000d24:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <Sarray+0x34>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	701a      	strb	r2, [r3, #0]
#ifdef TIMEDEBUG
	thalfread2=TIM2->CNT-thalfread1;
 8000d2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d30:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <Sarray+0x38>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	4a08      	ldr	r2, [pc, #32]	; (8000d58 <Sarray+0x3c>)
 8000d38:	6013      	str	r3, [r2, #0]
	dmaArraytime=thalfread2*2;
 8000d3a:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <Sarray+0x3c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	4a06      	ldr	r2, [pc, #24]	; (8000d5c <Sarray+0x40>)
 8000d42:	6013      	str	r3, [r2, #0]
#endif
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	200060a6 	.word	0x200060a6
 8000d54:	200060bc 	.word	0x200060bc
 8000d58:	200060c0 	.word	0x200060c0
 8000d5c:	200060c4 	.word	0x200060c4

08000d60 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin==ACV_Pin){
 8000d6a:	88fb      	ldrh	r3, [r7, #6]
 8000d6c:	2b20      	cmp	r3, #32
 8000d6e:	d10d      	bne.n	8000d8c <HAL_GPIO_EXTI_Callback+0x2c>
		if(HAL_GPIO_ReadPin(ACV_GPIO_Port, ACV_Pin)){
 8000d70:	2120      	movs	r1, #32
 8000d72:	4808      	ldr	r0, [pc, #32]	; (8000d94 <HAL_GPIO_EXTI_Callback+0x34>)
 8000d74:	f001 fce8 	bl	8002748 <HAL_GPIO_ReadPin>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d003      	beq.n	8000d86 <HAL_GPIO_EXTI_Callback+0x26>
			ACV=1;
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_GPIO_EXTI_Callback+0x38>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	701a      	strb	r2, [r3, #0]
		}

	}


}
 8000d84:	e002      	b.n	8000d8c <HAL_GPIO_EXTI_Callback+0x2c>
			ACV=0;
 8000d86:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <HAL_GPIO_EXTI_Callback+0x38>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40020000 	.word	0x40020000
 8000d98:	200060a4 	.word	0x200060a4

08000d9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da0:	b672      	cpsid	i
}
 8000da2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <Error_Handler+0x8>
	...

08000da8 <InitMCP3208>:

/*  spi handle , gated timer to send byte by byte , channel of gated timer,
 * master timer which is gating previous timer, master channel ,PWM channel/Chip Select channel*/

void InitMCP3208(SPI_HandleTypeDef hspirx,TIM_HandleTypeDef htimgate, uint32_t gateChannel,
		TIM_HandleTypeDef htimmaster, uint32_t masterChannel, uint32_t ChipSelectChannel){
 8000da8:	b084      	sub	sp, #16
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	f107 0c10 	add.w	ip, r7, #16
 8000db4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	for (int i = 0; i < CHAN; i++) {
 8000db8:	2300      	movs	r3, #0
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	e024      	b.n	8000e08 <InitMCP3208+0x60>
		  	adcconv[3 * i] = 6 | ((i >> 2) & 1);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	109b      	asrs	r3, r3, #2
 8000dc2:	b25b      	sxtb	r3, r3
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	b25b      	sxtb	r3, r3
 8000dca:	f043 0306 	orr.w	r3, r3, #6
 8000dce:	b259      	sxtb	r1, r3
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	4413      	add	r3, r2
 8000dd8:	b2c9      	uxtb	r1, r1
 8000dda:	4a40      	ldr	r2, [pc, #256]	; (8000edc <InitMCP3208+0x134>)
 8000ddc:	54d1      	strb	r1, [r2, r3]
		  	adcconv[3 * i + 1] = (i & 3) << 6;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	0199      	lsls	r1, r3, #6
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	4613      	mov	r3, r2
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	4413      	add	r3, r2
 8000dea:	3301      	adds	r3, #1
 8000dec:	b2c9      	uxtb	r1, r1
 8000dee:	4a3b      	ldr	r2, [pc, #236]	; (8000edc <InitMCP3208+0x134>)
 8000df0:	54d1      	strb	r1, [r2, r3]
			adcconv[3 * i + 2] = 0;
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	4613      	mov	r3, r2
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	4413      	add	r3, r2
 8000dfa:	3302      	adds	r3, #2
 8000dfc:	4a37      	ldr	r2, [pc, #220]	; (8000edc <InitMCP3208+0x134>)
 8000dfe:	2100      	movs	r1, #0
 8000e00:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < CHAN; i++) {
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	3301      	adds	r3, #1
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2b07      	cmp	r3, #7
 8000e0c:	ddd7      	ble.n	8000dbe <InitMCP3208+0x16>
		}
	__HAL_SPI_ENABLE(&hspirx);
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e18:	601a      	str	r2, [r3, #0]
	HAL_SPI_Receive_DMA(&hspirx, databuf, BUFLEN);
 8000e1a:	f44f 527f 	mov.w	r2, #16320	; 0x3fc0
 8000e1e:	4930      	ldr	r1, [pc, #192]	; (8000ee0 <InitMCP3208+0x138>)
 8000e20:	f107 0010 	add.w	r0, r7, #16
 8000e24:	f003 fcee 	bl	8004804 <HAL_SPI_Receive_DMA>
	HAL_TIM_OC_Start(&htimgate, gateChannel);
 8000e28:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000e2c:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8000e30:	4618      	mov	r0, r3
 8000e32:	f004 f9ef 	bl	8005214 <HAL_TIM_OC_Start>
	uint16_t chanID=(uint16_t)(1+(gateChannel/4));
 8000e36:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000e3a:	089b      	lsrs	r3, r3, #2
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	3301      	adds	r3, #1
 8000e40:	807b      	strh	r3, [r7, #2]
	HAL_DMA_Start_IT(htimgate.hdma[chanID],(uint32_t) &adcconv, (uint32_t)&hspirx.Instance->DR, 3*CHAN);
 8000e42:	887b      	ldrh	r3, [r7, #2]
 8000e44:	3308      	adds	r3, #8
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	3310      	adds	r3, #16
 8000e4a:	443b      	add	r3, r7
 8000e4c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8000e4e:	4923      	ldr	r1, [pc, #140]	; (8000edc <InitMCP3208+0x134>)
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	330c      	adds	r3, #12
 8000e54:	461a      	mov	r2, r3
 8000e56:	2318      	movs	r3, #24
 8000e58:	f001 f802 	bl	8001e60 <HAL_DMA_Start_IT>

	switch(chanID){
 8000e5c:	887b      	ldrh	r3, [r7, #2]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	2b03      	cmp	r3, #3
 8000e62:	d81b      	bhi.n	8000e9c <InitMCP3208+0xf4>
 8000e64:	a201      	add	r2, pc, #4	; (adr r2, 8000e6c <InitMCP3208+0xc4>)
 8000e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e6a:	bf00      	nop
 8000e6c:	08000e7d 	.word	0x08000e7d
 8000e70:	08000e85 	.word	0x08000e85
 8000e74:	08000e8d 	.word	0x08000e8d
 8000e78:	08000e95 	.word	0x08000e95
		case 1:
			chanID=0x0200;
 8000e7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e80:	807b      	strh	r3, [r7, #2]
			break;
 8000e82:	e00f      	b.n	8000ea4 <InitMCP3208+0xfc>
		case 2:
			chanID=0x0400;
 8000e84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e88:	807b      	strh	r3, [r7, #2]
			break;
 8000e8a:	e00b      	b.n	8000ea4 <InitMCP3208+0xfc>
		case 3:
			chanID=0x0800;
 8000e8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e90:	807b      	strh	r3, [r7, #2]
			break;
 8000e92:	e007      	b.n	8000ea4 <InitMCP3208+0xfc>
		case 4:
			chanID=0x1000;
 8000e94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e98:	807b      	strh	r3, [r7, #2]
			break;
 8000e9a:	e003      	b.n	8000ea4 <InitMCP3208+0xfc>
		default:
			chanID=0x0200;
 8000e9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ea0:	807b      	strh	r3, [r7, #2]
			break;
 8000ea2:	bf00      	nop
	}
	__HAL_TIM_ENABLE_DMA(&htimgate,chanID);
 8000ea4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000ea6:	68d9      	ldr	r1, [r3, #12]
 8000ea8:	887a      	ldrh	r2, [r7, #2]
 8000eaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000eac:	430a      	orrs	r2, r1
 8000eae:	60da      	str	r2, [r3, #12]
	HAL_TIM_OC_Start(&htimmaster, masterChannel);
 8000eb0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000eb4:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f004 f9ab 	bl	8005214 <HAL_TIM_OC_Start>
	HAL_TIM_OC_Start(&htimmaster, ChipSelectChannel);
 8000ebe:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000ec2:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f004 f9a4 	bl	8005214 <HAL_TIM_OC_Start>

}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ed6:	b004      	add	sp, #16
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	2000a090 	.word	0x2000a090
 8000ee0:	200060d0 	.word	0x200060d0

08000ee4 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <MX_SDIO_SD_Init+0x38>)
 8000eea:	4a0d      	ldr	r2, [pc, #52]	; (8000f20 <MX_SDIO_SD_Init+0x3c>)
 8000eec:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000eee:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <MX_SDIO_SD_Init+0x38>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000ef4:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <MX_SDIO_SD_Init+0x38>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000efa:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <MX_SDIO_SD_Init+0x38>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <MX_SDIO_SD_Init+0x38>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000f06:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <MX_SDIO_SD_Init+0x38>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 6;
 8000f0c:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <MX_SDIO_SD_Init+0x38>)
 8000f0e:	2206      	movs	r2, #6
 8000f10:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	2000a0a8 	.word	0x2000a0a8
 8000f20:	40012c00 	.word	0x40012c00

08000f24 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08a      	sub	sp, #40	; 0x28
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a68      	ldr	r2, [pc, #416]	; (80010e4 <HAL_SD_MspInit+0x1c0>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	f040 80ca 	bne.w	80010dc <HAL_SD_MspInit+0x1b8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000f48:	2300      	movs	r3, #0
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	4b66      	ldr	r3, [pc, #408]	; (80010e8 <HAL_SD_MspInit+0x1c4>)
 8000f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f50:	4a65      	ldr	r2, [pc, #404]	; (80010e8 <HAL_SD_MspInit+0x1c4>)
 8000f52:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f56:	6453      	str	r3, [r2, #68]	; 0x44
 8000f58:	4b63      	ldr	r3, [pc, #396]	; (80010e8 <HAL_SD_MspInit+0x1c4>)
 8000f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f60:	613b      	str	r3, [r7, #16]
 8000f62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f64:	2300      	movs	r3, #0
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	4b5f      	ldr	r3, [pc, #380]	; (80010e8 <HAL_SD_MspInit+0x1c4>)
 8000f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6c:	4a5e      	ldr	r2, [pc, #376]	; (80010e8 <HAL_SD_MspInit+0x1c4>)
 8000f6e:	f043 0301 	orr.w	r3, r3, #1
 8000f72:	6313      	str	r3, [r2, #48]	; 0x30
 8000f74:	4b5c      	ldr	r3, [pc, #368]	; (80010e8 <HAL_SD_MspInit+0x1c4>)
 8000f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f80:	2300      	movs	r3, #0
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	4b58      	ldr	r3, [pc, #352]	; (80010e8 <HAL_SD_MspInit+0x1c4>)
 8000f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f88:	4a57      	ldr	r2, [pc, #348]	; (80010e8 <HAL_SD_MspInit+0x1c4>)
 8000f8a:	f043 0302 	orr.w	r3, r3, #2
 8000f8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f90:	4b55      	ldr	r3, [pc, #340]	; (80010e8 <HAL_SD_MspInit+0x1c4>)
 8000f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB4     ------> SDIO_D0
    PB5     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8000f9c:	f44f 7350 	mov.w	r3, #832	; 0x340
 8000fa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000faa:	2303      	movs	r3, #3
 8000fac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000fae:	230c      	movs	r3, #12
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	484c      	ldr	r0, [pc, #304]	; (80010ec <HAL_SD_MspInit+0x1c8>)
 8000fba:	f001 fa41 	bl	8002440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5;
 8000fbe:	f248 0330 	movw	r3, #32816	; 0x8030
 8000fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000fd0:	230c      	movs	r3, #12
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4845      	ldr	r0, [pc, #276]	; (80010f0 <HAL_SD_MspInit+0x1cc>)
 8000fdc:	f001 fa30 	bl	8002440 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000fe0:	4b44      	ldr	r3, [pc, #272]	; (80010f4 <HAL_SD_MspInit+0x1d0>)
 8000fe2:	4a45      	ldr	r2, [pc, #276]	; (80010f8 <HAL_SD_MspInit+0x1d4>)
 8000fe4:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000fe6:	4b43      	ldr	r3, [pc, #268]	; (80010f4 <HAL_SD_MspInit+0x1d0>)
 8000fe8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fec:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fee:	4b41      	ldr	r3, [pc, #260]	; (80010f4 <HAL_SD_MspInit+0x1d0>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ff4:	4b3f      	ldr	r3, [pc, #252]	; (80010f4 <HAL_SD_MspInit+0x1d0>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ffa:	4b3e      	ldr	r3, [pc, #248]	; (80010f4 <HAL_SD_MspInit+0x1d0>)
 8000ffc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001000:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001002:	4b3c      	ldr	r3, [pc, #240]	; (80010f4 <HAL_SD_MspInit+0x1d0>)
 8001004:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001008:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800100a:	4b3a      	ldr	r3, [pc, #232]	; (80010f4 <HAL_SD_MspInit+0x1d0>)
 800100c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001010:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001012:	4b38      	ldr	r3, [pc, #224]	; (80010f4 <HAL_SD_MspInit+0x1d0>)
 8001014:	2220      	movs	r2, #32
 8001016:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001018:	4b36      	ldr	r3, [pc, #216]	; (80010f4 <HAL_SD_MspInit+0x1d0>)
 800101a:	2200      	movs	r2, #0
 800101c:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800101e:	4b35      	ldr	r3, [pc, #212]	; (80010f4 <HAL_SD_MspInit+0x1d0>)
 8001020:	2204      	movs	r2, #4
 8001022:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001024:	4b33      	ldr	r3, [pc, #204]	; (80010f4 <HAL_SD_MspInit+0x1d0>)
 8001026:	2203      	movs	r2, #3
 8001028:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800102a:	4b32      	ldr	r3, [pc, #200]	; (80010f4 <HAL_SD_MspInit+0x1d0>)
 800102c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001030:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001032:	4b30      	ldr	r3, [pc, #192]	; (80010f4 <HAL_SD_MspInit+0x1d0>)
 8001034:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001038:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800103a:	482e      	ldr	r0, [pc, #184]	; (80010f4 <HAL_SD_MspInit+0x1d0>)
 800103c:	f000 fe62 	bl	8001d04 <HAL_DMA_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8001046:	f7ff fea9 	bl	8000d9c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a29      	ldr	r2, [pc, #164]	; (80010f4 <HAL_SD_MspInit+0x1d0>)
 800104e:	641a      	str	r2, [r3, #64]	; 0x40
 8001050:	4a28      	ldr	r2, [pc, #160]	; (80010f4 <HAL_SD_MspInit+0x1d0>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001056:	4b29      	ldr	r3, [pc, #164]	; (80010fc <HAL_SD_MspInit+0x1d8>)
 8001058:	4a29      	ldr	r2, [pc, #164]	; (8001100 <HAL_SD_MspInit+0x1dc>)
 800105a:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800105c:	4b27      	ldr	r3, [pc, #156]	; (80010fc <HAL_SD_MspInit+0x1d8>)
 800105e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001062:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001064:	4b25      	ldr	r3, [pc, #148]	; (80010fc <HAL_SD_MspInit+0x1d8>)
 8001066:	2240      	movs	r2, #64	; 0x40
 8001068:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800106a:	4b24      	ldr	r3, [pc, #144]	; (80010fc <HAL_SD_MspInit+0x1d8>)
 800106c:	2200      	movs	r2, #0
 800106e:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001070:	4b22      	ldr	r3, [pc, #136]	; (80010fc <HAL_SD_MspInit+0x1d8>)
 8001072:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001076:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001078:	4b20      	ldr	r3, [pc, #128]	; (80010fc <HAL_SD_MspInit+0x1d8>)
 800107a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800107e:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001080:	4b1e      	ldr	r3, [pc, #120]	; (80010fc <HAL_SD_MspInit+0x1d8>)
 8001082:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001086:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001088:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <HAL_SD_MspInit+0x1d8>)
 800108a:	2220      	movs	r2, #32
 800108c:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800108e:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <HAL_SD_MspInit+0x1d8>)
 8001090:	2200      	movs	r2, #0
 8001092:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001094:	4b19      	ldr	r3, [pc, #100]	; (80010fc <HAL_SD_MspInit+0x1d8>)
 8001096:	2204      	movs	r2, #4
 8001098:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800109a:	4b18      	ldr	r3, [pc, #96]	; (80010fc <HAL_SD_MspInit+0x1d8>)
 800109c:	2203      	movs	r2, #3
 800109e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80010a0:	4b16      	ldr	r3, [pc, #88]	; (80010fc <HAL_SD_MspInit+0x1d8>)
 80010a2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80010a6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80010a8:	4b14      	ldr	r3, [pc, #80]	; (80010fc <HAL_SD_MspInit+0x1d8>)
 80010aa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80010ae:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80010b0:	4812      	ldr	r0, [pc, #72]	; (80010fc <HAL_SD_MspInit+0x1d8>)
 80010b2:	f000 fe27 	bl	8001d04 <HAL_DMA_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <HAL_SD_MspInit+0x19c>
    {
      Error_Handler();
 80010bc:	f7ff fe6e 	bl	8000d9c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a0e      	ldr	r2, [pc, #56]	; (80010fc <HAL_SD_MspInit+0x1d8>)
 80010c4:	63da      	str	r2, [r3, #60]	; 0x3c
 80010c6:	4a0d      	ldr	r2, [pc, #52]	; (80010fc <HAL_SD_MspInit+0x1d8>)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2100      	movs	r1, #0
 80010d0:	2031      	movs	r0, #49	; 0x31
 80010d2:	f000 fde0 	bl	8001c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80010d6:	2031      	movs	r0, #49	; 0x31
 80010d8:	f000 fdf9 	bl	8001cce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80010dc:	bf00      	nop
 80010de:	3728      	adds	r7, #40	; 0x28
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40012c00 	.word	0x40012c00
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40020000 	.word	0x40020000
 80010f0:	40020400 	.word	0x40020400
 80010f4:	2000a12c 	.word	0x2000a12c
 80010f8:	40026458 	.word	0x40026458
 80010fc:	2000a18c 	.word	0x2000a18c
 8001100:	400264a0 	.word	0x400264a0

08001104 <MX_SPI4_Init>:
SPI_HandleTypeDef hspi4;
DMA_HandleTypeDef hdma_spi4_rx;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001108:	4b17      	ldr	r3, [pc, #92]	; (8001168 <MX_SPI4_Init+0x64>)
 800110a:	4a18      	ldr	r2, [pc, #96]	; (800116c <MX_SPI4_Init+0x68>)
 800110c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800110e:	4b16      	ldr	r3, [pc, #88]	; (8001168 <MX_SPI4_Init+0x64>)
 8001110:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001114:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <MX_SPI4_Init+0x64>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <MX_SPI4_Init+0x64>)
 800111e:	2200      	movs	r2, #0
 8001120:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <MX_SPI4_Init+0x64>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001128:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <MX_SPI4_Init+0x64>)
 800112a:	2200      	movs	r2, #0
 800112c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <MX_SPI4_Init+0x64>)
 8001130:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001134:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001136:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <MX_SPI4_Init+0x64>)
 8001138:	2228      	movs	r2, #40	; 0x28
 800113a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800113c:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <MX_SPI4_Init+0x64>)
 800113e:	2200      	movs	r2, #0
 8001140:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <MX_SPI4_Init+0x64>)
 8001144:	2200      	movs	r2, #0
 8001146:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001148:	4b07      	ldr	r3, [pc, #28]	; (8001168 <MX_SPI4_Init+0x64>)
 800114a:	2200      	movs	r2, #0
 800114c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <MX_SPI4_Init+0x64>)
 8001150:	220a      	movs	r2, #10
 8001152:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001154:	4804      	ldr	r0, [pc, #16]	; (8001168 <MX_SPI4_Init+0x64>)
 8001156:	f003 facc 	bl	80046f2 <HAL_SPI_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001160:	f7ff fe1c 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	2000a1ec 	.word	0x2000a1ec
 800116c:	40013400 	.word	0x40013400

08001170 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a49      	ldr	r2, [pc, #292]	; (80012b4 <HAL_SPI_MspInit+0x144>)
 800118e:	4293      	cmp	r3, r2
 8001190:	f040 808b 	bne.w	80012aa <HAL_SPI_MspInit+0x13a>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001194:	2300      	movs	r3, #0
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	4b47      	ldr	r3, [pc, #284]	; (80012b8 <HAL_SPI_MspInit+0x148>)
 800119a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119c:	4a46      	ldr	r2, [pc, #280]	; (80012b8 <HAL_SPI_MspInit+0x148>)
 800119e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011a2:	6453      	str	r3, [r2, #68]	; 0x44
 80011a4:	4b44      	ldr	r3, [pc, #272]	; (80012b8 <HAL_SPI_MspInit+0x148>)
 80011a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	4b40      	ldr	r3, [pc, #256]	; (80012b8 <HAL_SPI_MspInit+0x148>)
 80011b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b8:	4a3f      	ldr	r2, [pc, #252]	; (80012b8 <HAL_SPI_MspInit+0x148>)
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	6313      	str	r3, [r2, #48]	; 0x30
 80011c0:	4b3d      	ldr	r3, [pc, #244]	; (80012b8 <HAL_SPI_MspInit+0x148>)
 80011c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011cc:	2300      	movs	r3, #0
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	4b39      	ldr	r3, [pc, #228]	; (80012b8 <HAL_SPI_MspInit+0x148>)
 80011d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d4:	4a38      	ldr	r2, [pc, #224]	; (80012b8 <HAL_SPI_MspInit+0x148>)
 80011d6:	f043 0302 	orr.w	r3, r3, #2
 80011da:	6313      	str	r3, [r2, #48]	; 0x30
 80011dc:	4b36      	ldr	r3, [pc, #216]	; (80012b8 <HAL_SPI_MspInit+0x148>)
 80011de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PA1     ------> SPI4_MOSI
    PB13     ------> SPI4_SCK
    PA11     ------> SPI4_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011e8:	2302      	movs	r3, #2
 80011ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ec:	2302      	movs	r3, #2
 80011ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f4:	2303      	movs	r3, #3
 80011f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80011f8:	2305      	movs	r3, #5
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	4619      	mov	r1, r3
 8001202:	482e      	ldr	r0, [pc, #184]	; (80012bc <HAL_SPI_MspInit+0x14c>)
 8001204:	f001 f91c 	bl	8002440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001208:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800120c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001216:	2303      	movs	r3, #3
 8001218:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 800121a:	2306      	movs	r3, #6
 800121c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	4619      	mov	r1, r3
 8001224:	4826      	ldr	r0, [pc, #152]	; (80012c0 <HAL_SPI_MspInit+0x150>)
 8001226:	f001 f90b 	bl	8002440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800122a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800122e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001238:	2303      	movs	r3, #3
 800123a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 800123c:	2306      	movs	r3, #6
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	4619      	mov	r1, r3
 8001246:	481d      	ldr	r0, [pc, #116]	; (80012bc <HAL_SPI_MspInit+0x14c>)
 8001248:	f001 f8fa 	bl	8002440 <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_RX Init */
    hdma_spi4_rx.Instance = DMA2_Stream0;
 800124c:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <HAL_SPI_MspInit+0x154>)
 800124e:	4a1e      	ldr	r2, [pc, #120]	; (80012c8 <HAL_SPI_MspInit+0x158>)
 8001250:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 8001252:	4b1c      	ldr	r3, [pc, #112]	; (80012c4 <HAL_SPI_MspInit+0x154>)
 8001254:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001258:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800125a:	4b1a      	ldr	r3, [pc, #104]	; (80012c4 <HAL_SPI_MspInit+0x154>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001260:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <HAL_SPI_MspInit+0x154>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001266:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <HAL_SPI_MspInit+0x154>)
 8001268:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800126c:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800126e:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <HAL_SPI_MspInit+0x154>)
 8001270:	2200      	movs	r2, #0
 8001272:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001274:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <HAL_SPI_MspInit+0x154>)
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_CIRCULAR;
 800127a:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <HAL_SPI_MspInit+0x154>)
 800127c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001280:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <HAL_SPI_MspInit+0x154>)
 8001284:	2200      	movs	r2, #0
 8001286:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001288:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <HAL_SPI_MspInit+0x154>)
 800128a:	2200      	movs	r2, #0
 800128c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 800128e:	480d      	ldr	r0, [pc, #52]	; (80012c4 <HAL_SPI_MspInit+0x154>)
 8001290:	f000 fd38 	bl	8001d04 <HAL_DMA_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <HAL_SPI_MspInit+0x12e>
    {
      Error_Handler();
 800129a:	f7ff fd7f 	bl	8000d9c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a08      	ldr	r2, [pc, #32]	; (80012c4 <HAL_SPI_MspInit+0x154>)
 80012a2:	64da      	str	r2, [r3, #76]	; 0x4c
 80012a4:	4a07      	ldr	r2, [pc, #28]	; (80012c4 <HAL_SPI_MspInit+0x154>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80012aa:	bf00      	nop
 80012ac:	3728      	adds	r7, #40	; 0x28
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40013400 	.word	0x40013400
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40020000 	.word	0x40020000
 80012c0:	40020400 	.word	0x40020400
 80012c4:	2000a244 	.word	0x2000a244
 80012c8:	40026410 	.word	0x40026410

080012cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	4b10      	ldr	r3, [pc, #64]	; (8001318 <HAL_MspInit+0x4c>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	4a0f      	ldr	r2, [pc, #60]	; (8001318 <HAL_MspInit+0x4c>)
 80012dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e0:	6453      	str	r3, [r2, #68]	; 0x44
 80012e2:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <HAL_MspInit+0x4c>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	603b      	str	r3, [r7, #0]
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <HAL_MspInit+0x4c>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	4a08      	ldr	r2, [pc, #32]	; (8001318 <HAL_MspInit+0x4c>)
 80012f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012fc:	6413      	str	r3, [r2, #64]	; 0x40
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_MspInit+0x4c>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001306:	603b      	str	r3, [r7, #0]
 8001308:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800

0800131c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <NMI_Handler+0x4>

08001322 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001326:	e7fe      	b.n	8001326 <HardFault_Handler+0x4>

08001328 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800132c:	e7fe      	b.n	800132c <MemManage_Handler+0x4>

0800132e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001332:	e7fe      	b.n	8001332 <BusFault_Handler+0x4>

08001334 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001338:	e7fe      	b.n	8001338 <UsageFault_Handler+0x4>

0800133a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001368:	f000 fb76 	bl	8001a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}

08001370 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACV_Pin);
 8001374:	2020      	movs	r0, #32
 8001376:	f001 fa19 	bl	80027ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001384:	4802      	ldr	r0, [pc, #8]	; (8001390 <SDIO_IRQHandler+0x10>)
 8001386:	f002 f8f9 	bl	800357c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	2000a0a8 	.word	0x2000a0a8

08001394 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8001398:	4802      	ldr	r0, [pc, #8]	; (80013a4 <DMA2_Stream0_IRQHandler+0x10>)
 800139a:	f000 fddb 	bl	8001f54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	2000a244 	.word	0x2000a244

080013a8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80013ac:	4802      	ldr	r0, [pc, #8]	; (80013b8 <DMA2_Stream1_IRQHandler+0x10>)
 80013ae:	f000 fdd1 	bl	8001f54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	2000a37c 	.word	0x2000a37c

080013bc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80013c0:	4802      	ldr	r0, [pc, #8]	; (80013cc <DMA2_Stream3_IRQHandler+0x10>)
 80013c2:	f000 fdc7 	bl	8001f54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	2000a12c 	.word	0x2000a12c

080013d0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80013d4:	4802      	ldr	r0, [pc, #8]	; (80013e0 <DMA2_Stream6_IRQHandler+0x10>)
 80013d6:	f000 fdbd 	bl	8001f54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	2000a18c 	.word	0x2000a18c

080013e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <SystemInit+0x20>)
 80013ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ee:	4a05      	ldr	r2, [pc, #20]	; (8001404 <SystemInit+0x20>)
 80013f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b09a      	sub	sp, #104	; 0x68
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800140e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800141c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800142c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001436:	f107 0320 	add.w	r3, r7, #32
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
 8001444:	611a      	str	r2, [r3, #16]
 8001446:	615a      	str	r2, [r3, #20]
 8001448:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800144a:	463b      	mov	r3, r7
 800144c:	2220      	movs	r2, #32
 800144e:	2100      	movs	r1, #0
 8001450:	4618      	mov	r0, r3
 8001452:	f008 fc7b 	bl	8009d4c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001456:	4b44      	ldr	r3, [pc, #272]	; (8001568 <MX_TIM1_Init+0x160>)
 8001458:	4a44      	ldr	r2, [pc, #272]	; (800156c <MX_TIM1_Init+0x164>)
 800145a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 800145c:	4b42      	ldr	r3, [pc, #264]	; (8001568 <MX_TIM1_Init+0x160>)
 800145e:	2263      	movs	r2, #99	; 0x63
 8001460:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001462:	4b41      	ldr	r3, [pc, #260]	; (8001568 <MX_TIM1_Init+0x160>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = PER1B;
 8001468:	4b3f      	ldr	r3, [pc, #252]	; (8001568 <MX_TIM1_Init+0x160>)
 800146a:	220e      	movs	r2, #14
 800146c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800146e:	4b3e      	ldr	r3, [pc, #248]	; (8001568 <MX_TIM1_Init+0x160>)
 8001470:	2200      	movs	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001474:	4b3c      	ldr	r3, [pc, #240]	; (8001568 <MX_TIM1_Init+0x160>)
 8001476:	2200      	movs	r2, #0
 8001478:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147a:	4b3b      	ldr	r3, [pc, #236]	; (8001568 <MX_TIM1_Init+0x160>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001480:	4839      	ldr	r0, [pc, #228]	; (8001568 <MX_TIM1_Init+0x160>)
 8001482:	f003 fdc3 	bl	800500c <HAL_TIM_Base_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 800148c:	f7ff fc86 	bl	8000d9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001490:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001494:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001496:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800149a:	4619      	mov	r1, r3
 800149c:	4832      	ldr	r0, [pc, #200]	; (8001568 <MX_TIM1_Init+0x160>)
 800149e:	f004 f8e1 	bl	8005664 <HAL_TIM_ConfigClockSource>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80014a8:	f7ff fc78 	bl	8000d9c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80014ac:	482e      	ldr	r0, [pc, #184]	; (8001568 <MX_TIM1_Init+0x160>)
 80014ae:	f003 fe57 	bl	8005160 <HAL_TIM_OC_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80014b8:	f7ff fc70 	bl	8000d9c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 80014bc:	2305      	movs	r3, #5
 80014be:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 80014c0:	2320      	movs	r3, #32
 80014c2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80014c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80014c8:	4619      	mov	r1, r3
 80014ca:	4827      	ldr	r0, [pc, #156]	; (8001568 <MX_TIM1_Init+0x160>)
 80014cc:	f004 f991 	bl	80057f2 <HAL_TIM_SlaveConfigSynchro>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 80014d6:	f7ff fc61 	bl	8000d9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014da:	2300      	movs	r3, #0
 80014dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014de:	2300      	movs	r3, #0
 80014e0:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80014e6:	4619      	mov	r1, r3
 80014e8:	481f      	ldr	r0, [pc, #124]	; (8001568 <MX_TIM1_Init+0x160>)
 80014ea:	f004 fd21 	bl	8005f30 <HAL_TIMEx_MasterConfigSynchronization>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80014f4:	f7ff fc52 	bl	8000d9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80014f8:	2310      	movs	r3, #16
 80014fa:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = PULSE1B;
 80014fc:	2302      	movs	r3, #2
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001500:	2300      	movs	r3, #0
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001504:	2300      	movs	r3, #0
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001508:	2300      	movs	r3, #0
 800150a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800150c:	2300      	movs	r3, #0
 800150e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001510:	2300      	movs	r3, #0
 8001512:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001514:	f107 0320 	add.w	r3, r7, #32
 8001518:	2200      	movs	r2, #0
 800151a:	4619      	mov	r1, r3
 800151c:	4812      	ldr	r0, [pc, #72]	; (8001568 <MX_TIM1_Init+0x160>)
 800151e:	f003 ff83 	bl	8005428 <HAL_TIM_OC_ConfigChannel>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8001528:	f7ff fc38 	bl	8000d9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800152c:	2300      	movs	r3, #0
 800152e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001534:	2300      	movs	r3, #0
 8001536:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800153c:	2300      	movs	r3, #0
 800153e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001540:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001544:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800154a:	463b      	mov	r3, r7
 800154c:	4619      	mov	r1, r3
 800154e:	4806      	ldr	r0, [pc, #24]	; (8001568 <MX_TIM1_Init+0x160>)
 8001550:	f004 fd5c 	bl	800600c <HAL_TIMEx_ConfigBreakDeadTime>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM1_Init+0x156>
  {
    Error_Handler();
 800155a:	f7ff fc1f 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	3768      	adds	r7, #104	; 0x68
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	2000a2a4 	.word	0x2000a2a4
 800156c:	40010000 	.word	0x40010000

08001570 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001576:	f107 0308 	add.w	r3, r7, #8
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001584:	463b      	mov	r3, r7
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800158c:	4b1d      	ldr	r3, [pc, #116]	; (8001604 <MX_TIM2_Init+0x94>)
 800158e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001592:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8001594:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <MX_TIM2_Init+0x94>)
 8001596:	2263      	movs	r2, #99	; 0x63
 8001598:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159a:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <MX_TIM2_Init+0x94>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80015a0:	4b18      	ldr	r3, [pc, #96]	; (8001604 <MX_TIM2_Init+0x94>)
 80015a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a8:	4b16      	ldr	r3, [pc, #88]	; (8001604 <MX_TIM2_Init+0x94>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <MX_TIM2_Init+0x94>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015b4:	4813      	ldr	r0, [pc, #76]	; (8001604 <MX_TIM2_Init+0x94>)
 80015b6:	f003 fd29 	bl	800500c <HAL_TIM_Base_Init>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015c0:	f7ff fbec 	bl	8000d9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015ca:	f107 0308 	add.w	r3, r7, #8
 80015ce:	4619      	mov	r1, r3
 80015d0:	480c      	ldr	r0, [pc, #48]	; (8001604 <MX_TIM2_Init+0x94>)
 80015d2:	f004 f847 	bl	8005664 <HAL_TIM_ConfigClockSource>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015dc:	f7ff fbde 	bl	8000d9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e0:	2300      	movs	r3, #0
 80015e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015e8:	463b      	mov	r3, r7
 80015ea:	4619      	mov	r1, r3
 80015ec:	4805      	ldr	r0, [pc, #20]	; (8001604 <MX_TIM2_Init+0x94>)
 80015ee:	f004 fc9f 	bl	8005f30 <HAL_TIMEx_MasterConfigSynchronization>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015f8:	f7ff fbd0 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015fc:	bf00      	nop
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	2000a2ec 	.word	0x2000a2ec

08001608 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08e      	sub	sp, #56	; 0x38
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161c:	f107 0320 	add.w	r3, r7, #32
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
 8001634:	615a      	str	r2, [r3, #20]
 8001636:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001638:	4b33      	ldr	r3, [pc, #204]	; (8001708 <MX_TIM3_Init+0x100>)
 800163a:	4a34      	ldr	r2, [pc, #208]	; (800170c <MX_TIM3_Init+0x104>)
 800163c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 800163e:	4b32      	ldr	r3, [pc, #200]	; (8001708 <MX_TIM3_Init+0x100>)
 8001640:	2263      	movs	r2, #99	; 0x63
 8001642:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001644:	4b30      	ldr	r3, [pc, #192]	; (8001708 <MX_TIM3_Init+0x100>)
 8001646:	2200      	movs	r2, #0
 8001648:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = PER3B;
 800164a:	4b2f      	ldr	r3, [pc, #188]	; (8001708 <MX_TIM3_Init+0x100>)
 800164c:	2231      	movs	r2, #49	; 0x31
 800164e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001650:	4b2d      	ldr	r3, [pc, #180]	; (8001708 <MX_TIM3_Init+0x100>)
 8001652:	2200      	movs	r2, #0
 8001654:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001656:	4b2c      	ldr	r3, [pc, #176]	; (8001708 <MX_TIM3_Init+0x100>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800165c:	482a      	ldr	r0, [pc, #168]	; (8001708 <MX_TIM3_Init+0x100>)
 800165e:	f003 fcd5 	bl	800500c <HAL_TIM_Base_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001668:	f7ff fb98 	bl	8000d9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800166c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001670:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001672:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001676:	4619      	mov	r1, r3
 8001678:	4823      	ldr	r0, [pc, #140]	; (8001708 <MX_TIM3_Init+0x100>)
 800167a:	f003 fff3 	bl	8005664 <HAL_TIM_ConfigClockSource>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001684:	f7ff fb8a 	bl	8000d9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001688:	481f      	ldr	r0, [pc, #124]	; (8001708 <MX_TIM3_Init+0x100>)
 800168a:	f003 fe73 	bl	8005374 <HAL_TIM_PWM_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001694:	f7ff fb82 	bl	8000d9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8001698:	2340      	movs	r3, #64	; 0x40
 800169a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169c:	2300      	movs	r3, #0
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016a0:	f107 0320 	add.w	r3, r7, #32
 80016a4:	4619      	mov	r1, r3
 80016a6:	4818      	ldr	r0, [pc, #96]	; (8001708 <MX_TIM3_Init+0x100>)
 80016a8:	f004 fc42 	bl	8005f30 <HAL_TIMEx_MasterConfigSynchronization>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80016b2:	f7ff fb73 	bl	8000d9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016b6:	2360      	movs	r3, #96	; 0x60
 80016b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = PULSE3B;
 80016ba:	232d      	movs	r3, #45	; 0x2d
 80016bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	2200      	movs	r2, #0
 80016ca:	4619      	mov	r1, r3
 80016cc:	480e      	ldr	r0, [pc, #56]	; (8001708 <MX_TIM3_Init+0x100>)
 80016ce:	f003 ff07 	bl	80054e0 <HAL_TIM_PWM_ConfigChannel>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80016d8:	f7ff fb60 	bl	8000d9c <Error_Handler>
  }
  sConfigOC.Pulse = CS3B;
 80016dc:	2332      	movs	r3, #50	; 0x32
 80016de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80016e0:	2302      	movs	r3, #2
 80016e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	2204      	movs	r2, #4
 80016e8:	4619      	mov	r1, r3
 80016ea:	4807      	ldr	r0, [pc, #28]	; (8001708 <MX_TIM3_Init+0x100>)
 80016ec:	f003 fef8 	bl	80054e0 <HAL_TIM_PWM_ConfigChannel>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 80016f6:	f7ff fb51 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016fa:	4803      	ldr	r0, [pc, #12]	; (8001708 <MX_TIM3_Init+0x100>)
 80016fc:	f000 f884 	bl	8001808 <HAL_TIM_MspPostInit>

}
 8001700:	bf00      	nop
 8001702:	3738      	adds	r7, #56	; 0x38
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	2000a334 	.word	0x2000a334
 800170c:	40000400 	.word	0x40000400

08001710 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a35      	ldr	r2, [pc, #212]	; (80017f4 <HAL_TIM_Base_MspInit+0xe4>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d13d      	bne.n	800179e <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	4b34      	ldr	r3, [pc, #208]	; (80017f8 <HAL_TIM_Base_MspInit+0xe8>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	4a33      	ldr	r2, [pc, #204]	; (80017f8 <HAL_TIM_Base_MspInit+0xe8>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6453      	str	r3, [r2, #68]	; 0x44
 8001732:	4b31      	ldr	r3, [pc, #196]	; (80017f8 <HAL_TIM_Base_MspInit+0xe8>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 800173e:	4b2f      	ldr	r3, [pc, #188]	; (80017fc <HAL_TIM_Base_MspInit+0xec>)
 8001740:	4a2f      	ldr	r2, [pc, #188]	; (8001800 <HAL_TIM_Base_MspInit+0xf0>)
 8001742:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001744:	4b2d      	ldr	r3, [pc, #180]	; (80017fc <HAL_TIM_Base_MspInit+0xec>)
 8001746:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800174a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800174c:	4b2b      	ldr	r3, [pc, #172]	; (80017fc <HAL_TIM_Base_MspInit+0xec>)
 800174e:	2240      	movs	r2, #64	; 0x40
 8001750:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001752:	4b2a      	ldr	r3, [pc, #168]	; (80017fc <HAL_TIM_Base_MspInit+0xec>)
 8001754:	2200      	movs	r2, #0
 8001756:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001758:	4b28      	ldr	r3, [pc, #160]	; (80017fc <HAL_TIM_Base_MspInit+0xec>)
 800175a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800175e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001760:	4b26      	ldr	r3, [pc, #152]	; (80017fc <HAL_TIM_Base_MspInit+0xec>)
 8001762:	2200      	movs	r2, #0
 8001764:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001766:	4b25      	ldr	r3, [pc, #148]	; (80017fc <HAL_TIM_Base_MspInit+0xec>)
 8001768:	2200      	movs	r2, #0
 800176a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 800176c:	4b23      	ldr	r3, [pc, #140]	; (80017fc <HAL_TIM_Base_MspInit+0xec>)
 800176e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001772:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001774:	4b21      	ldr	r3, [pc, #132]	; (80017fc <HAL_TIM_Base_MspInit+0xec>)
 8001776:	2200      	movs	r2, #0
 8001778:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800177a:	4b20      	ldr	r3, [pc, #128]	; (80017fc <HAL_TIM_Base_MspInit+0xec>)
 800177c:	2200      	movs	r2, #0
 800177e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001780:	481e      	ldr	r0, [pc, #120]	; (80017fc <HAL_TIM_Base_MspInit+0xec>)
 8001782:	f000 fabf 	bl	8001d04 <HAL_DMA_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 800178c:	f7ff fb06 	bl	8000d9c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a1a      	ldr	r2, [pc, #104]	; (80017fc <HAL_TIM_Base_MspInit+0xec>)
 8001794:	625a      	str	r2, [r3, #36]	; 0x24
 8001796:	4a19      	ldr	r2, [pc, #100]	; (80017fc <HAL_TIM_Base_MspInit+0xec>)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800179c:	e026      	b.n	80017ec <HAL_TIM_Base_MspInit+0xdc>
  else if(tim_baseHandle->Instance==TIM2)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017a6:	d10e      	bne.n	80017c6 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017a8:	2300      	movs	r3, #0
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <HAL_TIM_Base_MspInit+0xe8>)
 80017ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b0:	4a11      	ldr	r2, [pc, #68]	; (80017f8 <HAL_TIM_Base_MspInit+0xe8>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	6413      	str	r3, [r2, #64]	; 0x40
 80017b8:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <HAL_TIM_Base_MspInit+0xe8>)
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	693b      	ldr	r3, [r7, #16]
}
 80017c4:	e012      	b.n	80017ec <HAL_TIM_Base_MspInit+0xdc>
  else if(tim_baseHandle->Instance==TIM3)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a0e      	ldr	r2, [pc, #56]	; (8001804 <HAL_TIM_Base_MspInit+0xf4>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d10d      	bne.n	80017ec <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017d0:	2300      	movs	r3, #0
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <HAL_TIM_Base_MspInit+0xe8>)
 80017d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d8:	4a07      	ldr	r2, [pc, #28]	; (80017f8 <HAL_TIM_Base_MspInit+0xe8>)
 80017da:	f043 0302 	orr.w	r3, r3, #2
 80017de:	6413      	str	r3, [r2, #64]	; 0x40
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <HAL_TIM_Base_MspInit+0xe8>)
 80017e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	68fb      	ldr	r3, [r7, #12]
}
 80017ec:	bf00      	nop
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40010000 	.word	0x40010000
 80017f8:	40023800 	.word	0x40023800
 80017fc:	2000a37c 	.word	0x2000a37c
 8001800:	40026428 	.word	0x40026428
 8001804:	40000400 	.word	0x40000400

08001808 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b088      	sub	sp, #32
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001810:	f107 030c 	add.w	r3, r7, #12
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a12      	ldr	r2, [pc, #72]	; (8001870 <HAL_TIM_MspPostInit+0x68>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d11d      	bne.n	8001866 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	4b11      	ldr	r3, [pc, #68]	; (8001874 <HAL_TIM_MspPostInit+0x6c>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a10      	ldr	r2, [pc, #64]	; (8001874 <HAL_TIM_MspPostInit+0x6c>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <HAL_TIM_MspPostInit+0x6c>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001846:	2380      	movs	r3, #128	; 0x80
 8001848:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184a:	2302      	movs	r3, #2
 800184c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001852:	2303      	movs	r3, #3
 8001854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001856:	2302      	movs	r3, #2
 8001858:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185a:	f107 030c 	add.w	r3, r7, #12
 800185e:	4619      	mov	r1, r3
 8001860:	4805      	ldr	r0, [pc, #20]	; (8001878 <HAL_TIM_MspPostInit+0x70>)
 8001862:	f000 fded 	bl	8002440 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001866:	bf00      	nop
 8001868:	3720      	adds	r7, #32
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40000400 	.word	0x40000400
 8001874:	40023800 	.word	0x40023800
 8001878:	40020000 	.word	0x40020000

0800187c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001880:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <MX_USART2_UART_Init+0x4c>)
 8001882:	4a12      	ldr	r2, [pc, #72]	; (80018cc <MX_USART2_UART_Init+0x50>)
 8001884:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8001886:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <MX_USART2_UART_Init+0x4c>)
 8001888:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800188c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800188e:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <MX_USART2_UART_Init+0x4c>)
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <MX_USART2_UART_Init+0x4c>)
 8001896:	2200      	movs	r2, #0
 8001898:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800189a:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <MX_USART2_UART_Init+0x4c>)
 800189c:	2200      	movs	r2, #0
 800189e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018a0:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <MX_USART2_UART_Init+0x4c>)
 80018a2:	220c      	movs	r2, #12
 80018a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018a6:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <MX_USART2_UART_Init+0x4c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <MX_USART2_UART_Init+0x4c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018b2:	4805      	ldr	r0, [pc, #20]	; (80018c8 <MX_USART2_UART_Init+0x4c>)
 80018b4:	f004 fbfc 	bl	80060b0 <HAL_UART_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018be:	f7ff fa6d 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	2000a3dc 	.word	0x2000a3dc
 80018cc:	40004400 	.word	0x40004400

080018d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08a      	sub	sp, #40	; 0x28
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a19      	ldr	r2, [pc, #100]	; (8001954 <HAL_UART_MspInit+0x84>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d12b      	bne.n	800194a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	4b18      	ldr	r3, [pc, #96]	; (8001958 <HAL_UART_MspInit+0x88>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	4a17      	ldr	r2, [pc, #92]	; (8001958 <HAL_UART_MspInit+0x88>)
 80018fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001900:	6413      	str	r3, [r2, #64]	; 0x40
 8001902:	4b15      	ldr	r3, [pc, #84]	; (8001958 <HAL_UART_MspInit+0x88>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190a:	613b      	str	r3, [r7, #16]
 800190c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	4b11      	ldr	r3, [pc, #68]	; (8001958 <HAL_UART_MspInit+0x88>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	4a10      	ldr	r2, [pc, #64]	; (8001958 <HAL_UART_MspInit+0x88>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6313      	str	r3, [r2, #48]	; 0x30
 800191e:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <HAL_UART_MspInit+0x88>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800192a:	230c      	movs	r3, #12
 800192c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192e:	2302      	movs	r3, #2
 8001930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001936:	2303      	movs	r3, #3
 8001938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800193a:	2307      	movs	r3, #7
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	4619      	mov	r1, r3
 8001944:	4805      	ldr	r0, [pc, #20]	; (800195c <HAL_UART_MspInit+0x8c>)
 8001946:	f000 fd7b 	bl	8002440 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800194a:	bf00      	nop
 800194c:	3728      	adds	r7, #40	; 0x28
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40004400 	.word	0x40004400
 8001958:	40023800 	.word	0x40023800
 800195c:	40020000 	.word	0x40020000

08001960 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001960:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001998 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001964:	480d      	ldr	r0, [pc, #52]	; (800199c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001966:	490e      	ldr	r1, [pc, #56]	; (80019a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001968:	4a0e      	ldr	r2, [pc, #56]	; (80019a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800196a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800196c:	e002      	b.n	8001974 <LoopCopyDataInit>

0800196e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800196e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001972:	3304      	adds	r3, #4

08001974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001978:	d3f9      	bcc.n	800196e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800197a:	4a0b      	ldr	r2, [pc, #44]	; (80019a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800197c:	4c0b      	ldr	r4, [pc, #44]	; (80019ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800197e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001980:	e001      	b.n	8001986 <LoopFillZerobss>

08001982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001984:	3204      	adds	r2, #4

08001986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001988:	d3fb      	bcc.n	8001982 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800198a:	f7ff fd2b 	bl	80013e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800198e:	f008 f9ab 	bl	8009ce8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001992:	f7fe ffd3 	bl	800093c <main>
  bx  lr    
 8001996:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001998:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800199c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019a0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80019a4:	08009e7c 	.word	0x08009e7c
  ldr r2, =_sbss
 80019a8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80019ac:	2000a468 	.word	0x2000a468

080019b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019b0:	e7fe      	b.n	80019b0 <ADC_IRQHandler>
	...

080019b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019b8:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <HAL_Init+0x40>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a0d      	ldr	r2, [pc, #52]	; (80019f4 <HAL_Init+0x40>)
 80019be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019c4:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <HAL_Init+0x40>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a0a      	ldr	r2, [pc, #40]	; (80019f4 <HAL_Init+0x40>)
 80019ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <HAL_Init+0x40>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a07      	ldr	r2, [pc, #28]	; (80019f4 <HAL_Init+0x40>)
 80019d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019dc:	2003      	movs	r0, #3
 80019de:	f000 f94f 	bl	8001c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019e2:	200f      	movs	r0, #15
 80019e4:	f000 f808 	bl	80019f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019e8:	f7ff fc70 	bl	80012cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40023c00 	.word	0x40023c00

080019f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a00:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <HAL_InitTick+0x54>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <HAL_InitTick+0x58>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a16:	4618      	mov	r0, r3
 8001a18:	f000 f967 	bl	8001cea <HAL_SYSTICK_Config>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e00e      	b.n	8001a44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b0f      	cmp	r3, #15
 8001a2a:	d80a      	bhi.n	8001a42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a34:	f000 f92f 	bl	8001c96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a38:	4a06      	ldr	r2, [pc, #24]	; (8001a54 <HAL_InitTick+0x5c>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	e000      	b.n	8001a44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	2000000c 	.word	0x2000000c
 8001a50:	20000014 	.word	0x20000014
 8001a54:	20000010 	.word	0x20000010

08001a58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <HAL_IncTick+0x20>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_IncTick+0x24>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4413      	add	r3, r2
 8001a68:	4a04      	ldr	r2, [pc, #16]	; (8001a7c <HAL_IncTick+0x24>)
 8001a6a:	6013      	str	r3, [r2, #0]
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	20000014 	.word	0x20000014
 8001a7c:	2000a420 	.word	0x2000a420

08001a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return uwTick;
 8001a84:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <HAL_GetTick+0x14>)
 8001a86:	681b      	ldr	r3, [r3, #0]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	2000a420 	.word	0x2000a420

08001a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aa0:	f7ff ffee 	bl	8001a80 <HAL_GetTick>
 8001aa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ab0:	d005      	beq.n	8001abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <HAL_Delay+0x44>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4413      	add	r3, r2
 8001abc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001abe:	bf00      	nop
 8001ac0:	f7ff ffde 	bl	8001a80 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d8f7      	bhi.n	8001ac0 <HAL_Delay+0x28>
  {
  }
}
 8001ad0:	bf00      	nop
 8001ad2:	bf00      	nop
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000014 	.word	0x20000014

08001ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af0:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <__NVIC_SetPriorityGrouping+0x44>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001afc:	4013      	ands	r3, r2
 8001afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b12:	4a04      	ldr	r2, [pc, #16]	; (8001b24 <__NVIC_SetPriorityGrouping+0x44>)
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	60d3      	str	r3, [r2, #12]
}
 8001b18:	bf00      	nop
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b2c:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <__NVIC_GetPriorityGrouping+0x18>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	0a1b      	lsrs	r3, r3, #8
 8001b32:	f003 0307 	and.w	r3, r3, #7
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	db0b      	blt.n	8001b6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	f003 021f 	and.w	r2, r3, #31
 8001b5c:	4907      	ldr	r1, [pc, #28]	; (8001b7c <__NVIC_EnableIRQ+0x38>)
 8001b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b62:	095b      	lsrs	r3, r3, #5
 8001b64:	2001      	movs	r0, #1
 8001b66:	fa00 f202 	lsl.w	r2, r0, r2
 8001b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	e000e100 	.word	0xe000e100

08001b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	6039      	str	r1, [r7, #0]
 8001b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	db0a      	blt.n	8001baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	490c      	ldr	r1, [pc, #48]	; (8001bcc <__NVIC_SetPriority+0x4c>)
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	0112      	lsls	r2, r2, #4
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ba8:	e00a      	b.n	8001bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	4908      	ldr	r1, [pc, #32]	; (8001bd0 <__NVIC_SetPriority+0x50>)
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	3b04      	subs	r3, #4
 8001bb8:	0112      	lsls	r2, r2, #4
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	761a      	strb	r2, [r3, #24]
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	e000e100 	.word	0xe000e100
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b089      	sub	sp, #36	; 0x24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f1c3 0307 	rsb	r3, r3, #7
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	bf28      	it	cs
 8001bf2:	2304      	movcs	r3, #4
 8001bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	2b06      	cmp	r3, #6
 8001bfc:	d902      	bls.n	8001c04 <NVIC_EncodePriority+0x30>
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	3b03      	subs	r3, #3
 8001c02:	e000      	b.n	8001c06 <NVIC_EncodePriority+0x32>
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43da      	mvns	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	401a      	ands	r2, r3
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	fa01 f303 	lsl.w	r3, r1, r3
 8001c26:	43d9      	mvns	r1, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c2c:	4313      	orrs	r3, r2
         );
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3724      	adds	r7, #36	; 0x24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
	...

08001c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c4c:	d301      	bcc.n	8001c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e00f      	b.n	8001c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c52:	4a0a      	ldr	r2, [pc, #40]	; (8001c7c <SysTick_Config+0x40>)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c5a:	210f      	movs	r1, #15
 8001c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c60:	f7ff ff8e 	bl	8001b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c64:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <SysTick_Config+0x40>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c6a:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <SysTick_Config+0x40>)
 8001c6c:	2207      	movs	r2, #7
 8001c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	e000e010 	.word	0xe000e010

08001c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff ff29 	bl	8001ae0 <__NVIC_SetPriorityGrouping>
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b086      	sub	sp, #24
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	607a      	str	r2, [r7, #4]
 8001ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ca8:	f7ff ff3e 	bl	8001b28 <__NVIC_GetPriorityGrouping>
 8001cac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	68b9      	ldr	r1, [r7, #8]
 8001cb2:	6978      	ldr	r0, [r7, #20]
 8001cb4:	f7ff ff8e 	bl	8001bd4 <NVIC_EncodePriority>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ff5d 	bl	8001b80 <__NVIC_SetPriority>
}
 8001cc6:	bf00      	nop
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff ff31 	bl	8001b44 <__NVIC_EnableIRQ>
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff ffa2 	bl	8001c3c <SysTick_Config>
 8001cf8:	4603      	mov	r3, r0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d10:	f7ff feb6 	bl	8001a80 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d101      	bne.n	8001d20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e099      	b.n	8001e54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2202      	movs	r2, #2
 8001d24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f022 0201 	bic.w	r2, r2, #1
 8001d3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d40:	e00f      	b.n	8001d62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d42:	f7ff fe9d 	bl	8001a80 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b05      	cmp	r3, #5
 8001d4e:	d908      	bls.n	8001d62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2220      	movs	r2, #32
 8001d54:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2203      	movs	r2, #3
 8001d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e078      	b.n	8001e54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1e8      	bne.n	8001d42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	4b38      	ldr	r3, [pc, #224]	; (8001e5c <HAL_DMA_Init+0x158>)
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001da6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db8:	2b04      	cmp	r3, #4
 8001dba:	d107      	bne.n	8001dcc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	697a      	ldr	r2, [r7, #20]
 8001dd2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f023 0307 	bic.w	r3, r3, #7
 8001de2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d117      	bne.n	8001e26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d00e      	beq.n	8001e26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 fa9d 	bl	8002348 <DMA_CheckFifoParam>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d008      	beq.n	8001e26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2240      	movs	r2, #64	; 0x40
 8001e18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e22:	2301      	movs	r3, #1
 8001e24:	e016      	b.n	8001e54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 fa54 	bl	80022dc <DMA_CalcBaseAndBitshift>
 8001e34:	4603      	mov	r3, r0
 8001e36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3c:	223f      	movs	r2, #63	; 0x3f
 8001e3e:	409a      	lsls	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	f010803f 	.word	0xf010803f

08001e60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
 8001e6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d101      	bne.n	8001e86 <HAL_DMA_Start_IT+0x26>
 8001e82:	2302      	movs	r3, #2
 8001e84:	e040      	b.n	8001f08 <HAL_DMA_Start_IT+0xa8>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d12f      	bne.n	8001efa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	68b9      	ldr	r1, [r7, #8]
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f000 f9e6 	bl	8002280 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb8:	223f      	movs	r2, #63	; 0x3f
 8001eba:	409a      	lsls	r2, r3
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f042 0216 	orr.w	r2, r2, #22
 8001ece:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d007      	beq.n	8001ee8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0208 	orr.w	r2, r2, #8
 8001ee6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f042 0201 	orr.w	r2, r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	e005      	b.n	8001f06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f02:	2302      	movs	r3, #2
 8001f04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d004      	beq.n	8001f2e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2280      	movs	r2, #128	; 0x80
 8001f28:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e00c      	b.n	8001f48 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2205      	movs	r2, #5
 8001f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 0201 	bic.w	r2, r2, #1
 8001f44:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f60:	4b8e      	ldr	r3, [pc, #568]	; (800219c <HAL_DMA_IRQHandler+0x248>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a8e      	ldr	r2, [pc, #568]	; (80021a0 <HAL_DMA_IRQHandler+0x24c>)
 8001f66:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6a:	0a9b      	lsrs	r3, r3, #10
 8001f6c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f72:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f7e:	2208      	movs	r2, #8
 8001f80:	409a      	lsls	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	4013      	ands	r3, r2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d01a      	beq.n	8001fc0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d013      	beq.n	8001fc0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0204 	bic.w	r2, r2, #4
 8001fa6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fac:	2208      	movs	r2, #8
 8001fae:	409a      	lsls	r2, r3
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb8:	f043 0201 	orr.w	r2, r3, #1
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	409a      	lsls	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d012      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00b      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	409a      	lsls	r2, r3
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fee:	f043 0202 	orr.w	r2, r3, #2
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffa:	2204      	movs	r2, #4
 8001ffc:	409a      	lsls	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	4013      	ands	r3, r2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d012      	beq.n	800202c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00b      	beq.n	800202c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002018:	2204      	movs	r2, #4
 800201a:	409a      	lsls	r2, r3
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002024:	f043 0204 	orr.w	r2, r3, #4
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002030:	2210      	movs	r2, #16
 8002032:	409a      	lsls	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4013      	ands	r3, r2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d043      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	2b00      	cmp	r3, #0
 8002048:	d03c      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204e:	2210      	movs	r2, #16
 8002050:	409a      	lsls	r2, r3
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d018      	beq.n	8002096 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d108      	bne.n	8002084 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	2b00      	cmp	r3, #0
 8002078:	d024      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	4798      	blx	r3
 8002082:	e01f      	b.n	80020c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002088:	2b00      	cmp	r3, #0
 800208a:	d01b      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	4798      	blx	r3
 8002094:	e016      	b.n	80020c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d107      	bne.n	80020b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 0208 	bic.w	r2, r2, #8
 80020b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c8:	2220      	movs	r2, #32
 80020ca:	409a      	lsls	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 808f 	beq.w	80021f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0310 	and.w	r3, r3, #16
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 8087 	beq.w	80021f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ea:	2220      	movs	r2, #32
 80020ec:	409a      	lsls	r2, r3
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b05      	cmp	r3, #5
 80020fc:	d136      	bne.n	800216c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0216 	bic.w	r2, r2, #22
 800210c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	695a      	ldr	r2, [r3, #20]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800211c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	2b00      	cmp	r3, #0
 8002124:	d103      	bne.n	800212e <HAL_DMA_IRQHandler+0x1da>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800212a:	2b00      	cmp	r3, #0
 800212c:	d007      	beq.n	800213e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0208 	bic.w	r2, r2, #8
 800213c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002142:	223f      	movs	r2, #63	; 0x3f
 8002144:	409a      	lsls	r2, r3
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800215e:	2b00      	cmp	r3, #0
 8002160:	d07e      	beq.n	8002260 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	4798      	blx	r3
        }
        return;
 800216a:	e079      	b.n	8002260 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d01d      	beq.n	80021b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10d      	bne.n	80021a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218c:	2b00      	cmp	r3, #0
 800218e:	d031      	beq.n	80021f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	4798      	blx	r3
 8002198:	e02c      	b.n	80021f4 <HAL_DMA_IRQHandler+0x2a0>
 800219a:	bf00      	nop
 800219c:	2000000c 	.word	0x2000000c
 80021a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d023      	beq.n	80021f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	4798      	blx	r3
 80021b4:	e01e      	b.n	80021f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d10f      	bne.n	80021e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 0210 	bic.w	r2, r2, #16
 80021d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d032      	beq.n	8002262 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b00      	cmp	r3, #0
 8002206:	d022      	beq.n	800224e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2205      	movs	r2, #5
 800220c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 0201 	bic.w	r2, r2, #1
 800221e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	3301      	adds	r3, #1
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	429a      	cmp	r2, r3
 800222a:	d307      	bcc.n	800223c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1f2      	bne.n	8002220 <HAL_DMA_IRQHandler+0x2cc>
 800223a:	e000      	b.n	800223e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800223c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002252:	2b00      	cmp	r3, #0
 8002254:	d005      	beq.n	8002262 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	4798      	blx	r3
 800225e:	e000      	b.n	8002262 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002260:	bf00      	nop
    }
  }
}
 8002262:	3718      	adds	r7, #24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002274:	4618      	mov	r0, r3
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
 800228c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800229c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	2b40      	cmp	r3, #64	; 0x40
 80022ac:	d108      	bne.n	80022c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022be:	e007      	b.n	80022d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	60da      	str	r2, [r3, #12]
}
 80022d0:	bf00      	nop
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	3b10      	subs	r3, #16
 80022ec:	4a14      	ldr	r2, [pc, #80]	; (8002340 <DMA_CalcBaseAndBitshift+0x64>)
 80022ee:	fba2 2303 	umull	r2, r3, r2, r3
 80022f2:	091b      	lsrs	r3, r3, #4
 80022f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022f6:	4a13      	ldr	r2, [pc, #76]	; (8002344 <DMA_CalcBaseAndBitshift+0x68>)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4413      	add	r3, r2
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	461a      	mov	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2b03      	cmp	r3, #3
 8002308:	d909      	bls.n	800231e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002312:	f023 0303 	bic.w	r3, r3, #3
 8002316:	1d1a      	adds	r2, r3, #4
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	659a      	str	r2, [r3, #88]	; 0x58
 800231c:	e007      	b.n	800232e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002326:	f023 0303 	bic.w	r3, r3, #3
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002332:	4618      	mov	r0, r3
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	aaaaaaab 	.word	0xaaaaaaab
 8002344:	08009dd0 	.word	0x08009dd0

08002348 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002350:	2300      	movs	r3, #0
 8002352:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002358:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d11f      	bne.n	80023a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2b03      	cmp	r3, #3
 8002366:	d856      	bhi.n	8002416 <DMA_CheckFifoParam+0xce>
 8002368:	a201      	add	r2, pc, #4	; (adr r2, 8002370 <DMA_CheckFifoParam+0x28>)
 800236a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800236e:	bf00      	nop
 8002370:	08002381 	.word	0x08002381
 8002374:	08002393 	.word	0x08002393
 8002378:	08002381 	.word	0x08002381
 800237c:	08002417 	.word	0x08002417
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002384:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d046      	beq.n	800241a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002390:	e043      	b.n	800241a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002396:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800239a:	d140      	bne.n	800241e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023a0:	e03d      	b.n	800241e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023aa:	d121      	bne.n	80023f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	2b03      	cmp	r3, #3
 80023b0:	d837      	bhi.n	8002422 <DMA_CheckFifoParam+0xda>
 80023b2:	a201      	add	r2, pc, #4	; (adr r2, 80023b8 <DMA_CheckFifoParam+0x70>)
 80023b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b8:	080023c9 	.word	0x080023c9
 80023bc:	080023cf 	.word	0x080023cf
 80023c0:	080023c9 	.word	0x080023c9
 80023c4:	080023e1 	.word	0x080023e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	73fb      	strb	r3, [r7, #15]
      break;
 80023cc:	e030      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d025      	beq.n	8002426 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023de:	e022      	b.n	8002426 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023e8:	d11f      	bne.n	800242a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023ee:	e01c      	b.n	800242a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d903      	bls.n	80023fe <DMA_CheckFifoParam+0xb6>
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2b03      	cmp	r3, #3
 80023fa:	d003      	beq.n	8002404 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023fc:	e018      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	73fb      	strb	r3, [r7, #15]
      break;
 8002402:	e015      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002408:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00e      	beq.n	800242e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	73fb      	strb	r3, [r7, #15]
      break;
 8002414:	e00b      	b.n	800242e <DMA_CheckFifoParam+0xe6>
      break;
 8002416:	bf00      	nop
 8002418:	e00a      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
      break;
 800241a:	bf00      	nop
 800241c:	e008      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
      break;
 800241e:	bf00      	nop
 8002420:	e006      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
      break;
 8002422:	bf00      	nop
 8002424:	e004      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
      break;
 8002426:	bf00      	nop
 8002428:	e002      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
      break;   
 800242a:	bf00      	nop
 800242c:	e000      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
      break;
 800242e:	bf00      	nop
    }
  } 
  
  return status; 
 8002430:	7bfb      	ldrb	r3, [r7, #15]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop

08002440 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002440:	b480      	push	{r7}
 8002442:	b089      	sub	sp, #36	; 0x24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800244e:	2300      	movs	r3, #0
 8002450:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002452:	2300      	movs	r3, #0
 8002454:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002456:	2300      	movs	r3, #0
 8002458:	61fb      	str	r3, [r7, #28]
 800245a:	e159      	b.n	8002710 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800245c:	2201      	movs	r2, #1
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	4013      	ands	r3, r2
 800246e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	429a      	cmp	r2, r3
 8002476:	f040 8148 	bne.w	800270a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	2b01      	cmp	r3, #1
 8002484:	d005      	beq.n	8002492 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800248e:	2b02      	cmp	r3, #2
 8002490:	d130      	bne.n	80024f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	2203      	movs	r2, #3
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43db      	mvns	r3, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4013      	ands	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	68da      	ldr	r2, [r3, #12]
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024c8:	2201      	movs	r2, #1
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	091b      	lsrs	r3, r3, #4
 80024de:	f003 0201 	and.w	r2, r3, #1
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 0303 	and.w	r3, r3, #3
 80024fc:	2b03      	cmp	r3, #3
 80024fe:	d017      	beq.n	8002530 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	2203      	movs	r2, #3
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f003 0303 	and.w	r3, r3, #3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d123      	bne.n	8002584 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	08da      	lsrs	r2, r3, #3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3208      	adds	r2, #8
 8002544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002548:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	f003 0307 	and.w	r3, r3, #7
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	220f      	movs	r2, #15
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	691a      	ldr	r2, [r3, #16]
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	08da      	lsrs	r2, r3, #3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	3208      	adds	r2, #8
 800257e:	69b9      	ldr	r1, [r7, #24]
 8002580:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	2203      	movs	r2, #3
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4013      	ands	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 0203 	and.w	r2, r3, #3
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 80a2 	beq.w	800270a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	4b57      	ldr	r3, [pc, #348]	; (8002728 <HAL_GPIO_Init+0x2e8>)
 80025cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ce:	4a56      	ldr	r2, [pc, #344]	; (8002728 <HAL_GPIO_Init+0x2e8>)
 80025d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025d4:	6453      	str	r3, [r2, #68]	; 0x44
 80025d6:	4b54      	ldr	r3, [pc, #336]	; (8002728 <HAL_GPIO_Init+0x2e8>)
 80025d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025e2:	4a52      	ldr	r2, [pc, #328]	; (800272c <HAL_GPIO_Init+0x2ec>)
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	089b      	lsrs	r3, r3, #2
 80025e8:	3302      	adds	r3, #2
 80025ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	220f      	movs	r2, #15
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	43db      	mvns	r3, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4013      	ands	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a49      	ldr	r2, [pc, #292]	; (8002730 <HAL_GPIO_Init+0x2f0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d019      	beq.n	8002642 <HAL_GPIO_Init+0x202>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a48      	ldr	r2, [pc, #288]	; (8002734 <HAL_GPIO_Init+0x2f4>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d013      	beq.n	800263e <HAL_GPIO_Init+0x1fe>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a47      	ldr	r2, [pc, #284]	; (8002738 <HAL_GPIO_Init+0x2f8>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d00d      	beq.n	800263a <HAL_GPIO_Init+0x1fa>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a46      	ldr	r2, [pc, #280]	; (800273c <HAL_GPIO_Init+0x2fc>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d007      	beq.n	8002636 <HAL_GPIO_Init+0x1f6>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a45      	ldr	r2, [pc, #276]	; (8002740 <HAL_GPIO_Init+0x300>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d101      	bne.n	8002632 <HAL_GPIO_Init+0x1f2>
 800262e:	2304      	movs	r3, #4
 8002630:	e008      	b.n	8002644 <HAL_GPIO_Init+0x204>
 8002632:	2307      	movs	r3, #7
 8002634:	e006      	b.n	8002644 <HAL_GPIO_Init+0x204>
 8002636:	2303      	movs	r3, #3
 8002638:	e004      	b.n	8002644 <HAL_GPIO_Init+0x204>
 800263a:	2302      	movs	r3, #2
 800263c:	e002      	b.n	8002644 <HAL_GPIO_Init+0x204>
 800263e:	2301      	movs	r3, #1
 8002640:	e000      	b.n	8002644 <HAL_GPIO_Init+0x204>
 8002642:	2300      	movs	r3, #0
 8002644:	69fa      	ldr	r2, [r7, #28]
 8002646:	f002 0203 	and.w	r2, r2, #3
 800264a:	0092      	lsls	r2, r2, #2
 800264c:	4093      	lsls	r3, r2
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4313      	orrs	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002654:	4935      	ldr	r1, [pc, #212]	; (800272c <HAL_GPIO_Init+0x2ec>)
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	089b      	lsrs	r3, r3, #2
 800265a:	3302      	adds	r3, #2
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002662:	4b38      	ldr	r3, [pc, #224]	; (8002744 <HAL_GPIO_Init+0x304>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	43db      	mvns	r3, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4013      	ands	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	4313      	orrs	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002686:	4a2f      	ldr	r2, [pc, #188]	; (8002744 <HAL_GPIO_Init+0x304>)
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800268c:	4b2d      	ldr	r3, [pc, #180]	; (8002744 <HAL_GPIO_Init+0x304>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	43db      	mvns	r3, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4013      	ands	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026b0:	4a24      	ldr	r2, [pc, #144]	; (8002744 <HAL_GPIO_Init+0x304>)
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026b6:	4b23      	ldr	r3, [pc, #140]	; (8002744 <HAL_GPIO_Init+0x304>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	43db      	mvns	r3, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4013      	ands	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026da:	4a1a      	ldr	r2, [pc, #104]	; (8002744 <HAL_GPIO_Init+0x304>)
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026e0:	4b18      	ldr	r3, [pc, #96]	; (8002744 <HAL_GPIO_Init+0x304>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	43db      	mvns	r3, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4313      	orrs	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002704:	4a0f      	ldr	r2, [pc, #60]	; (8002744 <HAL_GPIO_Init+0x304>)
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	3301      	adds	r3, #1
 800270e:	61fb      	str	r3, [r7, #28]
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	2b0f      	cmp	r3, #15
 8002714:	f67f aea2 	bls.w	800245c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002718:	bf00      	nop
 800271a:	bf00      	nop
 800271c:	3724      	adds	r7, #36	; 0x24
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	40023800 	.word	0x40023800
 800272c:	40013800 	.word	0x40013800
 8002730:	40020000 	.word	0x40020000
 8002734:	40020400 	.word	0x40020400
 8002738:	40020800 	.word	0x40020800
 800273c:	40020c00 	.word	0x40020c00
 8002740:	40021000 	.word	0x40021000
 8002744:	40013c00 	.word	0x40013c00

08002748 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	460b      	mov	r3, r1
 8002752:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	691a      	ldr	r2, [r3, #16]
 8002758:	887b      	ldrh	r3, [r7, #2]
 800275a:	4013      	ands	r3, r2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d002      	beq.n	8002766 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002760:	2301      	movs	r3, #1
 8002762:	73fb      	strb	r3, [r7, #15]
 8002764:	e001      	b.n	800276a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002766:	2300      	movs	r3, #0
 8002768:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800276a:	7bfb      	ldrb	r3, [r7, #15]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	460b      	mov	r3, r1
 8002782:	807b      	strh	r3, [r7, #2]
 8002784:	4613      	mov	r3, r2
 8002786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002788:	787b      	ldrb	r3, [r7, #1]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800278e:	887a      	ldrh	r2, [r7, #2]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002794:	e003      	b.n	800279e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002796:	887b      	ldrh	r3, [r7, #2]
 8002798:	041a      	lsls	r2, r3, #16
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	619a      	str	r2, [r3, #24]
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
	...

080027ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80027b6:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027b8:	695a      	ldr	r2, [r3, #20]
 80027ba:	88fb      	ldrh	r3, [r7, #6]
 80027bc:	4013      	ands	r3, r2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d006      	beq.n	80027d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027c2:	4a05      	ldr	r2, [pc, #20]	; (80027d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027c4:	88fb      	ldrh	r3, [r7, #6]
 80027c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027c8:	88fb      	ldrh	r3, [r7, #6]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fe fac8 	bl	8000d60 <HAL_GPIO_EXTI_Callback>
  }
}
 80027d0:	bf00      	nop
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40013c00 	.word	0x40013c00

080027dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e267      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d075      	beq.n	80028e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027fa:	4b88      	ldr	r3, [pc, #544]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 030c 	and.w	r3, r3, #12
 8002802:	2b04      	cmp	r3, #4
 8002804:	d00c      	beq.n	8002820 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002806:	4b85      	ldr	r3, [pc, #532]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800280e:	2b08      	cmp	r3, #8
 8002810:	d112      	bne.n	8002838 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002812:	4b82      	ldr	r3, [pc, #520]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800281a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800281e:	d10b      	bne.n	8002838 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002820:	4b7e      	ldr	r3, [pc, #504]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d05b      	beq.n	80028e4 <HAL_RCC_OscConfig+0x108>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d157      	bne.n	80028e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e242      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002840:	d106      	bne.n	8002850 <HAL_RCC_OscConfig+0x74>
 8002842:	4b76      	ldr	r3, [pc, #472]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a75      	ldr	r2, [pc, #468]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 8002848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	e01d      	b.n	800288c <HAL_RCC_OscConfig+0xb0>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002858:	d10c      	bne.n	8002874 <HAL_RCC_OscConfig+0x98>
 800285a:	4b70      	ldr	r3, [pc, #448]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a6f      	ldr	r2, [pc, #444]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 8002860:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	4b6d      	ldr	r3, [pc, #436]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a6c      	ldr	r2, [pc, #432]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 800286c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	e00b      	b.n	800288c <HAL_RCC_OscConfig+0xb0>
 8002874:	4b69      	ldr	r3, [pc, #420]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a68      	ldr	r2, [pc, #416]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 800287a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800287e:	6013      	str	r3, [r2, #0]
 8002880:	4b66      	ldr	r3, [pc, #408]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a65      	ldr	r2, [pc, #404]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 8002886:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800288a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d013      	beq.n	80028bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002894:	f7ff f8f4 	bl	8001a80 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800289c:	f7ff f8f0 	bl	8001a80 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b64      	cmp	r3, #100	; 0x64
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e207      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ae:	4b5b      	ldr	r3, [pc, #364]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0f0      	beq.n	800289c <HAL_RCC_OscConfig+0xc0>
 80028ba:	e014      	b.n	80028e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028bc:	f7ff f8e0 	bl	8001a80 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028c4:	f7ff f8dc 	bl	8001a80 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b64      	cmp	r3, #100	; 0x64
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e1f3      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028d6:	4b51      	ldr	r3, [pc, #324]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0xe8>
 80028e2:	e000      	b.n	80028e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d063      	beq.n	80029ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028f2:	4b4a      	ldr	r3, [pc, #296]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 030c 	and.w	r3, r3, #12
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00b      	beq.n	8002916 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028fe:	4b47      	ldr	r3, [pc, #284]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002906:	2b08      	cmp	r3, #8
 8002908:	d11c      	bne.n	8002944 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800290a:	4b44      	ldr	r3, [pc, #272]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d116      	bne.n	8002944 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002916:	4b41      	ldr	r3, [pc, #260]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d005      	beq.n	800292e <HAL_RCC_OscConfig+0x152>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d001      	beq.n	800292e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e1c7      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800292e:	4b3b      	ldr	r3, [pc, #236]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	4937      	ldr	r1, [pc, #220]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 800293e:	4313      	orrs	r3, r2
 8002940:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002942:	e03a      	b.n	80029ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d020      	beq.n	800298e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800294c:	4b34      	ldr	r3, [pc, #208]	; (8002a20 <HAL_RCC_OscConfig+0x244>)
 800294e:	2201      	movs	r2, #1
 8002950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002952:	f7ff f895 	bl	8001a80 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800295a:	f7ff f891 	bl	8001a80 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e1a8      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800296c:	4b2b      	ldr	r3, [pc, #172]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0f0      	beq.n	800295a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002978:	4b28      	ldr	r3, [pc, #160]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	4925      	ldr	r1, [pc, #148]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 8002988:	4313      	orrs	r3, r2
 800298a:	600b      	str	r3, [r1, #0]
 800298c:	e015      	b.n	80029ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800298e:	4b24      	ldr	r3, [pc, #144]	; (8002a20 <HAL_RCC_OscConfig+0x244>)
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002994:	f7ff f874 	bl	8001a80 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800299c:	f7ff f870 	bl	8001a80 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e187      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ae:	4b1b      	ldr	r3, [pc, #108]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f0      	bne.n	800299c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d036      	beq.n	8002a34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d016      	beq.n	80029fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ce:	4b15      	ldr	r3, [pc, #84]	; (8002a24 <HAL_RCC_OscConfig+0x248>)
 80029d0:	2201      	movs	r2, #1
 80029d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d4:	f7ff f854 	bl	8001a80 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029dc:	f7ff f850 	bl	8001a80 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e167      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ee:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <HAL_RCC_OscConfig+0x240>)
 80029f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0f0      	beq.n	80029dc <HAL_RCC_OscConfig+0x200>
 80029fa:	e01b      	b.n	8002a34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029fc:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <HAL_RCC_OscConfig+0x248>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a02:	f7ff f83d 	bl	8001a80 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a08:	e00e      	b.n	8002a28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a0a:	f7ff f839 	bl	8001a80 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d907      	bls.n	8002a28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e150      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	42470000 	.word	0x42470000
 8002a24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a28:	4b88      	ldr	r3, [pc, #544]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002a2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1ea      	bne.n	8002a0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 8097 	beq.w	8002b70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a42:	2300      	movs	r3, #0
 8002a44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a46:	4b81      	ldr	r3, [pc, #516]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10f      	bne.n	8002a72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	60bb      	str	r3, [r7, #8]
 8002a56:	4b7d      	ldr	r3, [pc, #500]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	4a7c      	ldr	r2, [pc, #496]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a60:	6413      	str	r3, [r2, #64]	; 0x40
 8002a62:	4b7a      	ldr	r3, [pc, #488]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6a:	60bb      	str	r3, [r7, #8]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a72:	4b77      	ldr	r3, [pc, #476]	; (8002c50 <HAL_RCC_OscConfig+0x474>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d118      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a7e:	4b74      	ldr	r3, [pc, #464]	; (8002c50 <HAL_RCC_OscConfig+0x474>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a73      	ldr	r2, [pc, #460]	; (8002c50 <HAL_RCC_OscConfig+0x474>)
 8002a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a8a:	f7fe fff9 	bl	8001a80 <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a92:	f7fe fff5 	bl	8001a80 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e10c      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa4:	4b6a      	ldr	r3, [pc, #424]	; (8002c50 <HAL_RCC_OscConfig+0x474>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0f0      	beq.n	8002a92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d106      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x2ea>
 8002ab8:	4b64      	ldr	r3, [pc, #400]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002abc:	4a63      	ldr	r2, [pc, #396]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ac4:	e01c      	b.n	8002b00 <HAL_RCC_OscConfig+0x324>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	2b05      	cmp	r3, #5
 8002acc:	d10c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x30c>
 8002ace:	4b5f      	ldr	r3, [pc, #380]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad2:	4a5e      	ldr	r2, [pc, #376]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002ad4:	f043 0304 	orr.w	r3, r3, #4
 8002ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8002ada:	4b5c      	ldr	r3, [pc, #368]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ade:	4a5b      	ldr	r2, [pc, #364]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae6:	e00b      	b.n	8002b00 <HAL_RCC_OscConfig+0x324>
 8002ae8:	4b58      	ldr	r3, [pc, #352]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aec:	4a57      	ldr	r2, [pc, #348]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002aee:	f023 0301 	bic.w	r3, r3, #1
 8002af2:	6713      	str	r3, [r2, #112]	; 0x70
 8002af4:	4b55      	ldr	r3, [pc, #340]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af8:	4a54      	ldr	r2, [pc, #336]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002afa:	f023 0304 	bic.w	r3, r3, #4
 8002afe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d015      	beq.n	8002b34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b08:	f7fe ffba 	bl	8001a80 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b0e:	e00a      	b.n	8002b26 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b10:	f7fe ffb6 	bl	8001a80 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e0cb      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b26:	4b49      	ldr	r3, [pc, #292]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0ee      	beq.n	8002b10 <HAL_RCC_OscConfig+0x334>
 8002b32:	e014      	b.n	8002b5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b34:	f7fe ffa4 	bl	8001a80 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b3a:	e00a      	b.n	8002b52 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b3c:	f7fe ffa0 	bl	8001a80 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e0b5      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b52:	4b3e      	ldr	r3, [pc, #248]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1ee      	bne.n	8002b3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b5e:	7dfb      	ldrb	r3, [r7, #23]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d105      	bne.n	8002b70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b64:	4b39      	ldr	r3, [pc, #228]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	4a38      	ldr	r2, [pc, #224]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002b6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 80a1 	beq.w	8002cbc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b7a:	4b34      	ldr	r3, [pc, #208]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 030c 	and.w	r3, r3, #12
 8002b82:	2b08      	cmp	r3, #8
 8002b84:	d05c      	beq.n	8002c40 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d141      	bne.n	8002c12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b8e:	4b31      	ldr	r3, [pc, #196]	; (8002c54 <HAL_RCC_OscConfig+0x478>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b94:	f7fe ff74 	bl	8001a80 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b9c:	f7fe ff70 	bl	8001a80 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e087      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bae:	4b27      	ldr	r3, [pc, #156]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f0      	bne.n	8002b9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69da      	ldr	r2, [r3, #28]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	019b      	lsls	r3, r3, #6
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd0:	085b      	lsrs	r3, r3, #1
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	041b      	lsls	r3, r3, #16
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bdc:	061b      	lsls	r3, r3, #24
 8002bde:	491b      	ldr	r1, [pc, #108]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002be4:	4b1b      	ldr	r3, [pc, #108]	; (8002c54 <HAL_RCC_OscConfig+0x478>)
 8002be6:	2201      	movs	r2, #1
 8002be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bea:	f7fe ff49 	bl	8001a80 <HAL_GetTick>
 8002bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf0:	e008      	b.n	8002c04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bf2:	f7fe ff45 	bl	8001a80 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e05c      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c04:	4b11      	ldr	r3, [pc, #68]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d0f0      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x416>
 8002c10:	e054      	b.n	8002cbc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c12:	4b10      	ldr	r3, [pc, #64]	; (8002c54 <HAL_RCC_OscConfig+0x478>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c18:	f7fe ff32 	bl	8001a80 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c20:	f7fe ff2e 	bl	8001a80 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e045      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c32:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1f0      	bne.n	8002c20 <HAL_RCC_OscConfig+0x444>
 8002c3e:	e03d      	b.n	8002cbc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d107      	bne.n	8002c58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e038      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	40007000 	.word	0x40007000
 8002c54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c58:	4b1b      	ldr	r3, [pc, #108]	; (8002cc8 <HAL_RCC_OscConfig+0x4ec>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d028      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d121      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d11a      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c88:	4013      	ands	r3, r2
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d111      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9e:	085b      	lsrs	r3, r3, #1
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d107      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d001      	beq.n	8002cbc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e000      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3718      	adds	r7, #24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40023800 	.word	0x40023800

08002ccc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e0cc      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ce0:	4b68      	ldr	r3, [pc, #416]	; (8002e84 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d90c      	bls.n	8002d08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cee:	4b65      	ldr	r3, [pc, #404]	; (8002e84 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf6:	4b63      	ldr	r3, [pc, #396]	; (8002e84 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d001      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e0b8      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d020      	beq.n	8002d56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d005      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d20:	4b59      	ldr	r3, [pc, #356]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	4a58      	ldr	r2, [pc, #352]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0308 	and.w	r3, r3, #8
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d005      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d38:	4b53      	ldr	r3, [pc, #332]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	4a52      	ldr	r2, [pc, #328]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d44:	4b50      	ldr	r3, [pc, #320]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	494d      	ldr	r1, [pc, #308]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d044      	beq.n	8002dec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d107      	bne.n	8002d7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6a:	4b47      	ldr	r3, [pc, #284]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d119      	bne.n	8002daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e07f      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d003      	beq.n	8002d8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d86:	2b03      	cmp	r3, #3
 8002d88:	d107      	bne.n	8002d9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d8a:	4b3f      	ldr	r3, [pc, #252]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d109      	bne.n	8002daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e06f      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d9a:	4b3b      	ldr	r3, [pc, #236]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e067      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002daa:	4b37      	ldr	r3, [pc, #220]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f023 0203 	bic.w	r2, r3, #3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	4934      	ldr	r1, [pc, #208]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dbc:	f7fe fe60 	bl	8001a80 <HAL_GetTick>
 8002dc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc2:	e00a      	b.n	8002dda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc4:	f7fe fe5c 	bl	8001a80 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e04f      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dda:	4b2b      	ldr	r3, [pc, #172]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 020c 	and.w	r2, r3, #12
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d1eb      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dec:	4b25      	ldr	r3, [pc, #148]	; (8002e84 <HAL_RCC_ClockConfig+0x1b8>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d20c      	bcs.n	8002e14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dfa:	4b22      	ldr	r3, [pc, #136]	; (8002e84 <HAL_RCC_ClockConfig+0x1b8>)
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e02:	4b20      	ldr	r3, [pc, #128]	; (8002e84 <HAL_RCC_ClockConfig+0x1b8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d001      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e032      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d008      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e20:	4b19      	ldr	r3, [pc, #100]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	4916      	ldr	r1, [pc, #88]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0308 	and.w	r3, r3, #8
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d009      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e3e:	4b12      	ldr	r3, [pc, #72]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	490e      	ldr	r1, [pc, #56]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e52:	f000 f821 	bl	8002e98 <HAL_RCC_GetSysClockFreq>
 8002e56:	4602      	mov	r2, r0
 8002e58:	4b0b      	ldr	r3, [pc, #44]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	091b      	lsrs	r3, r3, #4
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	490a      	ldr	r1, [pc, #40]	; (8002e8c <HAL_RCC_ClockConfig+0x1c0>)
 8002e64:	5ccb      	ldrb	r3, [r1, r3]
 8002e66:	fa22 f303 	lsr.w	r3, r2, r3
 8002e6a:	4a09      	ldr	r2, [pc, #36]	; (8002e90 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e6e:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <HAL_RCC_ClockConfig+0x1c8>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fe fdc0 	bl	80019f8 <HAL_InitTick>

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40023c00 	.word	0x40023c00
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	08009db8 	.word	0x08009db8
 8002e90:	2000000c 	.word	0x2000000c
 8002e94:	20000010 	.word	0x20000010

08002e98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e9c:	b090      	sub	sp, #64	; 0x40
 8002e9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002eac:	2300      	movs	r3, #0
 8002eae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002eb0:	4b59      	ldr	r3, [pc, #356]	; (8003018 <HAL_RCC_GetSysClockFreq+0x180>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 030c 	and.w	r3, r3, #12
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d00d      	beq.n	8002ed8 <HAL_RCC_GetSysClockFreq+0x40>
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	f200 80a1 	bhi.w	8003004 <HAL_RCC_GetSysClockFreq+0x16c>
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d002      	beq.n	8002ecc <HAL_RCC_GetSysClockFreq+0x34>
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	d003      	beq.n	8002ed2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002eca:	e09b      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ecc:	4b53      	ldr	r3, [pc, #332]	; (800301c <HAL_RCC_GetSysClockFreq+0x184>)
 8002ece:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002ed0:	e09b      	b.n	800300a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ed2:	4b53      	ldr	r3, [pc, #332]	; (8003020 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ed4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ed6:	e098      	b.n	800300a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ed8:	4b4f      	ldr	r3, [pc, #316]	; (8003018 <HAL_RCC_GetSysClockFreq+0x180>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ee0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ee2:	4b4d      	ldr	r3, [pc, #308]	; (8003018 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d028      	beq.n	8002f40 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eee:	4b4a      	ldr	r3, [pc, #296]	; (8003018 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	099b      	lsrs	r3, r3, #6
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	623b      	str	r3, [r7, #32]
 8002ef8:	627a      	str	r2, [r7, #36]	; 0x24
 8002efa:	6a3b      	ldr	r3, [r7, #32]
 8002efc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f00:	2100      	movs	r1, #0
 8002f02:	4b47      	ldr	r3, [pc, #284]	; (8003020 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f04:	fb03 f201 	mul.w	r2, r3, r1
 8002f08:	2300      	movs	r3, #0
 8002f0a:	fb00 f303 	mul.w	r3, r0, r3
 8002f0e:	4413      	add	r3, r2
 8002f10:	4a43      	ldr	r2, [pc, #268]	; (8003020 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f12:	fba0 1202 	umull	r1, r2, r0, r2
 8002f16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f18:	460a      	mov	r2, r1
 8002f1a:	62ba      	str	r2, [r7, #40]	; 0x28
 8002f1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f1e:	4413      	add	r3, r2
 8002f20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f24:	2200      	movs	r2, #0
 8002f26:	61bb      	str	r3, [r7, #24]
 8002f28:	61fa      	str	r2, [r7, #28]
 8002f2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f2e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002f32:	f7fd f951 	bl	80001d8 <__aeabi_uldivmod>
 8002f36:	4602      	mov	r2, r0
 8002f38:	460b      	mov	r3, r1
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f3e:	e053      	b.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f40:	4b35      	ldr	r3, [pc, #212]	; (8003018 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	099b      	lsrs	r3, r3, #6
 8002f46:	2200      	movs	r2, #0
 8002f48:	613b      	str	r3, [r7, #16]
 8002f4a:	617a      	str	r2, [r7, #20]
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002f52:	f04f 0b00 	mov.w	fp, #0
 8002f56:	4652      	mov	r2, sl
 8002f58:	465b      	mov	r3, fp
 8002f5a:	f04f 0000 	mov.w	r0, #0
 8002f5e:	f04f 0100 	mov.w	r1, #0
 8002f62:	0159      	lsls	r1, r3, #5
 8002f64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f68:	0150      	lsls	r0, r2, #5
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	ebb2 080a 	subs.w	r8, r2, sl
 8002f72:	eb63 090b 	sbc.w	r9, r3, fp
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	f04f 0300 	mov.w	r3, #0
 8002f7e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002f82:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002f86:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002f8a:	ebb2 0408 	subs.w	r4, r2, r8
 8002f8e:	eb63 0509 	sbc.w	r5, r3, r9
 8002f92:	f04f 0200 	mov.w	r2, #0
 8002f96:	f04f 0300 	mov.w	r3, #0
 8002f9a:	00eb      	lsls	r3, r5, #3
 8002f9c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fa0:	00e2      	lsls	r2, r4, #3
 8002fa2:	4614      	mov	r4, r2
 8002fa4:	461d      	mov	r5, r3
 8002fa6:	eb14 030a 	adds.w	r3, r4, sl
 8002faa:	603b      	str	r3, [r7, #0]
 8002fac:	eb45 030b 	adc.w	r3, r5, fp
 8002fb0:	607b      	str	r3, [r7, #4]
 8002fb2:	f04f 0200 	mov.w	r2, #0
 8002fb6:	f04f 0300 	mov.w	r3, #0
 8002fba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fbe:	4629      	mov	r1, r5
 8002fc0:	028b      	lsls	r3, r1, #10
 8002fc2:	4621      	mov	r1, r4
 8002fc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fc8:	4621      	mov	r1, r4
 8002fca:	028a      	lsls	r2, r1, #10
 8002fcc:	4610      	mov	r0, r2
 8002fce:	4619      	mov	r1, r3
 8002fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	60fa      	str	r2, [r7, #12]
 8002fd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fdc:	f7fd f8fc 	bl	80001d8 <__aeabi_uldivmod>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fe8:	4b0b      	ldr	r3, [pc, #44]	; (8003018 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	0c1b      	lsrs	r3, r3, #16
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002ff8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003000:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003002:	e002      	b.n	800300a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003004:	4b05      	ldr	r3, [pc, #20]	; (800301c <HAL_RCC_GetSysClockFreq+0x184>)
 8003006:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003008:	bf00      	nop
    }
  }
  return sysclockfreq;
 800300a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800300c:	4618      	mov	r0, r3
 800300e:	3740      	adds	r7, #64	; 0x40
 8003010:	46bd      	mov	sp, r7
 8003012:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003016:	bf00      	nop
 8003018:	40023800 	.word	0x40023800
 800301c:	00f42400 	.word	0x00f42400
 8003020:	017d7840 	.word	0x017d7840

08003024 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003028:	4b03      	ldr	r3, [pc, #12]	; (8003038 <HAL_RCC_GetHCLKFreq+0x14>)
 800302a:	681b      	ldr	r3, [r3, #0]
}
 800302c:	4618      	mov	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	2000000c 	.word	0x2000000c

0800303c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003040:	f7ff fff0 	bl	8003024 <HAL_RCC_GetHCLKFreq>
 8003044:	4602      	mov	r2, r0
 8003046:	4b05      	ldr	r3, [pc, #20]	; (800305c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	0a9b      	lsrs	r3, r3, #10
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	4903      	ldr	r1, [pc, #12]	; (8003060 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003052:	5ccb      	ldrb	r3, [r1, r3]
 8003054:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003058:	4618      	mov	r0, r3
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40023800 	.word	0x40023800
 8003060:	08009dc8 	.word	0x08009dc8

08003064 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003068:	f7ff ffdc 	bl	8003024 <HAL_RCC_GetHCLKFreq>
 800306c:	4602      	mov	r2, r0
 800306e:	4b05      	ldr	r3, [pc, #20]	; (8003084 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	0b5b      	lsrs	r3, r3, #13
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	4903      	ldr	r1, [pc, #12]	; (8003088 <HAL_RCC_GetPCLK2Freq+0x24>)
 800307a:	5ccb      	ldrb	r3, [r1, r3]
 800307c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003080:	4618      	mov	r0, r3
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40023800 	.word	0x40023800
 8003088:	08009dc8 	.word	0x08009dc8

0800308c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e022      	b.n	80030e4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d105      	bne.n	80030b6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7fd ff37 	bl	8000f24 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2203      	movs	r2, #3
 80030ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f814 	bl	80030ec <HAL_SD_InitCard>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e00a      	b.n	80030e4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80030ec:	b5b0      	push	{r4, r5, r7, lr}
 80030ee:	b08e      	sub	sp, #56	; 0x38
 80030f0:	af04      	add	r7, sp, #16
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80030f4:	2300      	movs	r3, #0
 80030f6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80030f8:	2300      	movs	r3, #0
 80030fa:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80030fc:	2300      	movs	r3, #0
 80030fe:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003100:	2300      	movs	r3, #0
 8003102:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003104:	2300      	movs	r3, #0
 8003106:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003108:	2376      	movs	r3, #118	; 0x76
 800310a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681d      	ldr	r5, [r3, #0]
 8003110:	466c      	mov	r4, sp
 8003112:	f107 0314 	add.w	r3, r7, #20
 8003116:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800311a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800311e:	f107 0308 	add.w	r3, r7, #8
 8003122:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003124:	4628      	mov	r0, r5
 8003126:	f003 fb85 	bl	8006834 <SDIO_Init>
 800312a:	4603      	mov	r3, r0
 800312c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003130:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e04f      	b.n	80031dc <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800313c:	4b29      	ldr	r3, [pc, #164]	; (80031e4 <HAL_SD_InitCard+0xf8>)
 800313e:	2200      	movs	r2, #0
 8003140:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f003 fbbd 	bl	80068c6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800314c:	4b25      	ldr	r3, [pc, #148]	; (80031e4 <HAL_SD_InitCard+0xf8>)
 800314e:	2201      	movs	r2, #1
 8003150:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8003152:	2002      	movs	r0, #2
 8003154:	f7fe fca0 	bl	8001a98 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f001 f805 	bl	8004168 <SD_PowerON>
 800315e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00b      	beq.n	800317e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003172:	6a3b      	ldr	r3, [r7, #32]
 8003174:	431a      	orrs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e02e      	b.n	80031dc <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 ff24 	bl	8003fcc <SD_InitCard>
 8003184:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00b      	beq.n	80031a4 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e01b      	b.n	80031dc <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031ac:	4618      	mov	r0, r3
 80031ae:	f003 fc1c 	bl	80069ea <SDMMC_CmdBlockLength>
 80031b2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80031b4:	6a3b      	ldr	r3, [r7, #32]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00f      	beq.n	80031da <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a0a      	ldr	r2, [pc, #40]	; (80031e8 <HAL_SD_InitCard+0xfc>)
 80031c0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	431a      	orrs	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e000      	b.n	80031dc <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3728      	adds	r7, #40	; 0x28
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bdb0      	pop	{r4, r5, r7, pc}
 80031e4:	422580a0 	.word	0x422580a0
 80031e8:	004005ff 	.word	0x004005ff

080031ec <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b08c      	sub	sp, #48	; 0x30
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
 80031f8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d107      	bne.n	8003214 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003208:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e0c0      	b.n	8003396 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b01      	cmp	r3, #1
 800321e:	f040 80b9 	bne.w	8003394 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003228:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	441a      	add	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003232:	429a      	cmp	r2, r3
 8003234:	d907      	bls.n	8003246 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e0a7      	b.n	8003396 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2203      	movs	r2, #3
 800324a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2200      	movs	r2, #0
 8003254:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	6812      	ldr	r2, [r2, #0]
 8003260:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8003264:	f043 0302 	orr.w	r3, r3, #2
 8003268:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	4a4c      	ldr	r2, [pc, #304]	; (80033a0 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8003270:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	4a4b      	ldr	r2, [pc, #300]	; (80033a4 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8003278:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	2200      	movs	r2, #0
 8003280:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	2200      	movs	r2, #0
 8003288:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	3380      	adds	r3, #128	; 0x80
 80032b0:	4619      	mov	r1, r3
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	025b      	lsls	r3, r3, #9
 80032b8:	089b      	lsrs	r3, r3, #2
 80032ba:	f7fe fdd1 	bl	8001e60 <HAL_DMA_Start_IT>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d017      	beq.n	80032f4 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80032d2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a33      	ldr	r2, [pc, #204]	; (80033a8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80032da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e050      	b.n	8003396 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80032f4:	4b2d      	ldr	r3, [pc, #180]	; (80033ac <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80032f6:	2201      	movs	r2, #1
 80032f8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d002      	beq.n	8003308 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8003302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003304:	025b      	lsls	r3, r3, #9
 8003306:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003308:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800330c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	025b      	lsls	r3, r3, #9
 8003312:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003314:	2390      	movs	r3, #144	; 0x90
 8003316:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003318:	2302      	movs	r3, #2
 800331a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800331c:	2300      	movs	r3, #0
 800331e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003320:	2301      	movs	r3, #1
 8003322:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f107 0210 	add.w	r2, r7, #16
 800332c:	4611      	mov	r1, r2
 800332e:	4618      	mov	r0, r3
 8003330:	f003 fb2f 	bl	8006992 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d90a      	bls.n	8003350 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2282      	movs	r2, #130	; 0x82
 800333e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003346:	4618      	mov	r0, r3
 8003348:	f003 fb93 	bl	8006a72 <SDMMC_CmdReadMultiBlock>
 800334c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800334e:	e009      	b.n	8003364 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2281      	movs	r2, #129	; 0x81
 8003354:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800335c:	4618      	mov	r0, r3
 800335e:	f003 fb66 	bl	8006a2e <SDMMC_CmdReadSingleBlock>
 8003362:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003366:	2b00      	cmp	r3, #0
 8003368:	d012      	beq.n	8003390 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a0e      	ldr	r2, [pc, #56]	; (80033a8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003370:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003378:	431a      	orrs	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e002      	b.n	8003396 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8003390:	2300      	movs	r3, #0
 8003392:	e000      	b.n	8003396 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8003394:	2302      	movs	r3, #2
  }
}
 8003396:	4618      	mov	r0, r3
 8003398:	3730      	adds	r7, #48	; 0x30
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	08003ddb 	.word	0x08003ddb
 80033a4:	08003e4d 	.word	0x08003e4d
 80033a8:	004005ff 	.word	0x004005ff
 80033ac:	4225858c 	.word	0x4225858c

080033b0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b08c      	sub	sp, #48	; 0x30
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
 80033bc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d107      	bne.n	80033d8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033cc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e0c5      	b.n	8003564 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	f040 80be 	bne.w	8003562 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80033ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	441a      	add	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d907      	bls.n	800340a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e0ac      	b.n	8003564 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2203      	movs	r2, #3
 800340e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2200      	movs	r2, #0
 8003418:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	6812      	ldr	r2, [r2, #0]
 8003424:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8003428:	f043 0302 	orr.w	r3, r3, #2
 800342c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003432:	4a4e      	ldr	r2, [pc, #312]	; (800356c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8003434:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343a:	4a4d      	ldr	r2, [pc, #308]	; (8003570 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800343c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003442:	2200      	movs	r2, #0
 8003444:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344a:	2b01      	cmp	r3, #1
 800344c:	d002      	beq.n	8003454 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800344e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003450:	025b      	lsls	r3, r3, #9
 8003452:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d90a      	bls.n	8003470 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	22a0      	movs	r2, #160	; 0xa0
 800345e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003466:	4618      	mov	r0, r3
 8003468:	f003 fb47 	bl	8006afa <SDMMC_CmdWriteMultiBlock>
 800346c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800346e:	e009      	b.n	8003484 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2290      	movs	r2, #144	; 0x90
 8003474:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800347c:	4618      	mov	r0, r3
 800347e:	f003 fb1a 	bl	8006ab6 <SDMMC_CmdWriteSingleBlock>
 8003482:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003486:	2b00      	cmp	r3, #0
 8003488:	d012      	beq.n	80034b0 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a39      	ldr	r2, [pc, #228]	; (8003574 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003490:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003498:	431a      	orrs	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e059      	b.n	8003564 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80034b0:	4b31      	ldr	r3, [pc, #196]	; (8003578 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80034b2:	2201      	movs	r2, #1
 80034b4:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ba:	2240      	movs	r2, #64	; 0x40
 80034bc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80034de:	68b9      	ldr	r1, [r7, #8]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	3380      	adds	r3, #128	; 0x80
 80034e6:	461a      	mov	r2, r3
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	025b      	lsls	r3, r3, #9
 80034ec:	089b      	lsrs	r3, r3, #2
 80034ee:	f7fe fcb7 	bl	8001e60 <HAL_DMA_Start_IT>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d01c      	beq.n	8003532 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	6812      	ldr	r2, [r2, #0]
 8003502:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8003506:	f023 0302 	bic.w	r3, r3, #2
 800350a:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a18      	ldr	r2, [pc, #96]	; (8003574 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003512:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003518:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e018      	b.n	8003564 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003532:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003536:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	025b      	lsls	r3, r3, #9
 800353c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800353e:	2390      	movs	r3, #144	; 0x90
 8003540:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003542:	2300      	movs	r3, #0
 8003544:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003546:	2300      	movs	r3, #0
 8003548:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800354a:	2301      	movs	r3, #1
 800354c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f107 0210 	add.w	r2, r7, #16
 8003556:	4611      	mov	r1, r2
 8003558:	4618      	mov	r0, r3
 800355a:	f003 fa1a 	bl	8006992 <SDIO_ConfigData>

      return HAL_OK;
 800355e:	2300      	movs	r3, #0
 8003560:	e000      	b.n	8003564 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8003562:	2302      	movs	r3, #2
  }
}
 8003564:	4618      	mov	r0, r3
 8003566:	3730      	adds	r7, #48	; 0x30
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	08003db1 	.word	0x08003db1
 8003570:	08003e4d 	.word	0x08003e4d
 8003574:	004005ff 	.word	0x004005ff
 8003578:	4225858c 	.word	0x4225858c

0800357c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003588:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003590:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d008      	beq.n	80035aa <HAL_SD_IRQHandler+0x2e>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f003 0308 	and.w	r3, r3, #8
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 ffff 	bl	80045a6 <SD_Read_IT>
 80035a8:	e165      	b.n	8003876 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 808f 	beq.w	80036d8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035c2:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6812      	ldr	r2, [r2, #0]
 80035ce:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80035d2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80035d6:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0201 	bic.w	r2, r2, #1
 80035e6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f003 0308 	and.w	r3, r3, #8
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d039      	beq.n	8003666 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d104      	bne.n	8003606 <HAL_SD_IRQHandler+0x8a>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f003 0320 	and.w	r3, r3, #32
 8003602:	2b00      	cmp	r3, #0
 8003604:	d011      	beq.n	800362a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f003 fa98 	bl	8006b40 <SDMMC_CmdStopTransfer>
 8003610:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d008      	beq.n	800362a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	431a      	orrs	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 f92f 	bl	8003888 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f240 523a 	movw	r2, #1338	; 0x53a
 8003632:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b00      	cmp	r3, #0
 800364a:	d104      	bne.n	8003656 <HAL_SD_IRQHandler+0xda>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d003      	beq.n	800365e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f003 ff06 	bl	8007468 <HAL_SD_RxCpltCallback>
 800365c:	e10b      	b.n	8003876 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f003 fef8 	bl	8007454 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003664:	e107      	b.n	8003876 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 8102 	beq.w	8003876 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f003 0320 	and.w	r3, r3, #32
 8003678:	2b00      	cmp	r3, #0
 800367a:	d011      	beq.n	80036a0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4618      	mov	r0, r3
 8003682:	f003 fa5d 	bl	8006b40 <SDMMC_CmdStopTransfer>
 8003686:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d008      	beq.n	80036a0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	431a      	orrs	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f8f4 	bl	8003888 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f040 80e5 	bne.w	8003876 <HAL_SD_IRQHandler+0x2fa>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f040 80df 	bne.w	8003876 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0208 	bic.w	r2, r2, #8
 80036c6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f003 febf 	bl	8007454 <HAL_SD_TxCpltCallback>
}
 80036d6:	e0ce      	b.n	8003876 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d008      	beq.n	80036f8 <HAL_SD_IRQHandler+0x17c>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f003 0308 	and.w	r3, r3, #8
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d003      	beq.n	80036f8 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 ffa9 	bl	8004648 <SD_Write_IT>
 80036f6:	e0be      	b.n	8003876 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036fe:	f240 233a 	movw	r3, #570	; 0x23a
 8003702:	4013      	ands	r3, r2
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 80b6 	beq.w	8003876 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d005      	beq.n	8003724 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371c:	f043 0202 	orr.w	r2, r3, #2
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800372a:	f003 0308 	and.w	r3, r3, #8
 800372e:	2b00      	cmp	r3, #0
 8003730:	d005      	beq.n	800373e <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003736:	f043 0208 	orr.w	r2, r3, #8
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003744:	f003 0320 	and.w	r3, r3, #32
 8003748:	2b00      	cmp	r3, #0
 800374a:	d005      	beq.n	8003758 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003750:	f043 0220 	orr.w	r2, r3, #32
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800375e:	f003 0310 	and.w	r3, r3, #16
 8003762:	2b00      	cmp	r3, #0
 8003764:	d005      	beq.n	8003772 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376a:	f043 0210 	orr.w	r2, r3, #16
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003778:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800377c:	2b00      	cmp	r3, #0
 800377e:	d005      	beq.n	800378c <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003784:	f043 0208 	orr.w	r2, r3, #8
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f240 723a 	movw	r2, #1850	; 0x73a
 8003794:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6812      	ldr	r2, [r2, #0]
 80037a0:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80037a4:	f023 0302 	bic.w	r3, r3, #2
 80037a8:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f003 f9c6 	bl	8006b40 <SDMMC_CmdStopTransfer>
 80037b4:	4602      	mov	r2, r0
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00a      	beq.n	80037e0 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 f855 	bl	8003888 <HAL_SD_ErrorCallback>
}
 80037de:	e04a      	b.n	8003876 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d045      	beq.n	8003876 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f003 0310 	and.w	r3, r3, #16
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d104      	bne.n	80037fe <HAL_SD_IRQHandler+0x282>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f003 0320 	and.w	r3, r3, #32
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d011      	beq.n	8003822 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003802:	4a1f      	ldr	r2, [pc, #124]	; (8003880 <HAL_SD_IRQHandler+0x304>)
 8003804:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380a:	4618      	mov	r0, r3
 800380c:	f7fe fb80 	bl	8001f10 <HAL_DMA_Abort_IT>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d02f      	beq.n	8003876 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381a:	4618      	mov	r0, r3
 800381c:	f000 fb68 	bl	8003ef0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003820:	e029      	b.n	8003876 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b00      	cmp	r3, #0
 800382a:	d104      	bne.n	8003836 <HAL_SD_IRQHandler+0x2ba>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d011      	beq.n	800385a <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	4a12      	ldr	r2, [pc, #72]	; (8003884 <HAL_SD_IRQHandler+0x308>)
 800383c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	4618      	mov	r0, r3
 8003844:	f7fe fb64 	bl	8001f10 <HAL_DMA_Abort_IT>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d013      	beq.n	8003876 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	4618      	mov	r0, r3
 8003854:	f000 fb83 	bl	8003f5e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003858:	e00d      	b.n	8003876 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f003 fde6 	bl	8007440 <HAL_SD_AbortCallback>
}
 8003874:	e7ff      	b.n	8003876 <HAL_SD_IRQHandler+0x2fa>
 8003876:	bf00      	nop
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	08003ef1 	.word	0x08003ef1
 8003884:	08003f5f 	.word	0x08003f5f

08003888 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038aa:	0f9b      	lsrs	r3, r3, #30
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038b6:	0e9b      	lsrs	r3, r3, #26
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038c8:	0e1b      	lsrs	r3, r3, #24
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	f003 0303 	and.w	r3, r3, #3
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038da:	0c1b      	lsrs	r3, r3, #16
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038e6:	0a1b      	lsrs	r3, r3, #8
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038fc:	0d1b      	lsrs	r3, r3, #20
 80038fe:	b29a      	uxth	r2, r3
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003908:	0c1b      	lsrs	r3, r3, #16
 800390a:	b2db      	uxtb	r3, r3
 800390c:	f003 030f 	and.w	r3, r3, #15
 8003910:	b2da      	uxtb	r2, r3
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800391a:	0bdb      	lsrs	r3, r3, #15
 800391c:	b2db      	uxtb	r3, r3
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	b2da      	uxtb	r2, r3
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800392c:	0b9b      	lsrs	r3, r3, #14
 800392e:	b2db      	uxtb	r3, r3
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	b2da      	uxtb	r2, r3
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800393e:	0b5b      	lsrs	r3, r3, #13
 8003940:	b2db      	uxtb	r3, r3
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	b2da      	uxtb	r2, r3
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003950:	0b1b      	lsrs	r3, r3, #12
 8003952:	b2db      	uxtb	r3, r3
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	b2da      	uxtb	r2, r3
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	2200      	movs	r2, #0
 8003962:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003968:	2b00      	cmp	r3, #0
 800396a:	d163      	bne.n	8003a34 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003970:	009a      	lsls	r2, r3, #2
 8003972:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003976:	4013      	ands	r3, r2
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800397c:	0f92      	lsrs	r2, r2, #30
 800397e:	431a      	orrs	r2, r3
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003988:	0edb      	lsrs	r3, r3, #27
 800398a:	b2db      	uxtb	r3, r3
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	b2da      	uxtb	r2, r3
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800399a:	0e1b      	lsrs	r3, r3, #24
 800399c:	b2db      	uxtb	r3, r3
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	b2da      	uxtb	r2, r3
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039ac:	0d5b      	lsrs	r3, r3, #21
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039be:	0c9b      	lsrs	r3, r3, #18
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	f003 0307 	and.w	r3, r3, #7
 80039c6:	b2da      	uxtb	r2, r3
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039d0:	0bdb      	lsrs	r3, r3, #15
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	1c5a      	adds	r2, r3, #1
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	7e1b      	ldrb	r3, [r3, #24]
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	3302      	adds	r3, #2
 80039f4:	2201      	movs	r2, #1
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80039fe:	fb03 f202 	mul.w	r2, r3, r2
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	7a1b      	ldrb	r3, [r3, #8]
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	f003 030f 	and.w	r3, r3, #15
 8003a10:	2201      	movs	r2, #1
 8003a12:	409a      	lsls	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003a20:	0a52      	lsrs	r2, r2, #9
 8003a22:	fb03 f202 	mul.w	r2, r3, r2
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a30:	661a      	str	r2, [r3, #96]	; 0x60
 8003a32:	e031      	b.n	8003a98 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d11d      	bne.n	8003a78 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a40:	041b      	lsls	r3, r3, #16
 8003a42:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a4a:	0c1b      	lsrs	r3, r3, #16
 8003a4c:	431a      	orrs	r2, r3
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	3301      	adds	r3, #1
 8003a58:	029a      	lsls	r2, r3, #10
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a6c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	661a      	str	r2, [r3, #96]	; 0x60
 8003a76:	e00f      	b.n	8003a98 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a58      	ldr	r2, [pc, #352]	; (8003be0 <HAL_SD_GetCardCSD+0x344>)
 8003a7e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a84:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e09d      	b.n	8003bd4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a9c:	0b9b      	lsrs	r3, r3, #14
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aae:	09db      	lsrs	r3, r3, #7
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ab6:	b2da      	uxtb	r2, r3
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad0:	0fdb      	lsrs	r3, r3, #31
 8003ad2:	b2da      	uxtb	r2, r3
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003adc:	0f5b      	lsrs	r3, r3, #29
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	f003 0303 	and.w	r3, r3, #3
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aee:	0e9b      	lsrs	r3, r3, #26
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	f003 0307 	and.w	r3, r3, #7
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b00:	0d9b      	lsrs	r3, r3, #22
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	f003 030f 	and.w	r3, r3, #15
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b12:	0d5b      	lsrs	r3, r3, #21
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2e:	0c1b      	lsrs	r3, r3, #16
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b42:	0bdb      	lsrs	r3, r3, #15
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b56:	0b9b      	lsrs	r3, r3, #14
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	b2da      	uxtb	r2, r3
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6a:	0b5b      	lsrs	r3, r3, #13
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7e:	0b1b      	lsrs	r3, r3, #12
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b92:	0a9b      	lsrs	r3, r3, #10
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	f003 0303 	and.w	r3, r3, #3
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba6:	0a1b      	lsrs	r3, r3, #8
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	f003 0303 	and.w	r3, r3, #3
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bba:	085b      	lsrs	r3, r3, #1
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bc2:	b2da      	uxtb	r2, r3
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	004005ff 	.word	0x004005ff

08003be4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003c3c:	b5b0      	push	{r4, r5, r7, lr}
 8003c3e:	b08e      	sub	sp, #56	; 0x38
 8003c40:	af04      	add	r7, sp, #16
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8003c46:	2300      	movs	r3, #0
 8003c48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2203      	movs	r2, #3
 8003c50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c58:	2b03      	cmp	r3, #3
 8003c5a:	d02e      	beq.n	8003cba <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c62:	d106      	bne.n	8003c72 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c68:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	639a      	str	r2, [r3, #56]	; 0x38
 8003c70:	e029      	b.n	8003cc6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c78:	d10a      	bne.n	8003c90 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 fb2a 	bl	80042d4 <SD_WideBus_Enable>
 8003c80:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	431a      	orrs	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	639a      	str	r2, [r3, #56]	; 0x38
 8003c8e:	e01a      	b.n	8003cc6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10a      	bne.n	8003cac <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 fb67 	bl	800436a <SD_WideBus_Disable>
 8003c9c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ca2:	6a3b      	ldr	r3, [r7, #32]
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	639a      	str	r2, [r3, #56]	; 0x38
 8003caa:	e00c      	b.n	8003cc6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	639a      	str	r2, [r3, #56]	; 0x38
 8003cb8:	e005      	b.n	8003cc6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cbe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00b      	beq.n	8003ce6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a26      	ldr	r2, [pc, #152]	; (8003d6c <HAL_SD_ConfigWideBusOperation+0x130>)
 8003cd4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003ce4:	e01f      	b.n	8003d26 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681d      	ldr	r5, [r3, #0]
 8003d0c:	466c      	mov	r4, sp
 8003d0e:	f107 0314 	add.w	r3, r7, #20
 8003d12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003d16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003d1a:	f107 0308 	add.w	r3, r7, #8
 8003d1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d20:	4628      	mov	r0, r5
 8003d22:	f002 fd87 	bl	8006834 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f002 fe5b 	bl	80069ea <SDMMC_CmdBlockLength>
 8003d34:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d36:	6a3b      	ldr	r3, [r7, #32]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00c      	beq.n	8003d56 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a0a      	ldr	r2, [pc, #40]	; (8003d6c <HAL_SD_ConfigWideBusOperation+0x130>)
 8003d42:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d48:	6a3b      	ldr	r3, [r7, #32]
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8003d5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3728      	adds	r7, #40	; 0x28
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bdb0      	pop	{r4, r5, r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	004005ff 	.word	0x004005ff

08003d70 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003d7c:	f107 030c 	add.w	r3, r7, #12
 8003d80:	4619      	mov	r1, r3
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 fa7e 	bl	8004284 <SD_SendStatus>
 8003d88:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d005      	beq.n	8003d9c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	0a5b      	lsrs	r3, r3, #9
 8003da0:	f003 030f 	and.w	r3, r3, #15
 8003da4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003da6:	693b      	ldr	r3, [r7, #16]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3718      	adds	r7, #24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dcc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003dce:	bf00      	nop
 8003dd0:	3714      	adds	r7, #20
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b084      	sub	sp, #16
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dec:	2b82      	cmp	r3, #130	; 0x82
 8003dee:	d111      	bne.n	8003e14 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f002 fea3 	bl	8006b40 <SDMMC_CmdStopTransfer>
 8003dfa:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d008      	beq.n	8003e14 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	431a      	orrs	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f7ff fd3a 	bl	8003888 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 0208 	bic.w	r2, r2, #8
 8003e22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f240 523a 	movw	r2, #1338	; 0x53a
 8003e2c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f003 fb13 	bl	8007468 <HAL_SD_RxCpltCallback>
#endif
}
 8003e42:	bf00      	nop
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
	...

08003e4c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e58:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7fe fa04 	bl	8002268 <HAL_DMA_GetError>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d03e      	beq.n	8003ee4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e74:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d002      	beq.n	8003e82 <SD_DMAError+0x36>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d12d      	bne.n	8003ede <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a19      	ldr	r2, [pc, #100]	; (8003eec <SD_DMAError+0xa0>)
 8003e88:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003e98:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8003ea6:	6978      	ldr	r0, [r7, #20]
 8003ea8:	f7ff ff62 	bl	8003d70 <HAL_SD_GetCardState>
 8003eac:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	2b06      	cmp	r3, #6
 8003eb2:	d002      	beq.n	8003eba <SD_DMAError+0x6e>
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	2b05      	cmp	r3, #5
 8003eb8:	d10a      	bne.n	8003ed0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f002 fe3e 	bl	8006b40 <SDMMC_CmdStopTransfer>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	2200      	movs	r2, #0
 8003edc:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8003ede:	6978      	ldr	r0, [r7, #20]
 8003ee0:	f7ff fcd2 	bl	8003888 <HAL_SD_ErrorCallback>
#endif
  }
}
 8003ee4:	bf00      	nop
 8003ee6:	3718      	adds	r7, #24
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	004005ff 	.word	0x004005ff

08003ef0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f240 523a 	movw	r2, #1338	; 0x53a
 8003f06:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f7ff ff31 	bl	8003d70 <HAL_SD_GetCardState>
 8003f0e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	2b06      	cmp	r3, #6
 8003f22:	d002      	beq.n	8003f2a <SD_DMATxAbort+0x3a>
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	2b05      	cmp	r3, #5
 8003f28:	d10a      	bne.n	8003f40 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f002 fe06 	bl	8006b40 <SDMMC_CmdStopTransfer>
 8003f34:	4602      	mov	r2, r0
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d103      	bne.n	8003f50 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f003 fa79 	bl	8007440 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003f4e:	e002      	b.n	8003f56 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f7ff fc99 	bl	8003888 <HAL_SD_ErrorCallback>
}
 8003f56:	bf00      	nop
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b084      	sub	sp, #16
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f240 523a 	movw	r2, #1338	; 0x53a
 8003f74:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f7ff fefa 	bl	8003d70 <HAL_SD_GetCardState>
 8003f7c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	2b06      	cmp	r3, #6
 8003f90:	d002      	beq.n	8003f98 <SD_DMARxAbort+0x3a>
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	2b05      	cmp	r3, #5
 8003f96:	d10a      	bne.n	8003fae <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f002 fdcf 	bl	8006b40 <SDMMC_CmdStopTransfer>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d103      	bne.n	8003fbe <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f003 fa42 	bl	8007440 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003fbc:	e002      	b.n	8003fc4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f7ff fc62 	bl	8003888 <HAL_SD_ErrorCallback>
}
 8003fc4:	bf00      	nop
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003fcc:	b5b0      	push	{r4, r5, r7, lr}
 8003fce:	b094      	sub	sp, #80	; 0x50
 8003fd0:	af04      	add	r7, sp, #16
 8003fd2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f002 fc80 	bl	80068e2 <SDIO_GetPowerState>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d102      	bne.n	8003fee <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003fe8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003fec:	e0b8      	b.n	8004160 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff2:	2b03      	cmp	r3, #3
 8003ff4:	d02f      	beq.n	8004056 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f002 feaa 	bl	8006d54 <SDMMC_CmdSendCID>
 8004000:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <SD_InitCard+0x40>
    {
      return errorstate;
 8004008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800400a:	e0a9      	b.n	8004160 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2100      	movs	r1, #0
 8004012:	4618      	mov	r0, r3
 8004014:	f002 fcaa 	bl	800696c <SDIO_GetResponse>
 8004018:	4602      	mov	r2, r0
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2104      	movs	r1, #4
 8004024:	4618      	mov	r0, r3
 8004026:	f002 fca1 	bl	800696c <SDIO_GetResponse>
 800402a:	4602      	mov	r2, r0
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2108      	movs	r1, #8
 8004036:	4618      	mov	r0, r3
 8004038:	f002 fc98 	bl	800696c <SDIO_GetResponse>
 800403c:	4602      	mov	r2, r0
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	210c      	movs	r1, #12
 8004048:	4618      	mov	r0, r3
 800404a:	f002 fc8f 	bl	800696c <SDIO_GetResponse>
 800404e:	4602      	mov	r2, r0
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405a:	2b03      	cmp	r3, #3
 800405c:	d00d      	beq.n	800407a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f107 020e 	add.w	r2, r7, #14
 8004066:	4611      	mov	r1, r2
 8004068:	4618      	mov	r0, r3
 800406a:	f002 feb0 	bl	8006dce <SDMMC_CmdSetRelAdd>
 800406e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <SD_InitCard+0xae>
    {
      return errorstate;
 8004076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004078:	e072      	b.n	8004160 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407e:	2b03      	cmp	r3, #3
 8004080:	d036      	beq.n	80040f0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004082:	89fb      	ldrh	r3, [r7, #14]
 8004084:	461a      	mov	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004092:	041b      	lsls	r3, r3, #16
 8004094:	4619      	mov	r1, r3
 8004096:	4610      	mov	r0, r2
 8004098:	f002 fe7a 	bl	8006d90 <SDMMC_CmdSendCSD>
 800409c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800409e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d001      	beq.n	80040a8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80040a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040a6:	e05b      	b.n	8004160 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2100      	movs	r1, #0
 80040ae:	4618      	mov	r0, r3
 80040b0:	f002 fc5c 	bl	800696c <SDIO_GetResponse>
 80040b4:	4602      	mov	r2, r0
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2104      	movs	r1, #4
 80040c0:	4618      	mov	r0, r3
 80040c2:	f002 fc53 	bl	800696c <SDIO_GetResponse>
 80040c6:	4602      	mov	r2, r0
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2108      	movs	r1, #8
 80040d2:	4618      	mov	r0, r3
 80040d4:	f002 fc4a 	bl	800696c <SDIO_GetResponse>
 80040d8:	4602      	mov	r2, r0
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	210c      	movs	r1, #12
 80040e4:	4618      	mov	r0, r3
 80040e6:	f002 fc41 	bl	800696c <SDIO_GetResponse>
 80040ea:	4602      	mov	r2, r0
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2104      	movs	r1, #4
 80040f6:	4618      	mov	r0, r3
 80040f8:	f002 fc38 	bl	800696c <SDIO_GetResponse>
 80040fc:	4603      	mov	r3, r0
 80040fe:	0d1a      	lsrs	r2, r3, #20
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004104:	f107 0310 	add.w	r3, r7, #16
 8004108:	4619      	mov	r1, r3
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7ff fbc6 	bl	800389c <HAL_SD_GetCardCSD>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d002      	beq.n	800411c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004116:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800411a:	e021      	b.n	8004160 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6819      	ldr	r1, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004124:	041b      	lsls	r3, r3, #16
 8004126:	2200      	movs	r2, #0
 8004128:	461c      	mov	r4, r3
 800412a:	4615      	mov	r5, r2
 800412c:	4622      	mov	r2, r4
 800412e:	462b      	mov	r3, r5
 8004130:	4608      	mov	r0, r1
 8004132:	f002 fd27 	bl	8006b84 <SDMMC_CmdSelDesel>
 8004136:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <SD_InitCard+0x176>
  {
    return errorstate;
 800413e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004140:	e00e      	b.n	8004160 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681d      	ldr	r5, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	466c      	mov	r4, sp
 800414a:	f103 0210 	add.w	r2, r3, #16
 800414e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004150:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004154:	3304      	adds	r3, #4
 8004156:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004158:	4628      	mov	r0, r5
 800415a:	f002 fb6b 	bl	8006834 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3740      	adds	r7, #64	; 0x40
 8004164:	46bd      	mov	sp, r7
 8004166:	bdb0      	pop	{r4, r5, r7, pc}

08004168 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004170:	2300      	movs	r3, #0
 8004172:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004174:	2300      	movs	r3, #0
 8004176:	617b      	str	r3, [r7, #20]
 8004178:	2300      	movs	r3, #0
 800417a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4618      	mov	r0, r3
 8004182:	f002 fd22 	bl	8006bca <SDMMC_CmdGoIdleState>
 8004186:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <SD_PowerON+0x2a>
  {
    return errorstate;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	e072      	b.n	8004278 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f002 fd35 	bl	8006c06 <SDMMC_CmdOperCond>
 800419c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00d      	beq.n	80041c0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f002 fd0b 	bl	8006bca <SDMMC_CmdGoIdleState>
 80041b4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d004      	beq.n	80041c6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	e05b      	b.n	8004278 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d137      	bne.n	800423e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2100      	movs	r1, #0
 80041d4:	4618      	mov	r0, r3
 80041d6:	f002 fd35 	bl	8006c44 <SDMMC_CmdAppCommand>
 80041da:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d02d      	beq.n	800423e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80041e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80041e6:	e047      	b.n	8004278 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2100      	movs	r1, #0
 80041ee:	4618      	mov	r0, r3
 80041f0:	f002 fd28 	bl	8006c44 <SDMMC_CmdAppCommand>
 80041f4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <SD_PowerON+0x98>
    {
      return errorstate;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	e03b      	b.n	8004278 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	491e      	ldr	r1, [pc, #120]	; (8004280 <SD_PowerON+0x118>)
 8004206:	4618      	mov	r0, r3
 8004208:	f002 fd3e 	bl	8006c88 <SDMMC_CmdAppOperCommand>
 800420c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d002      	beq.n	800421a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004214:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004218:	e02e      	b.n	8004278 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2100      	movs	r1, #0
 8004220:	4618      	mov	r0, r3
 8004222:	f002 fba3 	bl	800696c <SDIO_GetResponse>
 8004226:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	0fdb      	lsrs	r3, r3, #31
 800422c:	2b01      	cmp	r3, #1
 800422e:	d101      	bne.n	8004234 <SD_PowerON+0xcc>
 8004230:	2301      	movs	r3, #1
 8004232:	e000      	b.n	8004236 <SD_PowerON+0xce>
 8004234:	2300      	movs	r3, #0
 8004236:	613b      	str	r3, [r7, #16]

    count++;
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	3301      	adds	r3, #1
 800423c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004244:	4293      	cmp	r3, r2
 8004246:	d802      	bhi.n	800424e <SD_PowerON+0xe6>
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d0cc      	beq.n	80041e8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004254:	4293      	cmp	r3, r2
 8004256:	d902      	bls.n	800425e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004258:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800425c:	e00c      	b.n	8004278 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d003      	beq.n	8004270 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	645a      	str	r2, [r3, #68]	; 0x44
 800426e:	e002      	b.n	8004276 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3718      	adds	r7, #24
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	c1100000 	.word	0xc1100000

08004284 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d102      	bne.n	800429a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004294:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004298:	e018      	b.n	80042cc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a2:	041b      	lsls	r3, r3, #16
 80042a4:	4619      	mov	r1, r3
 80042a6:	4610      	mov	r0, r2
 80042a8:	f002 fdb2 	bl	8006e10 <SDMMC_CmdSendStatus>
 80042ac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	e009      	b.n	80042cc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2100      	movs	r1, #0
 80042be:	4618      	mov	r0, r3
 80042c0:	f002 fb54 	bl	800696c <SDIO_GetResponse>
 80042c4:	4602      	mov	r2, r0
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80042dc:	2300      	movs	r3, #0
 80042de:	60fb      	str	r3, [r7, #12]
 80042e0:	2300      	movs	r3, #0
 80042e2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2100      	movs	r1, #0
 80042ea:	4618      	mov	r0, r3
 80042ec:	f002 fb3e 	bl	800696c <SDIO_GetResponse>
 80042f0:	4603      	mov	r3, r0
 80042f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042fa:	d102      	bne.n	8004302 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80042fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004300:	e02f      	b.n	8004362 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004302:	f107 030c 	add.w	r3, r7, #12
 8004306:	4619      	mov	r1, r3
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 f879 	bl	8004400 <SD_FindSCR>
 800430e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	e023      	b.n	8004362 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d01c      	beq.n	800435e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800432c:	041b      	lsls	r3, r3, #16
 800432e:	4619      	mov	r1, r3
 8004330:	4610      	mov	r0, r2
 8004332:	f002 fc87 	bl	8006c44 <SDMMC_CmdAppCommand>
 8004336:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	e00f      	b.n	8004362 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2102      	movs	r1, #2
 8004348:	4618      	mov	r0, r3
 800434a:	f002 fcc0 	bl	8006cce <SDMMC_CmdBusWidth>
 800434e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	e003      	b.n	8004362 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800435a:	2300      	movs	r3, #0
 800435c:	e001      	b.n	8004362 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800435e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004362:	4618      	mov	r0, r3
 8004364:	3718      	adds	r7, #24
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b086      	sub	sp, #24
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004372:	2300      	movs	r3, #0
 8004374:	60fb      	str	r3, [r7, #12]
 8004376:	2300      	movs	r3, #0
 8004378:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2100      	movs	r1, #0
 8004380:	4618      	mov	r0, r3
 8004382:	f002 faf3 	bl	800696c <SDIO_GetResponse>
 8004386:	4603      	mov	r3, r0
 8004388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800438c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004390:	d102      	bne.n	8004398 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004392:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004396:	e02f      	b.n	80043f8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004398:	f107 030c 	add.w	r3, r7, #12
 800439c:	4619      	mov	r1, r3
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f82e 	bl	8004400 <SD_FindSCR>
 80043a4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	e023      	b.n	80043f8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d01c      	beq.n	80043f4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c2:	041b      	lsls	r3, r3, #16
 80043c4:	4619      	mov	r1, r3
 80043c6:	4610      	mov	r0, r2
 80043c8:	f002 fc3c 	bl	8006c44 <SDMMC_CmdAppCommand>
 80043cc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d001      	beq.n	80043d8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	e00f      	b.n	80043f8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2100      	movs	r1, #0
 80043de:	4618      	mov	r0, r3
 80043e0:	f002 fc75 	bl	8006cce <SDMMC_CmdBusWidth>
 80043e4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d001      	beq.n	80043f0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	e003      	b.n	80043f8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80043f0:	2300      	movs	r3, #0
 80043f2:	e001      	b.n	80043f8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80043f4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3718      	adds	r7, #24
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004400:	b590      	push	{r4, r7, lr}
 8004402:	b08f      	sub	sp, #60	; 0x3c
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800440a:	f7fd fb39 	bl	8001a80 <HAL_GetTick>
 800440e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004410:	2300      	movs	r3, #0
 8004412:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004414:	2300      	movs	r3, #0
 8004416:	60bb      	str	r3, [r7, #8]
 8004418:	2300      	movs	r3, #0
 800441a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2108      	movs	r1, #8
 8004426:	4618      	mov	r0, r3
 8004428:	f002 fadf 	bl	80069ea <SDMMC_CmdBlockLength>
 800442c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800442e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004436:	e0b2      	b.n	800459e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004440:	041b      	lsls	r3, r3, #16
 8004442:	4619      	mov	r1, r3
 8004444:	4610      	mov	r0, r2
 8004446:	f002 fbfd 	bl	8006c44 <SDMMC_CmdAppCommand>
 800444a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800444c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <SD_FindSCR+0x56>
  {
    return errorstate;
 8004452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004454:	e0a3      	b.n	800459e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004456:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800445a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800445c:	2308      	movs	r3, #8
 800445e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004460:	2330      	movs	r3, #48	; 0x30
 8004462:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004464:	2302      	movs	r3, #2
 8004466:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004468:	2300      	movs	r3, #0
 800446a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800446c:	2301      	movs	r3, #1
 800446e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f107 0210 	add.w	r2, r7, #16
 8004478:	4611      	mov	r1, r2
 800447a:	4618      	mov	r0, r3
 800447c:	f002 fa89 	bl	8006992 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4618      	mov	r0, r3
 8004486:	f002 fc44 	bl	8006d12 <SDMMC_CmdSendSCR>
 800448a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800448c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448e:	2b00      	cmp	r3, #0
 8004490:	d02a      	beq.n	80044e8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8004492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004494:	e083      	b.n	800459e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800449c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00f      	beq.n	80044c4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6819      	ldr	r1, [r3, #0]
 80044a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	f107 0208 	add.w	r2, r7, #8
 80044b0:	18d4      	adds	r4, r2, r3
 80044b2:	4608      	mov	r0, r1
 80044b4:	f002 f9e9 	bl	800688a <SDIO_ReadFIFO>
 80044b8:	4603      	mov	r3, r0
 80044ba:	6023      	str	r3, [r4, #0]
      index++;
 80044bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044be:	3301      	adds	r3, #1
 80044c0:	637b      	str	r3, [r7, #52]	; 0x34
 80044c2:	e006      	b.n	80044d2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d012      	beq.n	80044f8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80044d2:	f7fd fad5 	bl	8001a80 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044e0:	d102      	bne.n	80044e8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80044e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80044e6:	e05a      	b.n	800459e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ee:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0cf      	beq.n	8004496 <SD_FindSCR+0x96>
 80044f6:	e000      	b.n	80044fa <SD_FindSCR+0xfa>
      break;
 80044f8:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004500:	f003 0308 	and.w	r3, r3, #8
 8004504:	2b00      	cmp	r3, #0
 8004506:	d005      	beq.n	8004514 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2208      	movs	r2, #8
 800450e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004510:	2308      	movs	r3, #8
 8004512:	e044      	b.n	800459e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d005      	beq.n	800452e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2202      	movs	r2, #2
 8004528:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800452a:	2302      	movs	r3, #2
 800452c:	e037      	b.n	800459e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004534:	f003 0320 	and.w	r3, r3, #32
 8004538:	2b00      	cmp	r3, #0
 800453a:	d005      	beq.n	8004548 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2220      	movs	r2, #32
 8004542:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004544:	2320      	movs	r3, #32
 8004546:	e02a      	b.n	800459e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f240 523a 	movw	r2, #1338	; 0x53a
 8004550:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	061a      	lsls	r2, r3, #24
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	021b      	lsls	r3, r3, #8
 800455a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800455e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	0a1b      	lsrs	r3, r3, #8
 8004564:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004568:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	0e1b      	lsrs	r3, r3, #24
 800456e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004572:	601a      	str	r2, [r3, #0]
    scr++;
 8004574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004576:	3304      	adds	r3, #4
 8004578:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	061a      	lsls	r2, r3, #24
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	021b      	lsls	r3, r3, #8
 8004582:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004586:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	0a1b      	lsrs	r3, r3, #8
 800458c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004590:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	0e1b      	lsrs	r3, r3, #24
 8004596:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	373c      	adds	r7, #60	; 0x3c
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd90      	pop	{r4, r7, pc}

080045a6 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b086      	sub	sp, #24
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d03f      	beq.n	8004640 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80045c0:	2300      	movs	r3, #0
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	e033      	b.n	800462e <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f002 f95d 	bl	800688a <SDIO_ReadFIFO>
 80045d0:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	3301      	adds	r3, #1
 80045de:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	3b01      	subs	r3, #1
 80045e4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	0a1b      	lsrs	r3, r3, #8
 80045ea:	b2da      	uxtb	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	701a      	strb	r2, [r3, #0]
      tmp++;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	3301      	adds	r3, #1
 80045f4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	3b01      	subs	r3, #1
 80045fa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	0c1b      	lsrs	r3, r3, #16
 8004600:	b2da      	uxtb	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	3301      	adds	r3, #1
 800460a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	3b01      	subs	r3, #1
 8004610:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	0e1b      	lsrs	r3, r3, #24
 8004616:	b2da      	uxtb	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	3301      	adds	r3, #1
 8004620:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	3b01      	subs	r3, #1
 8004626:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	3301      	adds	r3, #1
 800462c:	617b      	str	r3, [r7, #20]
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	2b07      	cmp	r3, #7
 8004632:	d9c8      	bls.n	80045c6 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004640:	bf00      	nop
 8004642:	3718      	adds	r7, #24
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d043      	beq.n	80046ea <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004662:	2300      	movs	r3, #0
 8004664:	617b      	str	r3, [r7, #20]
 8004666:	e037      	b.n	80046d8 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	3301      	adds	r3, #1
 8004672:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	3b01      	subs	r3, #1
 8004678:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	021a      	lsls	r2, r3, #8
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	4313      	orrs	r3, r2
 8004684:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	3301      	adds	r3, #1
 800468a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	3b01      	subs	r3, #1
 8004690:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	041a      	lsls	r2, r3, #16
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	4313      	orrs	r3, r2
 800469c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	3301      	adds	r3, #1
 80046a2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	3b01      	subs	r3, #1
 80046a8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	061a      	lsls	r2, r3, #24
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	60bb      	str	r3, [r7, #8]
      tmp++;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	3301      	adds	r3, #1
 80046ba:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	3b01      	subs	r3, #1
 80046c0:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f107 0208 	add.w	r2, r7, #8
 80046ca:	4611      	mov	r1, r2
 80046cc:	4618      	mov	r0, r3
 80046ce:	f002 f8e9 	bl	80068a4 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	3301      	adds	r3, #1
 80046d6:	617b      	str	r3, [r7, #20]
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	2b07      	cmp	r3, #7
 80046dc:	d9c4      	bls.n	8004668 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80046ea:	bf00      	nop
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b082      	sub	sp, #8
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d101      	bne.n	8004704 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e07b      	b.n	80047fc <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004708:	2b00      	cmp	r3, #0
 800470a:	d108      	bne.n	800471e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004714:	d009      	beq.n	800472a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	61da      	str	r2, [r3, #28]
 800471c:	e005      	b.n	800472a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b00      	cmp	r3, #0
 800473a:	d106      	bne.n	800474a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f7fc fd13 	bl	8001170 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2202      	movs	r2, #2
 800474e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004760:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004772:	431a      	orrs	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800477c:	431a      	orrs	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	431a      	orrs	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	69db      	ldr	r3, [r3, #28]
 80047a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047a4:	431a      	orrs	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ae:	ea42 0103 	orr.w	r1, r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	0c1b      	lsrs	r3, r3, #16
 80047c8:	f003 0104 	and.w	r1, r3, #4
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d0:	f003 0210 	and.w	r2, r3, #16
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	430a      	orrs	r2, r1
 80047da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	69da      	ldr	r2, [r3, #28]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3708      	adds	r7, #8
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	4613      	mov	r3, r2
 8004810:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004812:	2300      	movs	r3, #0
 8004814:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d110      	bne.n	8004840 <HAL_SPI_Receive_DMA+0x3c>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004826:	d10b      	bne.n	8004840 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2204      	movs	r2, #4
 800482c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8004830:	88fb      	ldrh	r3, [r7, #6]
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	68b9      	ldr	r1, [r7, #8]
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 f8ac 	bl	8004994 <HAL_SPI_TransmitReceive_DMA>
 800483c:	4603      	mov	r3, r0
 800483e:	e09f      	b.n	8004980 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004846:	2b01      	cmp	r3, #1
 8004848:	d101      	bne.n	800484e <HAL_SPI_Receive_DMA+0x4a>
 800484a:	2302      	movs	r3, #2
 800484c:	e098      	b.n	8004980 <HAL_SPI_Receive_DMA+0x17c>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b01      	cmp	r3, #1
 8004860:	d002      	beq.n	8004868 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8004862:	2302      	movs	r3, #2
 8004864:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004866:	e086      	b.n	8004976 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d002      	beq.n	8004874 <HAL_SPI_Receive_DMA+0x70>
 800486e:	88fb      	ldrh	r3, [r7, #6]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d102      	bne.n	800487a <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004878:	e07d      	b.n	8004976 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2204      	movs	r2, #4
 800487e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	88fa      	ldrh	r2, [r7, #6]
 8004892:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	88fa      	ldrh	r2, [r7, #6]
 8004898:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048ba:	d10f      	bne.n	80048dc <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80048da:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048e0:	4a29      	ldr	r2, [pc, #164]	; (8004988 <HAL_SPI_Receive_DMA+0x184>)
 80048e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048e8:	4a28      	ldr	r2, [pc, #160]	; (800498c <HAL_SPI_Receive_DMA+0x188>)
 80048ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048f0:	4a27      	ldr	r2, [pc, #156]	; (8004990 <HAL_SPI_Receive_DMA+0x18c>)
 80048f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048f8:	2200      	movs	r2, #0
 80048fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	330c      	adds	r3, #12
 8004906:	4619      	mov	r1, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004912:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004914:	f7fd faa4 	bl	8001e60 <HAL_DMA_Start_IT>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00c      	beq.n	8004938 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004922:	f043 0210 	orr.w	r2, r3, #16
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004936:	e01e      	b.n	8004976 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004942:	2b40      	cmp	r3, #64	; 0x40
 8004944:	d007      	beq.n	8004956 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004954:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f042 0220 	orr.w	r2, r2, #32
 8004964:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f042 0201 	orr.w	r2, r2, #1
 8004974:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800497e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004980:	4618      	mov	r0, r3
 8004982:	3718      	adds	r7, #24
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	08004d35 	.word	0x08004d35
 800498c:	08004bfd 	.word	0x08004bfd
 8004990:	08004d6d 	.word	0x08004d6d

08004994 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b086      	sub	sp, #24
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
 80049a0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049a2:	2300      	movs	r3, #0
 80049a4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d101      	bne.n	80049b4 <HAL_SPI_TransmitReceive_DMA+0x20>
 80049b0:	2302      	movs	r3, #2
 80049b2:	e0e3      	b.n	8004b7c <HAL_SPI_TransmitReceive_DMA+0x1e8>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049c2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80049ca:	7dbb      	ldrb	r3, [r7, #22]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d00d      	beq.n	80049ec <HAL_SPI_TransmitReceive_DMA+0x58>
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049d6:	d106      	bne.n	80049e6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d102      	bne.n	80049e6 <HAL_SPI_TransmitReceive_DMA+0x52>
 80049e0:	7dbb      	ldrb	r3, [r7, #22]
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d002      	beq.n	80049ec <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80049e6:	2302      	movs	r3, #2
 80049e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80049ea:	e0c2      	b.n	8004b72 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d005      	beq.n	80049fe <HAL_SPI_TransmitReceive_DMA+0x6a>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d002      	beq.n	80049fe <HAL_SPI_TransmitReceive_DMA+0x6a>
 80049f8:	887b      	ldrh	r3, [r7, #2]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d102      	bne.n	8004a04 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a02:	e0b6      	b.n	8004b72 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b04      	cmp	r3, #4
 8004a0e:	d003      	beq.n	8004a18 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2205      	movs	r2, #5
 8004a14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	68ba      	ldr	r2, [r7, #8]
 8004a22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	887a      	ldrh	r2, [r7, #2]
 8004a28:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	887a      	ldrh	r2, [r7, #2]
 8004a2e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	887a      	ldrh	r2, [r7, #2]
 8004a3a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	887a      	ldrh	r2, [r7, #2]
 8004a40:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d108      	bne.n	8004a6c <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a5e:	4a49      	ldr	r2, [pc, #292]	; (8004b84 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8004a60:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a66:	4a48      	ldr	r2, [pc, #288]	; (8004b88 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8004a68:	63da      	str	r2, [r3, #60]	; 0x3c
 8004a6a:	e007      	b.n	8004a7c <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a70:	4a46      	ldr	r2, [pc, #280]	; (8004b8c <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8004a72:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a78:	4a45      	ldr	r2, [pc, #276]	; (8004b90 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8004a7a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a80:	4a44      	ldr	r2, [pc, #272]	; (8004b94 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8004a82:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a88:	2200      	movs	r2, #0
 8004a8a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	330c      	adds	r3, #12
 8004a96:	4619      	mov	r1, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aa2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004aa4:	f7fd f9dc 	bl	8001e60 <HAL_DMA_Start_IT>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00c      	beq.n	8004ac8 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab2:	f043 0210 	orr.w	r2, r3, #16
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004ac6:	e054      	b.n	8004b72 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f042 0201 	orr.w	r2, r2, #1
 8004ad6:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004adc:	2200      	movs	r2, #0
 8004ade:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aec:	2200      	movs	r2, #0
 8004aee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004af4:	2200      	movs	r2, #0
 8004af6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b00:	4619      	mov	r1, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	330c      	adds	r3, #12
 8004b08:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b0e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004b10:	f7fd f9a6 	bl	8001e60 <HAL_DMA_Start_IT>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00c      	beq.n	8004b34 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b1e:	f043 0210 	orr.w	r2, r3, #16
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004b32:	e01e      	b.n	8004b72 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b3e:	2b40      	cmp	r3, #64	; 0x40
 8004b40:	d007      	beq.n	8004b52 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b50:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	685a      	ldr	r2, [r3, #4]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f042 0220 	orr.w	r2, r2, #32
 8004b60:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f042 0202 	orr.w	r2, r2, #2
 8004b70:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3718      	adds	r7, #24
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	08004d35 	.word	0x08004d35
 8004b88:	08004bfd 	.word	0x08004bfd
 8004b8c:	08004d51 	.word	0x08004d51
 8004b90:	08004ca5 	.word	0x08004ca5
 8004b94:	08004d6d 	.word	0x08004d6d

08004b98 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c08:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c0a:	f7fc ff39 	bl	8001a80 <HAL_GetTick>
 8004c0e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c1e:	d03b      	beq.n	8004c98 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0220 	bic.w	r2, r2, #32
 8004c2e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10d      	bne.n	8004c54 <SPI_DMAReceiveCplt+0x58>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c40:	d108      	bne.n	8004c54 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f022 0203 	bic.w	r2, r2, #3
 8004c50:	605a      	str	r2, [r3, #4]
 8004c52:	e007      	b.n	8004c64 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0201 	bic.w	r2, r2, #1
 8004c62:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004c64:	68ba      	ldr	r2, [r7, #8]
 8004c66:	2164      	movs	r1, #100	; 0x64
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f000 f927 	bl	8004ebc <SPI_EndRxTransaction>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d002      	beq.n	8004c7a <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2220      	movs	r2, #32
 8004c78:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d003      	beq.n	8004c98 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f7ff ffa9 	bl	8004be8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004c96:	e002      	b.n	8004c9e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f7ff ff7d 	bl	8004b98 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cb2:	f7fc fee5 	bl	8001a80 <HAL_GetTick>
 8004cb6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cc6:	d02f      	beq.n	8004d28 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685a      	ldr	r2, [r3, #4]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 0220 	bic.w	r2, r2, #32
 8004cd6:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	2164      	movs	r1, #100	; 0x64
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f000 f953 	bl	8004f88 <SPI_EndRxTxTransaction>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d005      	beq.n	8004cf4 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cec:	f043 0220 	orr.w	r2, r3, #32
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685a      	ldr	r2, [r3, #4]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f022 0203 	bic.w	r2, r2, #3
 8004d02:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f7ff ff61 	bl	8004be8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004d26:	e002      	b.n	8004d2e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f7ff ff3f 	bl	8004bac <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d2e:	3710      	adds	r7, #16
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d40:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f7ff ff3c 	bl	8004bc0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d48:	bf00      	nop
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f7ff ff38 	bl	8004bd4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d64:	bf00      	nop
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d78:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f022 0203 	bic.w	r2, r2, #3
 8004d88:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d8e:	f043 0210 	orr.w	r2, r3, #16
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f7ff ff22 	bl	8004be8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004da4:	bf00      	nop
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b088      	sub	sp, #32
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	603b      	str	r3, [r7, #0]
 8004db8:	4613      	mov	r3, r2
 8004dba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004dbc:	f7fc fe60 	bl	8001a80 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc4:	1a9b      	subs	r3, r3, r2
 8004dc6:	683a      	ldr	r2, [r7, #0]
 8004dc8:	4413      	add	r3, r2
 8004dca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004dcc:	f7fc fe58 	bl	8001a80 <HAL_GetTick>
 8004dd0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004dd2:	4b39      	ldr	r3, [pc, #228]	; (8004eb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	015b      	lsls	r3, r3, #5
 8004dd8:	0d1b      	lsrs	r3, r3, #20
 8004dda:	69fa      	ldr	r2, [r7, #28]
 8004ddc:	fb02 f303 	mul.w	r3, r2, r3
 8004de0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004de2:	e054      	b.n	8004e8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dea:	d050      	beq.n	8004e8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004dec:	f7fc fe48 	bl	8001a80 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	69fa      	ldr	r2, [r7, #28]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d902      	bls.n	8004e02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d13d      	bne.n	8004e7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e1a:	d111      	bne.n	8004e40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e24:	d004      	beq.n	8004e30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e2e:	d107      	bne.n	8004e40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e48:	d10f      	bne.n	8004e6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e58:	601a      	str	r2, [r3, #0]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e017      	b.n	8004eae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d101      	bne.n	8004e88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e84:	2300      	movs	r3, #0
 8004e86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	4013      	ands	r3, r2
 8004e98:	68ba      	ldr	r2, [r7, #8]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	bf0c      	ite	eq
 8004e9e:	2301      	moveq	r3, #1
 8004ea0:	2300      	movne	r3, #0
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	79fb      	ldrb	r3, [r7, #7]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d19b      	bne.n	8004de4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3720      	adds	r7, #32
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	2000000c 	.word	0x2000000c

08004ebc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af02      	add	r7, sp, #8
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ed0:	d111      	bne.n	8004ef6 <SPI_EndRxTransaction+0x3a>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eda:	d004      	beq.n	8004ee6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ee4:	d107      	bne.n	8004ef6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ef4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004efe:	d12a      	bne.n	8004f56 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f08:	d012      	beq.n	8004f30 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	2200      	movs	r2, #0
 8004f12:	2180      	movs	r1, #128	; 0x80
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f7ff ff49 	bl	8004dac <SPI_WaitFlagStateUntilTimeout>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d02d      	beq.n	8004f7c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f24:	f043 0220 	orr.w	r2, r3, #32
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e026      	b.n	8004f7e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	9300      	str	r3, [sp, #0]
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	2200      	movs	r2, #0
 8004f38:	2101      	movs	r1, #1
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f7ff ff36 	bl	8004dac <SPI_WaitFlagStateUntilTimeout>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d01a      	beq.n	8004f7c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f4a:	f043 0220 	orr.w	r2, r3, #32
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e013      	b.n	8004f7e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	2101      	movs	r1, #1
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f7ff ff23 	bl	8004dac <SPI_WaitFlagStateUntilTimeout>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d007      	beq.n	8004f7c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f70:	f043 0220 	orr.w	r2, r3, #32
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e000      	b.n	8004f7e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3710      	adds	r7, #16
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
	...

08004f88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b088      	sub	sp, #32
 8004f8c:	af02      	add	r7, sp, #8
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f94:	4b1b      	ldr	r3, [pc, #108]	; (8005004 <SPI_EndRxTxTransaction+0x7c>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a1b      	ldr	r2, [pc, #108]	; (8005008 <SPI_EndRxTxTransaction+0x80>)
 8004f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9e:	0d5b      	lsrs	r3, r3, #21
 8004fa0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004fa4:	fb02 f303 	mul.w	r3, r2, r3
 8004fa8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fb2:	d112      	bne.n	8004fda <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	9300      	str	r3, [sp, #0]
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	2180      	movs	r1, #128	; 0x80
 8004fbe:	68f8      	ldr	r0, [r7, #12]
 8004fc0:	f7ff fef4 	bl	8004dac <SPI_WaitFlagStateUntilTimeout>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d016      	beq.n	8004ff8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fce:	f043 0220 	orr.w	r2, r3, #32
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e00f      	b.n	8004ffa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00a      	beq.n	8004ff6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff0:	2b80      	cmp	r3, #128	; 0x80
 8004ff2:	d0f2      	beq.n	8004fda <SPI_EndRxTxTransaction+0x52>
 8004ff4:	e000      	b.n	8004ff8 <SPI_EndRxTxTransaction+0x70>
        break;
 8004ff6:	bf00      	nop
  }

  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3718      	adds	r7, #24
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	2000000c 	.word	0x2000000c
 8005008:	165e9f81 	.word	0x165e9f81

0800500c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e041      	b.n	80050a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d106      	bne.n	8005038 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7fc fb6c 	bl	8001710 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2202      	movs	r2, #2
 800503c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	3304      	adds	r3, #4
 8005048:	4619      	mov	r1, r3
 800504a:	4610      	mov	r0, r2
 800504c:	f000 fc14 	bl	8005878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
	...

080050ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d001      	beq.n	80050c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e03c      	b.n	800513e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2202      	movs	r2, #2
 80050c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a1e      	ldr	r2, [pc, #120]	; (800514c <HAL_TIM_Base_Start+0xa0>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d018      	beq.n	8005108 <HAL_TIM_Base_Start+0x5c>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050de:	d013      	beq.n	8005108 <HAL_TIM_Base_Start+0x5c>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a1a      	ldr	r2, [pc, #104]	; (8005150 <HAL_TIM_Base_Start+0xa4>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d00e      	beq.n	8005108 <HAL_TIM_Base_Start+0x5c>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a19      	ldr	r2, [pc, #100]	; (8005154 <HAL_TIM_Base_Start+0xa8>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d009      	beq.n	8005108 <HAL_TIM_Base_Start+0x5c>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a17      	ldr	r2, [pc, #92]	; (8005158 <HAL_TIM_Base_Start+0xac>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d004      	beq.n	8005108 <HAL_TIM_Base_Start+0x5c>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a16      	ldr	r2, [pc, #88]	; (800515c <HAL_TIM_Base_Start+0xb0>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d111      	bne.n	800512c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 0307 	and.w	r3, r3, #7
 8005112:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2b06      	cmp	r3, #6
 8005118:	d010      	beq.n	800513c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f042 0201 	orr.w	r2, r2, #1
 8005128:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800512a:	e007      	b.n	800513c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f042 0201 	orr.w	r2, r2, #1
 800513a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3714      	adds	r7, #20
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	40010000 	.word	0x40010000
 8005150:	40000400 	.word	0x40000400
 8005154:	40000800 	.word	0x40000800
 8005158:	40000c00 	.word	0x40000c00
 800515c:	40014000 	.word	0x40014000

08005160 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d101      	bne.n	8005172 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e041      	b.n	80051f6 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d106      	bne.n	800518c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f839 	bl	80051fe <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	3304      	adds	r3, #4
 800519c:	4619      	mov	r1, r3
 800519e:	4610      	mov	r0, r2
 80051a0:	f000 fb6a 	bl	8005878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80051fe:	b480      	push	{r7}
 8005200:	b083      	sub	sp, #12
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005206:	bf00      	nop
 8005208:	370c      	adds	r7, #12
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
	...

08005214 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d109      	bne.n	8005238 <HAL_TIM_OC_Start+0x24>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b01      	cmp	r3, #1
 800522e:	bf14      	ite	ne
 8005230:	2301      	movne	r3, #1
 8005232:	2300      	moveq	r3, #0
 8005234:	b2db      	uxtb	r3, r3
 8005236:	e022      	b.n	800527e <HAL_TIM_OC_Start+0x6a>
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	2b04      	cmp	r3, #4
 800523c:	d109      	bne.n	8005252 <HAL_TIM_OC_Start+0x3e>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b01      	cmp	r3, #1
 8005248:	bf14      	ite	ne
 800524a:	2301      	movne	r3, #1
 800524c:	2300      	moveq	r3, #0
 800524e:	b2db      	uxtb	r3, r3
 8005250:	e015      	b.n	800527e <HAL_TIM_OC_Start+0x6a>
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2b08      	cmp	r3, #8
 8005256:	d109      	bne.n	800526c <HAL_TIM_OC_Start+0x58>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800525e:	b2db      	uxtb	r3, r3
 8005260:	2b01      	cmp	r3, #1
 8005262:	bf14      	ite	ne
 8005264:	2301      	movne	r3, #1
 8005266:	2300      	moveq	r3, #0
 8005268:	b2db      	uxtb	r3, r3
 800526a:	e008      	b.n	800527e <HAL_TIM_OC_Start+0x6a>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005272:	b2db      	uxtb	r3, r3
 8005274:	2b01      	cmp	r3, #1
 8005276:	bf14      	ite	ne
 8005278:	2301      	movne	r3, #1
 800527a:	2300      	moveq	r3, #0
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e068      	b.n	8005358 <HAL_TIM_OC_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d104      	bne.n	8005296 <HAL_TIM_OC_Start+0x82>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2202      	movs	r2, #2
 8005290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005294:	e013      	b.n	80052be <HAL_TIM_OC_Start+0xaa>
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b04      	cmp	r3, #4
 800529a:	d104      	bne.n	80052a6 <HAL_TIM_OC_Start+0x92>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2202      	movs	r2, #2
 80052a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052a4:	e00b      	b.n	80052be <HAL_TIM_OC_Start+0xaa>
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b08      	cmp	r3, #8
 80052aa:	d104      	bne.n	80052b6 <HAL_TIM_OC_Start+0xa2>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2202      	movs	r2, #2
 80052b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052b4:	e003      	b.n	80052be <HAL_TIM_OC_Start+0xaa>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2202      	movs	r2, #2
 80052ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2201      	movs	r2, #1
 80052c4:	6839      	ldr	r1, [r7, #0]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 fe0d 	bl	8005ee6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a23      	ldr	r2, [pc, #140]	; (8005360 <HAL_TIM_OC_Start+0x14c>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d107      	bne.n	80052e6 <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a1d      	ldr	r2, [pc, #116]	; (8005360 <HAL_TIM_OC_Start+0x14c>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d018      	beq.n	8005322 <HAL_TIM_OC_Start+0x10e>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052f8:	d013      	beq.n	8005322 <HAL_TIM_OC_Start+0x10e>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a19      	ldr	r2, [pc, #100]	; (8005364 <HAL_TIM_OC_Start+0x150>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d00e      	beq.n	8005322 <HAL_TIM_OC_Start+0x10e>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a17      	ldr	r2, [pc, #92]	; (8005368 <HAL_TIM_OC_Start+0x154>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d009      	beq.n	8005322 <HAL_TIM_OC_Start+0x10e>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a16      	ldr	r2, [pc, #88]	; (800536c <HAL_TIM_OC_Start+0x158>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d004      	beq.n	8005322 <HAL_TIM_OC_Start+0x10e>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a14      	ldr	r2, [pc, #80]	; (8005370 <HAL_TIM_OC_Start+0x15c>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d111      	bne.n	8005346 <HAL_TIM_OC_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f003 0307 	and.w	r3, r3, #7
 800532c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2b06      	cmp	r3, #6
 8005332:	d010      	beq.n	8005356 <HAL_TIM_OC_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f042 0201 	orr.w	r2, r2, #1
 8005342:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005344:	e007      	b.n	8005356 <HAL_TIM_OC_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f042 0201 	orr.w	r2, r2, #1
 8005354:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	40010000 	.word	0x40010000
 8005364:	40000400 	.word	0x40000400
 8005368:	40000800 	.word	0x40000800
 800536c:	40000c00 	.word	0x40000c00
 8005370:	40014000 	.word	0x40014000

08005374 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e041      	b.n	800540a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d106      	bne.n	80053a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f839 	bl	8005412 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2202      	movs	r2, #2
 80053a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	3304      	adds	r3, #4
 80053b0:	4619      	mov	r1, r3
 80053b2:	4610      	mov	r0, r2
 80053b4:	f000 fa60 	bl	8005878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005412:	b480      	push	{r7}
 8005414:	b083      	sub	sp, #12
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800541a:	bf00      	nop
 800541c:	370c      	adds	r7, #12
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
	...

08005428 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005434:	2300      	movs	r3, #0
 8005436:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800543e:	2b01      	cmp	r3, #1
 8005440:	d101      	bne.n	8005446 <HAL_TIM_OC_ConfigChannel+0x1e>
 8005442:	2302      	movs	r3, #2
 8005444:	e048      	b.n	80054d8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2b0c      	cmp	r3, #12
 8005452:	d839      	bhi.n	80054c8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8005454:	a201      	add	r2, pc, #4	; (adr r2, 800545c <HAL_TIM_OC_ConfigChannel+0x34>)
 8005456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545a:	bf00      	nop
 800545c:	08005491 	.word	0x08005491
 8005460:	080054c9 	.word	0x080054c9
 8005464:	080054c9 	.word	0x080054c9
 8005468:	080054c9 	.word	0x080054c9
 800546c:	0800549f 	.word	0x0800549f
 8005470:	080054c9 	.word	0x080054c9
 8005474:	080054c9 	.word	0x080054c9
 8005478:	080054c9 	.word	0x080054c9
 800547c:	080054ad 	.word	0x080054ad
 8005480:	080054c9 	.word	0x080054c9
 8005484:	080054c9 	.word	0x080054c9
 8005488:	080054c9 	.word	0x080054c9
 800548c:	080054bb 	.word	0x080054bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68b9      	ldr	r1, [r7, #8]
 8005496:	4618      	mov	r0, r3
 8005498:	f000 fa6e 	bl	8005978 <TIM_OC1_SetConfig>
      break;
 800549c:	e017      	b.n	80054ce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68b9      	ldr	r1, [r7, #8]
 80054a4:	4618      	mov	r0, r3
 80054a6:	f000 facd 	bl	8005a44 <TIM_OC2_SetConfig>
      break;
 80054aa:	e010      	b.n	80054ce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68b9      	ldr	r1, [r7, #8]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 fb32 	bl	8005b1c <TIM_OC3_SetConfig>
      break;
 80054b8:	e009      	b.n	80054ce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68b9      	ldr	r1, [r7, #8]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f000 fb95 	bl	8005bf0 <TIM_OC4_SetConfig>
      break;
 80054c6:	e002      	b.n	80054ce <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	75fb      	strb	r3, [r7, #23]
      break;
 80054cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3718      	adds	r7, #24
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054ec:	2300      	movs	r3, #0
 80054ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d101      	bne.n	80054fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80054fa:	2302      	movs	r3, #2
 80054fc:	e0ae      	b.n	800565c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2b0c      	cmp	r3, #12
 800550a:	f200 809f 	bhi.w	800564c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800550e:	a201      	add	r2, pc, #4	; (adr r2, 8005514 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005514:	08005549 	.word	0x08005549
 8005518:	0800564d 	.word	0x0800564d
 800551c:	0800564d 	.word	0x0800564d
 8005520:	0800564d 	.word	0x0800564d
 8005524:	08005589 	.word	0x08005589
 8005528:	0800564d 	.word	0x0800564d
 800552c:	0800564d 	.word	0x0800564d
 8005530:	0800564d 	.word	0x0800564d
 8005534:	080055cb 	.word	0x080055cb
 8005538:	0800564d 	.word	0x0800564d
 800553c:	0800564d 	.word	0x0800564d
 8005540:	0800564d 	.word	0x0800564d
 8005544:	0800560b 	.word	0x0800560b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68b9      	ldr	r1, [r7, #8]
 800554e:	4618      	mov	r0, r3
 8005550:	f000 fa12 	bl	8005978 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	699a      	ldr	r2, [r3, #24]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f042 0208 	orr.w	r2, r2, #8
 8005562:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	699a      	ldr	r2, [r3, #24]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0204 	bic.w	r2, r2, #4
 8005572:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6999      	ldr	r1, [r3, #24]
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	691a      	ldr	r2, [r3, #16]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	619a      	str	r2, [r3, #24]
      break;
 8005586:	e064      	b.n	8005652 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68b9      	ldr	r1, [r7, #8]
 800558e:	4618      	mov	r0, r3
 8005590:	f000 fa58 	bl	8005a44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	699a      	ldr	r2, [r3, #24]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	699a      	ldr	r2, [r3, #24]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6999      	ldr	r1, [r3, #24]
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	021a      	lsls	r2, r3, #8
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	430a      	orrs	r2, r1
 80055c6:	619a      	str	r2, [r3, #24]
      break;
 80055c8:	e043      	b.n	8005652 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68b9      	ldr	r1, [r7, #8]
 80055d0:	4618      	mov	r0, r3
 80055d2:	f000 faa3 	bl	8005b1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	69da      	ldr	r2, [r3, #28]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f042 0208 	orr.w	r2, r2, #8
 80055e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	69da      	ldr	r2, [r3, #28]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 0204 	bic.w	r2, r2, #4
 80055f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	69d9      	ldr	r1, [r3, #28]
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	691a      	ldr	r2, [r3, #16]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	430a      	orrs	r2, r1
 8005606:	61da      	str	r2, [r3, #28]
      break;
 8005608:	e023      	b.n	8005652 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68b9      	ldr	r1, [r7, #8]
 8005610:	4618      	mov	r0, r3
 8005612:	f000 faed 	bl	8005bf0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	69da      	ldr	r2, [r3, #28]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005624:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	69da      	ldr	r2, [r3, #28]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005634:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	69d9      	ldr	r1, [r3, #28]
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	021a      	lsls	r2, r3, #8
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	430a      	orrs	r2, r1
 8005648:	61da      	str	r2, [r3, #28]
      break;
 800564a:	e002      	b.n	8005652 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	75fb      	strb	r3, [r7, #23]
      break;
 8005650:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800565a:	7dfb      	ldrb	r3, [r7, #23]
}
 800565c:	4618      	mov	r0, r3
 800565e:	3718      	adds	r7, #24
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800566e:	2300      	movs	r3, #0
 8005670:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005678:	2b01      	cmp	r3, #1
 800567a:	d101      	bne.n	8005680 <HAL_TIM_ConfigClockSource+0x1c>
 800567c:	2302      	movs	r3, #2
 800567e:	e0b4      	b.n	80057ea <HAL_TIM_ConfigClockSource+0x186>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2202      	movs	r2, #2
 800568c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800569e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056b8:	d03e      	beq.n	8005738 <HAL_TIM_ConfigClockSource+0xd4>
 80056ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056be:	f200 8087 	bhi.w	80057d0 <HAL_TIM_ConfigClockSource+0x16c>
 80056c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056c6:	f000 8086 	beq.w	80057d6 <HAL_TIM_ConfigClockSource+0x172>
 80056ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ce:	d87f      	bhi.n	80057d0 <HAL_TIM_ConfigClockSource+0x16c>
 80056d0:	2b70      	cmp	r3, #112	; 0x70
 80056d2:	d01a      	beq.n	800570a <HAL_TIM_ConfigClockSource+0xa6>
 80056d4:	2b70      	cmp	r3, #112	; 0x70
 80056d6:	d87b      	bhi.n	80057d0 <HAL_TIM_ConfigClockSource+0x16c>
 80056d8:	2b60      	cmp	r3, #96	; 0x60
 80056da:	d050      	beq.n	800577e <HAL_TIM_ConfigClockSource+0x11a>
 80056dc:	2b60      	cmp	r3, #96	; 0x60
 80056de:	d877      	bhi.n	80057d0 <HAL_TIM_ConfigClockSource+0x16c>
 80056e0:	2b50      	cmp	r3, #80	; 0x50
 80056e2:	d03c      	beq.n	800575e <HAL_TIM_ConfigClockSource+0xfa>
 80056e4:	2b50      	cmp	r3, #80	; 0x50
 80056e6:	d873      	bhi.n	80057d0 <HAL_TIM_ConfigClockSource+0x16c>
 80056e8:	2b40      	cmp	r3, #64	; 0x40
 80056ea:	d058      	beq.n	800579e <HAL_TIM_ConfigClockSource+0x13a>
 80056ec:	2b40      	cmp	r3, #64	; 0x40
 80056ee:	d86f      	bhi.n	80057d0 <HAL_TIM_ConfigClockSource+0x16c>
 80056f0:	2b30      	cmp	r3, #48	; 0x30
 80056f2:	d064      	beq.n	80057be <HAL_TIM_ConfigClockSource+0x15a>
 80056f4:	2b30      	cmp	r3, #48	; 0x30
 80056f6:	d86b      	bhi.n	80057d0 <HAL_TIM_ConfigClockSource+0x16c>
 80056f8:	2b20      	cmp	r3, #32
 80056fa:	d060      	beq.n	80057be <HAL_TIM_ConfigClockSource+0x15a>
 80056fc:	2b20      	cmp	r3, #32
 80056fe:	d867      	bhi.n	80057d0 <HAL_TIM_ConfigClockSource+0x16c>
 8005700:	2b00      	cmp	r3, #0
 8005702:	d05c      	beq.n	80057be <HAL_TIM_ConfigClockSource+0x15a>
 8005704:	2b10      	cmp	r3, #16
 8005706:	d05a      	beq.n	80057be <HAL_TIM_ConfigClockSource+0x15a>
 8005708:	e062      	b.n	80057d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6818      	ldr	r0, [r3, #0]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	6899      	ldr	r1, [r3, #8]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	685a      	ldr	r2, [r3, #4]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	f000 fbc4 	bl	8005ea6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800572c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	609a      	str	r2, [r3, #8]
      break;
 8005736:	e04f      	b.n	80057d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6818      	ldr	r0, [r3, #0]
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	6899      	ldr	r1, [r3, #8]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	f000 fbad 	bl	8005ea6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689a      	ldr	r2, [r3, #8]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800575a:	609a      	str	r2, [r3, #8]
      break;
 800575c:	e03c      	b.n	80057d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6818      	ldr	r0, [r3, #0]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	6859      	ldr	r1, [r3, #4]
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	461a      	mov	r2, r3
 800576c:	f000 fb21 	bl	8005db2 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2150      	movs	r1, #80	; 0x50
 8005776:	4618      	mov	r0, r3
 8005778:	f000 fb7a 	bl	8005e70 <TIM_ITRx_SetConfig>
      break;
 800577c:	e02c      	b.n	80057d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6818      	ldr	r0, [r3, #0]
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	6859      	ldr	r1, [r3, #4]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	461a      	mov	r2, r3
 800578c:	f000 fb40 	bl	8005e10 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2160      	movs	r1, #96	; 0x60
 8005796:	4618      	mov	r0, r3
 8005798:	f000 fb6a 	bl	8005e70 <TIM_ITRx_SetConfig>
      break;
 800579c:	e01c      	b.n	80057d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6818      	ldr	r0, [r3, #0]
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	6859      	ldr	r1, [r3, #4]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	461a      	mov	r2, r3
 80057ac:	f000 fb01 	bl	8005db2 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2140      	movs	r1, #64	; 0x40
 80057b6:	4618      	mov	r0, r3
 80057b8:	f000 fb5a 	bl	8005e70 <TIM_ITRx_SetConfig>
      break;
 80057bc:	e00c      	b.n	80057d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4619      	mov	r1, r3
 80057c8:	4610      	mov	r0, r2
 80057ca:	f000 fb51 	bl	8005e70 <TIM_ITRx_SetConfig>
      break;
 80057ce:	e003      	b.n	80057d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	73fb      	strb	r3, [r7, #15]
      break;
 80057d4:	e000      	b.n	80057d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80057d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b082      	sub	sp, #8
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
 80057fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005802:	2b01      	cmp	r3, #1
 8005804:	d101      	bne.n	800580a <HAL_TIM_SlaveConfigSynchro+0x18>
 8005806:	2302      	movs	r3, #2
 8005808:	e031      	b.n	800586e <HAL_TIM_SlaveConfigSynchro+0x7c>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2202      	movs	r2, #2
 8005816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800581a:	6839      	ldr	r1, [r7, #0]
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 fa37 	bl	8005c90 <TIM_SlaveTimer_SetConfig>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d009      	beq.n	800583c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e018      	b.n	800586e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68da      	ldr	r2, [r3, #12]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800584a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68da      	ldr	r2, [r3, #12]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800585a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3708      	adds	r7, #8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
	...

08005878 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a34      	ldr	r2, [pc, #208]	; (800595c <TIM_Base_SetConfig+0xe4>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d00f      	beq.n	80058b0 <TIM_Base_SetConfig+0x38>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005896:	d00b      	beq.n	80058b0 <TIM_Base_SetConfig+0x38>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a31      	ldr	r2, [pc, #196]	; (8005960 <TIM_Base_SetConfig+0xe8>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d007      	beq.n	80058b0 <TIM_Base_SetConfig+0x38>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a30      	ldr	r2, [pc, #192]	; (8005964 <TIM_Base_SetConfig+0xec>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d003      	beq.n	80058b0 <TIM_Base_SetConfig+0x38>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a2f      	ldr	r2, [pc, #188]	; (8005968 <TIM_Base_SetConfig+0xf0>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d108      	bne.n	80058c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	4313      	orrs	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a25      	ldr	r2, [pc, #148]	; (800595c <TIM_Base_SetConfig+0xe4>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d01b      	beq.n	8005902 <TIM_Base_SetConfig+0x8a>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058d0:	d017      	beq.n	8005902 <TIM_Base_SetConfig+0x8a>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a22      	ldr	r2, [pc, #136]	; (8005960 <TIM_Base_SetConfig+0xe8>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d013      	beq.n	8005902 <TIM_Base_SetConfig+0x8a>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a21      	ldr	r2, [pc, #132]	; (8005964 <TIM_Base_SetConfig+0xec>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d00f      	beq.n	8005902 <TIM_Base_SetConfig+0x8a>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a20      	ldr	r2, [pc, #128]	; (8005968 <TIM_Base_SetConfig+0xf0>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d00b      	beq.n	8005902 <TIM_Base_SetConfig+0x8a>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a1f      	ldr	r2, [pc, #124]	; (800596c <TIM_Base_SetConfig+0xf4>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d007      	beq.n	8005902 <TIM_Base_SetConfig+0x8a>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a1e      	ldr	r2, [pc, #120]	; (8005970 <TIM_Base_SetConfig+0xf8>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d003      	beq.n	8005902 <TIM_Base_SetConfig+0x8a>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a1d      	ldr	r2, [pc, #116]	; (8005974 <TIM_Base_SetConfig+0xfc>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d108      	bne.n	8005914 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005908:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	4313      	orrs	r3, r2
 8005912:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	4313      	orrs	r3, r2
 8005920:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	689a      	ldr	r2, [r3, #8]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a08      	ldr	r2, [pc, #32]	; (800595c <TIM_Base_SetConfig+0xe4>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d103      	bne.n	8005948 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	691a      	ldr	r2, [r3, #16]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	615a      	str	r2, [r3, #20]
}
 800594e:	bf00      	nop
 8005950:	3714      	adds	r7, #20
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	40010000 	.word	0x40010000
 8005960:	40000400 	.word	0x40000400
 8005964:	40000800 	.word	0x40000800
 8005968:	40000c00 	.word	0x40000c00
 800596c:	40014000 	.word	0x40014000
 8005970:	40014400 	.word	0x40014400
 8005974:	40014800 	.word	0x40014800

08005978 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005978:	b480      	push	{r7}
 800597a:	b087      	sub	sp, #28
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	f023 0201 	bic.w	r2, r3, #1
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f023 0303 	bic.w	r3, r3, #3
 80059ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	f023 0302 	bic.w	r3, r3, #2
 80059c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a1c      	ldr	r2, [pc, #112]	; (8005a40 <TIM_OC1_SetConfig+0xc8>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d10c      	bne.n	80059ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	f023 0308 	bic.w	r3, r3, #8
 80059da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	f023 0304 	bic.w	r3, r3, #4
 80059ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a13      	ldr	r2, [pc, #76]	; (8005a40 <TIM_OC1_SetConfig+0xc8>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d111      	bne.n	8005a1a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	685a      	ldr	r2, [r3, #4]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	621a      	str	r2, [r3, #32]
}
 8005a34:	bf00      	nop
 8005a36:	371c      	adds	r7, #28
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr
 8005a40:	40010000 	.word	0x40010000

08005a44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b087      	sub	sp, #28
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	f023 0210 	bic.w	r2, r3, #16
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	021b      	lsls	r3, r3, #8
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f023 0320 	bic.w	r3, r3, #32
 8005a8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	011b      	lsls	r3, r3, #4
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a1e      	ldr	r2, [pc, #120]	; (8005b18 <TIM_OC2_SetConfig+0xd4>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d10d      	bne.n	8005ac0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	011b      	lsls	r3, r3, #4
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005abe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a15      	ldr	r2, [pc, #84]	; (8005b18 <TIM_OC2_SetConfig+0xd4>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d113      	bne.n	8005af0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ace:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ad6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	695b      	ldr	r3, [r3, #20]
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	621a      	str	r2, [r3, #32]
}
 8005b0a:	bf00      	nop
 8005b0c:	371c      	adds	r7, #28
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	40010000 	.word	0x40010000

08005b1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b087      	sub	sp, #28
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	69db      	ldr	r3, [r3, #28]
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f023 0303 	bic.w	r3, r3, #3
 8005b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	021b      	lsls	r3, r3, #8
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a1d      	ldr	r2, [pc, #116]	; (8005bec <TIM_OC3_SetConfig+0xd0>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d10d      	bne.n	8005b96 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	021b      	lsls	r3, r3, #8
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a14      	ldr	r2, [pc, #80]	; (8005bec <TIM_OC3_SetConfig+0xd0>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d113      	bne.n	8005bc6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ba4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	011b      	lsls	r3, r3, #4
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	011b      	lsls	r3, r3, #4
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	621a      	str	r2, [r3, #32]
}
 8005be0:	bf00      	nop
 8005be2:	371c      	adds	r7, #28
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr
 8005bec:	40010000 	.word	0x40010000

08005bf0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b087      	sub	sp, #28
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	021b      	lsls	r3, r3, #8
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	031b      	lsls	r3, r3, #12
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a10      	ldr	r2, [pc, #64]	; (8005c8c <TIM_OC4_SetConfig+0x9c>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d109      	bne.n	8005c64 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	019b      	lsls	r3, r3, #6
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	621a      	str	r2, [r3, #32]
}
 8005c7e:	bf00      	nop
 8005c80:	371c      	adds	r7, #28
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	40010000 	.word	0x40010000

08005c90 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cac:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	f023 0307 	bic.w	r3, r3, #7
 8005cbe:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	2b70      	cmp	r3, #112	; 0x70
 8005cd8:	d01a      	beq.n	8005d10 <TIM_SlaveTimer_SetConfig+0x80>
 8005cda:	2b70      	cmp	r3, #112	; 0x70
 8005cdc:	d860      	bhi.n	8005da0 <TIM_SlaveTimer_SetConfig+0x110>
 8005cde:	2b60      	cmp	r3, #96	; 0x60
 8005ce0:	d054      	beq.n	8005d8c <TIM_SlaveTimer_SetConfig+0xfc>
 8005ce2:	2b60      	cmp	r3, #96	; 0x60
 8005ce4:	d85c      	bhi.n	8005da0 <TIM_SlaveTimer_SetConfig+0x110>
 8005ce6:	2b50      	cmp	r3, #80	; 0x50
 8005ce8:	d046      	beq.n	8005d78 <TIM_SlaveTimer_SetConfig+0xe8>
 8005cea:	2b50      	cmp	r3, #80	; 0x50
 8005cec:	d858      	bhi.n	8005da0 <TIM_SlaveTimer_SetConfig+0x110>
 8005cee:	2b40      	cmp	r3, #64	; 0x40
 8005cf0:	d019      	beq.n	8005d26 <TIM_SlaveTimer_SetConfig+0x96>
 8005cf2:	2b40      	cmp	r3, #64	; 0x40
 8005cf4:	d854      	bhi.n	8005da0 <TIM_SlaveTimer_SetConfig+0x110>
 8005cf6:	2b30      	cmp	r3, #48	; 0x30
 8005cf8:	d055      	beq.n	8005da6 <TIM_SlaveTimer_SetConfig+0x116>
 8005cfa:	2b30      	cmp	r3, #48	; 0x30
 8005cfc:	d850      	bhi.n	8005da0 <TIM_SlaveTimer_SetConfig+0x110>
 8005cfe:	2b20      	cmp	r3, #32
 8005d00:	d051      	beq.n	8005da6 <TIM_SlaveTimer_SetConfig+0x116>
 8005d02:	2b20      	cmp	r3, #32
 8005d04:	d84c      	bhi.n	8005da0 <TIM_SlaveTimer_SetConfig+0x110>
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d04d      	beq.n	8005da6 <TIM_SlaveTimer_SetConfig+0x116>
 8005d0a:	2b10      	cmp	r3, #16
 8005d0c:	d04b      	beq.n	8005da6 <TIM_SlaveTimer_SetConfig+0x116>
 8005d0e:	e047      	b.n	8005da0 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6818      	ldr	r0, [r3, #0]
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	68d9      	ldr	r1, [r3, #12]
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	689a      	ldr	r2, [r3, #8]
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	f000 f8c1 	bl	8005ea6 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8005d24:	e040      	b.n	8005da8 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2b05      	cmp	r3, #5
 8005d2c:	d101      	bne.n	8005d32 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e03b      	b.n	8005daa <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6a1b      	ldr	r3, [r3, #32]
 8005d38:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	6a1a      	ldr	r2, [r3, #32]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f022 0201 	bic.w	r2, r2, #1
 8005d48:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d58:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	011b      	lsls	r3, r3, #4
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	621a      	str	r2, [r3, #32]
      break;
 8005d76:	e017      	b.n	8005da8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6818      	ldr	r0, [r3, #0]
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	6899      	ldr	r1, [r3, #8]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	461a      	mov	r2, r3
 8005d86:	f000 f814 	bl	8005db2 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005d8a:	e00d      	b.n	8005da8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6818      	ldr	r0, [r3, #0]
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	6899      	ldr	r1, [r3, #8]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	461a      	mov	r2, r3
 8005d9a:	f000 f839 	bl	8005e10 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005d9e:	e003      	b.n	8005da8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	75fb      	strb	r3, [r7, #23]
      break;
 8005da4:	e000      	b.n	8005da8 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8005da6:	bf00      	nop
  }

  return status;
 8005da8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3718      	adds	r7, #24
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b087      	sub	sp, #28
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	60f8      	str	r0, [r7, #12]
 8005dba:	60b9      	str	r1, [r7, #8]
 8005dbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6a1b      	ldr	r3, [r3, #32]
 8005dc8:	f023 0201 	bic.w	r2, r3, #1
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ddc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	011b      	lsls	r3, r3, #4
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	f023 030a 	bic.w	r3, r3, #10
 8005dee:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	697a      	ldr	r2, [r7, #20]
 8005e02:	621a      	str	r2, [r3, #32]
}
 8005e04:	bf00      	nop
 8005e06:	371c      	adds	r7, #28
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b087      	sub	sp, #28
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6a1b      	ldr	r3, [r3, #32]
 8005e20:	f023 0210 	bic.w	r2, r3, #16
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e3a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	031b      	lsls	r3, r3, #12
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	011b      	lsls	r3, r3, #4
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	621a      	str	r2, [r3, #32]
}
 8005e64:	bf00      	nop
 8005e66:	371c      	adds	r7, #28
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e86:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e88:	683a      	ldr	r2, [r7, #0]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	f043 0307 	orr.w	r3, r3, #7
 8005e92:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	609a      	str	r2, [r3, #8]
}
 8005e9a:	bf00      	nop
 8005e9c:	3714      	adds	r7, #20
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr

08005ea6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b087      	sub	sp, #28
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	60f8      	str	r0, [r7, #12]
 8005eae:	60b9      	str	r1, [r7, #8]
 8005eb0:	607a      	str	r2, [r7, #4]
 8005eb2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ec0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	021a      	lsls	r2, r3, #8
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	697a      	ldr	r2, [r7, #20]
 8005ed8:	609a      	str	r2, [r3, #8]
}
 8005eda:	bf00      	nop
 8005edc:	371c      	adds	r7, #28
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr

08005ee6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	b087      	sub	sp, #28
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	60f8      	str	r0, [r7, #12]
 8005eee:	60b9      	str	r1, [r7, #8]
 8005ef0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	f003 031f 	and.w	r3, r3, #31
 8005ef8:	2201      	movs	r2, #1
 8005efa:	fa02 f303 	lsl.w	r3, r2, r3
 8005efe:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6a1a      	ldr	r2, [r3, #32]
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	43db      	mvns	r3, r3
 8005f08:	401a      	ands	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6a1a      	ldr	r2, [r3, #32]
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	f003 031f 	and.w	r3, r3, #31
 8005f18:	6879      	ldr	r1, [r7, #4]
 8005f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f1e:	431a      	orrs	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	621a      	str	r2, [r3, #32]
}
 8005f24:	bf00      	nop
 8005f26:	371c      	adds	r7, #28
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d101      	bne.n	8005f48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f44:	2302      	movs	r3, #2
 8005f46:	e050      	b.n	8005fea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2202      	movs	r2, #2
 8005f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a1c      	ldr	r2, [pc, #112]	; (8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d018      	beq.n	8005fbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f94:	d013      	beq.n	8005fbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a18      	ldr	r2, [pc, #96]	; (8005ffc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d00e      	beq.n	8005fbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a16      	ldr	r2, [pc, #88]	; (8006000 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d009      	beq.n	8005fbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a15      	ldr	r2, [pc, #84]	; (8006004 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d004      	beq.n	8005fbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a13      	ldr	r2, [pc, #76]	; (8006008 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d10c      	bne.n	8005fd8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	68ba      	ldr	r2, [r7, #8]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3714      	adds	r7, #20
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	40010000 	.word	0x40010000
 8005ffc:	40000400 	.word	0x40000400
 8006000:	40000800 	.word	0x40000800
 8006004:	40000c00 	.word	0x40000c00
 8006008:	40014000 	.word	0x40014000

0800600c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006016:	2300      	movs	r3, #0
 8006018:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006020:	2b01      	cmp	r3, #1
 8006022:	d101      	bne.n	8006028 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006024:	2302      	movs	r3, #2
 8006026:	e03d      	b.n	80060a4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	4313      	orrs	r3, r2
 800603c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	4313      	orrs	r3, r2
 800604a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	4313      	orrs	r3, r2
 8006058:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4313      	orrs	r3, r2
 8006066:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	4313      	orrs	r3, r2
 8006074:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	4313      	orrs	r3, r2
 8006082:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	4313      	orrs	r3, r2
 8006090:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3714      	adds	r7, #20
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d101      	bne.n	80060c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e03f      	b.n	8006142 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d106      	bne.n	80060dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f7fb fbfa 	bl	80018d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2224      	movs	r2, #36	; 0x24
 80060e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68da      	ldr	r2, [r3, #12]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 f929 	bl	800634c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	691a      	ldr	r2, [r3, #16]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006108:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	695a      	ldr	r2, [r3, #20]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006118:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68da      	ldr	r2, [r3, #12]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006128:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2220      	movs	r2, #32
 8006134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2220      	movs	r2, #32
 800613c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3708      	adds	r7, #8
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b08a      	sub	sp, #40	; 0x28
 800614e:	af02      	add	r7, sp, #8
 8006150:	60f8      	str	r0, [r7, #12]
 8006152:	60b9      	str	r1, [r7, #8]
 8006154:	603b      	str	r3, [r7, #0]
 8006156:	4613      	mov	r3, r2
 8006158:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800615a:	2300      	movs	r3, #0
 800615c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006164:	b2db      	uxtb	r3, r3
 8006166:	2b20      	cmp	r3, #32
 8006168:	d17c      	bne.n	8006264 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d002      	beq.n	8006176 <HAL_UART_Transmit+0x2c>
 8006170:	88fb      	ldrh	r3, [r7, #6]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d101      	bne.n	800617a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e075      	b.n	8006266 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006180:	2b01      	cmp	r3, #1
 8006182:	d101      	bne.n	8006188 <HAL_UART_Transmit+0x3e>
 8006184:	2302      	movs	r3, #2
 8006186:	e06e      	b.n	8006266 <HAL_UART_Transmit+0x11c>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2221      	movs	r2, #33	; 0x21
 800619a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800619e:	f7fb fc6f 	bl	8001a80 <HAL_GetTick>
 80061a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	88fa      	ldrh	r2, [r7, #6]
 80061a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	88fa      	ldrh	r2, [r7, #6]
 80061ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b8:	d108      	bne.n	80061cc <HAL_UART_Transmit+0x82>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d104      	bne.n	80061cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80061c2:	2300      	movs	r3, #0
 80061c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	61bb      	str	r3, [r7, #24]
 80061ca:	e003      	b.n	80061d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061d0:	2300      	movs	r3, #0
 80061d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80061dc:	e02a      	b.n	8006234 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	9300      	str	r3, [sp, #0]
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	2200      	movs	r2, #0
 80061e6:	2180      	movs	r1, #128	; 0x80
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f000 f840 	bl	800626e <UART_WaitOnFlagUntilTimeout>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d001      	beq.n	80061f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80061f4:	2303      	movs	r3, #3
 80061f6:	e036      	b.n	8006266 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10b      	bne.n	8006216 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	881b      	ldrh	r3, [r3, #0]
 8006202:	461a      	mov	r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800620c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	3302      	adds	r3, #2
 8006212:	61bb      	str	r3, [r7, #24]
 8006214:	e007      	b.n	8006226 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	781a      	ldrb	r2, [r3, #0]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	3301      	adds	r3, #1
 8006224:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800622a:	b29b      	uxth	r3, r3
 800622c:	3b01      	subs	r3, #1
 800622e:	b29a      	uxth	r2, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006238:	b29b      	uxth	r3, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1cf      	bne.n	80061de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	9300      	str	r3, [sp, #0]
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	2200      	movs	r2, #0
 8006246:	2140      	movs	r1, #64	; 0x40
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f000 f810 	bl	800626e <UART_WaitOnFlagUntilTimeout>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e006      	b.n	8006266 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2220      	movs	r2, #32
 800625c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006260:	2300      	movs	r3, #0
 8006262:	e000      	b.n	8006266 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006264:	2302      	movs	r3, #2
  }
}
 8006266:	4618      	mov	r0, r3
 8006268:	3720      	adds	r7, #32
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}

0800626e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b090      	sub	sp, #64	; 0x40
 8006272:	af00      	add	r7, sp, #0
 8006274:	60f8      	str	r0, [r7, #12]
 8006276:	60b9      	str	r1, [r7, #8]
 8006278:	603b      	str	r3, [r7, #0]
 800627a:	4613      	mov	r3, r2
 800627c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800627e:	e050      	b.n	8006322 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006280:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006282:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006286:	d04c      	beq.n	8006322 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006288:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800628a:	2b00      	cmp	r3, #0
 800628c:	d007      	beq.n	800629e <UART_WaitOnFlagUntilTimeout+0x30>
 800628e:	f7fb fbf7 	bl	8001a80 <HAL_GetTick>
 8006292:	4602      	mov	r2, r0
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800629a:	429a      	cmp	r2, r3
 800629c:	d241      	bcs.n	8006322 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	330c      	adds	r3, #12
 80062a4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a8:	e853 3f00 	ldrex	r3, [r3]
 80062ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	330c      	adds	r3, #12
 80062bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80062be:	637a      	str	r2, [r7, #52]	; 0x34
 80062c0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062c6:	e841 2300 	strex	r3, r2, [r1]
 80062ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80062cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1e5      	bne.n	800629e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	3314      	adds	r3, #20
 80062d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	e853 3f00 	ldrex	r3, [r3]
 80062e0:	613b      	str	r3, [r7, #16]
   return(result);
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	f023 0301 	bic.w	r3, r3, #1
 80062e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	3314      	adds	r3, #20
 80062f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062f2:	623a      	str	r2, [r7, #32]
 80062f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f6:	69f9      	ldr	r1, [r7, #28]
 80062f8:	6a3a      	ldr	r2, [r7, #32]
 80062fa:	e841 2300 	strex	r3, r2, [r1]
 80062fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1e5      	bne.n	80062d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2220      	movs	r2, #32
 800630a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2220      	movs	r2, #32
 8006312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e00f      	b.n	8006342 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	4013      	ands	r3, r2
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	429a      	cmp	r2, r3
 8006330:	bf0c      	ite	eq
 8006332:	2301      	moveq	r3, #1
 8006334:	2300      	movne	r3, #0
 8006336:	b2db      	uxtb	r3, r3
 8006338:	461a      	mov	r2, r3
 800633a:	79fb      	ldrb	r3, [r7, #7]
 800633c:	429a      	cmp	r2, r3
 800633e:	d09f      	beq.n	8006280 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3740      	adds	r7, #64	; 0x40
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
	...

0800634c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800634c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006350:	b0c0      	sub	sp, #256	; 0x100
 8006352:	af00      	add	r7, sp, #0
 8006354:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006368:	68d9      	ldr	r1, [r3, #12]
 800636a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	ea40 0301 	orr.w	r3, r0, r1
 8006374:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800637a:	689a      	ldr	r2, [r3, #8]
 800637c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	431a      	orrs	r2, r3
 8006384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	431a      	orrs	r2, r3
 800638c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006390:	69db      	ldr	r3, [r3, #28]
 8006392:	4313      	orrs	r3, r2
 8006394:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80063a4:	f021 010c 	bic.w	r1, r1, #12
 80063a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80063b2:	430b      	orrs	r3, r1
 80063b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80063c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063c6:	6999      	ldr	r1, [r3, #24]
 80063c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	ea40 0301 	orr.w	r3, r0, r1
 80063d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80063d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	4b8f      	ldr	r3, [pc, #572]	; (8006618 <UART_SetConfig+0x2cc>)
 80063dc:	429a      	cmp	r2, r3
 80063de:	d005      	beq.n	80063ec <UART_SetConfig+0xa0>
 80063e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	4b8d      	ldr	r3, [pc, #564]	; (800661c <UART_SetConfig+0x2d0>)
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d104      	bne.n	80063f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80063ec:	f7fc fe3a 	bl	8003064 <HAL_RCC_GetPCLK2Freq>
 80063f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80063f4:	e003      	b.n	80063fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80063f6:	f7fc fe21 	bl	800303c <HAL_RCC_GetPCLK1Freq>
 80063fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006402:	69db      	ldr	r3, [r3, #28]
 8006404:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006408:	f040 810c 	bne.w	8006624 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800640c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006410:	2200      	movs	r2, #0
 8006412:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006416:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800641a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800641e:	4622      	mov	r2, r4
 8006420:	462b      	mov	r3, r5
 8006422:	1891      	adds	r1, r2, r2
 8006424:	65b9      	str	r1, [r7, #88]	; 0x58
 8006426:	415b      	adcs	r3, r3
 8006428:	65fb      	str	r3, [r7, #92]	; 0x5c
 800642a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800642e:	4621      	mov	r1, r4
 8006430:	eb12 0801 	adds.w	r8, r2, r1
 8006434:	4629      	mov	r1, r5
 8006436:	eb43 0901 	adc.w	r9, r3, r1
 800643a:	f04f 0200 	mov.w	r2, #0
 800643e:	f04f 0300 	mov.w	r3, #0
 8006442:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006446:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800644a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800644e:	4690      	mov	r8, r2
 8006450:	4699      	mov	r9, r3
 8006452:	4623      	mov	r3, r4
 8006454:	eb18 0303 	adds.w	r3, r8, r3
 8006458:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800645c:	462b      	mov	r3, r5
 800645e:	eb49 0303 	adc.w	r3, r9, r3
 8006462:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006472:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006476:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800647a:	460b      	mov	r3, r1
 800647c:	18db      	adds	r3, r3, r3
 800647e:	653b      	str	r3, [r7, #80]	; 0x50
 8006480:	4613      	mov	r3, r2
 8006482:	eb42 0303 	adc.w	r3, r2, r3
 8006486:	657b      	str	r3, [r7, #84]	; 0x54
 8006488:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800648c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006490:	f7f9 fea2 	bl	80001d8 <__aeabi_uldivmod>
 8006494:	4602      	mov	r2, r0
 8006496:	460b      	mov	r3, r1
 8006498:	4b61      	ldr	r3, [pc, #388]	; (8006620 <UART_SetConfig+0x2d4>)
 800649a:	fba3 2302 	umull	r2, r3, r3, r2
 800649e:	095b      	lsrs	r3, r3, #5
 80064a0:	011c      	lsls	r4, r3, #4
 80064a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064a6:	2200      	movs	r2, #0
 80064a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80064b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80064b4:	4642      	mov	r2, r8
 80064b6:	464b      	mov	r3, r9
 80064b8:	1891      	adds	r1, r2, r2
 80064ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80064bc:	415b      	adcs	r3, r3
 80064be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80064c4:	4641      	mov	r1, r8
 80064c6:	eb12 0a01 	adds.w	sl, r2, r1
 80064ca:	4649      	mov	r1, r9
 80064cc:	eb43 0b01 	adc.w	fp, r3, r1
 80064d0:	f04f 0200 	mov.w	r2, #0
 80064d4:	f04f 0300 	mov.w	r3, #0
 80064d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80064dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80064e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064e4:	4692      	mov	sl, r2
 80064e6:	469b      	mov	fp, r3
 80064e8:	4643      	mov	r3, r8
 80064ea:	eb1a 0303 	adds.w	r3, sl, r3
 80064ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064f2:	464b      	mov	r3, r9
 80064f4:	eb4b 0303 	adc.w	r3, fp, r3
 80064f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80064fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006508:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800650c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006510:	460b      	mov	r3, r1
 8006512:	18db      	adds	r3, r3, r3
 8006514:	643b      	str	r3, [r7, #64]	; 0x40
 8006516:	4613      	mov	r3, r2
 8006518:	eb42 0303 	adc.w	r3, r2, r3
 800651c:	647b      	str	r3, [r7, #68]	; 0x44
 800651e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006522:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006526:	f7f9 fe57 	bl	80001d8 <__aeabi_uldivmod>
 800652a:	4602      	mov	r2, r0
 800652c:	460b      	mov	r3, r1
 800652e:	4611      	mov	r1, r2
 8006530:	4b3b      	ldr	r3, [pc, #236]	; (8006620 <UART_SetConfig+0x2d4>)
 8006532:	fba3 2301 	umull	r2, r3, r3, r1
 8006536:	095b      	lsrs	r3, r3, #5
 8006538:	2264      	movs	r2, #100	; 0x64
 800653a:	fb02 f303 	mul.w	r3, r2, r3
 800653e:	1acb      	subs	r3, r1, r3
 8006540:	00db      	lsls	r3, r3, #3
 8006542:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006546:	4b36      	ldr	r3, [pc, #216]	; (8006620 <UART_SetConfig+0x2d4>)
 8006548:	fba3 2302 	umull	r2, r3, r3, r2
 800654c:	095b      	lsrs	r3, r3, #5
 800654e:	005b      	lsls	r3, r3, #1
 8006550:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006554:	441c      	add	r4, r3
 8006556:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800655a:	2200      	movs	r2, #0
 800655c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006560:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006564:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006568:	4642      	mov	r2, r8
 800656a:	464b      	mov	r3, r9
 800656c:	1891      	adds	r1, r2, r2
 800656e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006570:	415b      	adcs	r3, r3
 8006572:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006574:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006578:	4641      	mov	r1, r8
 800657a:	1851      	adds	r1, r2, r1
 800657c:	6339      	str	r1, [r7, #48]	; 0x30
 800657e:	4649      	mov	r1, r9
 8006580:	414b      	adcs	r3, r1
 8006582:	637b      	str	r3, [r7, #52]	; 0x34
 8006584:	f04f 0200 	mov.w	r2, #0
 8006588:	f04f 0300 	mov.w	r3, #0
 800658c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006590:	4659      	mov	r1, fp
 8006592:	00cb      	lsls	r3, r1, #3
 8006594:	4651      	mov	r1, sl
 8006596:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800659a:	4651      	mov	r1, sl
 800659c:	00ca      	lsls	r2, r1, #3
 800659e:	4610      	mov	r0, r2
 80065a0:	4619      	mov	r1, r3
 80065a2:	4603      	mov	r3, r0
 80065a4:	4642      	mov	r2, r8
 80065a6:	189b      	adds	r3, r3, r2
 80065a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065ac:	464b      	mov	r3, r9
 80065ae:	460a      	mov	r2, r1
 80065b0:	eb42 0303 	adc.w	r3, r2, r3
 80065b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80065b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80065c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80065c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80065cc:	460b      	mov	r3, r1
 80065ce:	18db      	adds	r3, r3, r3
 80065d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80065d2:	4613      	mov	r3, r2
 80065d4:	eb42 0303 	adc.w	r3, r2, r3
 80065d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80065de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80065e2:	f7f9 fdf9 	bl	80001d8 <__aeabi_uldivmod>
 80065e6:	4602      	mov	r2, r0
 80065e8:	460b      	mov	r3, r1
 80065ea:	4b0d      	ldr	r3, [pc, #52]	; (8006620 <UART_SetConfig+0x2d4>)
 80065ec:	fba3 1302 	umull	r1, r3, r3, r2
 80065f0:	095b      	lsrs	r3, r3, #5
 80065f2:	2164      	movs	r1, #100	; 0x64
 80065f4:	fb01 f303 	mul.w	r3, r1, r3
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	00db      	lsls	r3, r3, #3
 80065fc:	3332      	adds	r3, #50	; 0x32
 80065fe:	4a08      	ldr	r2, [pc, #32]	; (8006620 <UART_SetConfig+0x2d4>)
 8006600:	fba2 2303 	umull	r2, r3, r2, r3
 8006604:	095b      	lsrs	r3, r3, #5
 8006606:	f003 0207 	and.w	r2, r3, #7
 800660a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4422      	add	r2, r4
 8006612:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006614:	e105      	b.n	8006822 <UART_SetConfig+0x4d6>
 8006616:	bf00      	nop
 8006618:	40011000 	.word	0x40011000
 800661c:	40011400 	.word	0x40011400
 8006620:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006624:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006628:	2200      	movs	r2, #0
 800662a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800662e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006632:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006636:	4642      	mov	r2, r8
 8006638:	464b      	mov	r3, r9
 800663a:	1891      	adds	r1, r2, r2
 800663c:	6239      	str	r1, [r7, #32]
 800663e:	415b      	adcs	r3, r3
 8006640:	627b      	str	r3, [r7, #36]	; 0x24
 8006642:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006646:	4641      	mov	r1, r8
 8006648:	1854      	adds	r4, r2, r1
 800664a:	4649      	mov	r1, r9
 800664c:	eb43 0501 	adc.w	r5, r3, r1
 8006650:	f04f 0200 	mov.w	r2, #0
 8006654:	f04f 0300 	mov.w	r3, #0
 8006658:	00eb      	lsls	r3, r5, #3
 800665a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800665e:	00e2      	lsls	r2, r4, #3
 8006660:	4614      	mov	r4, r2
 8006662:	461d      	mov	r5, r3
 8006664:	4643      	mov	r3, r8
 8006666:	18e3      	adds	r3, r4, r3
 8006668:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800666c:	464b      	mov	r3, r9
 800666e:	eb45 0303 	adc.w	r3, r5, r3
 8006672:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006682:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006686:	f04f 0200 	mov.w	r2, #0
 800668a:	f04f 0300 	mov.w	r3, #0
 800668e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006692:	4629      	mov	r1, r5
 8006694:	008b      	lsls	r3, r1, #2
 8006696:	4621      	mov	r1, r4
 8006698:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800669c:	4621      	mov	r1, r4
 800669e:	008a      	lsls	r2, r1, #2
 80066a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80066a4:	f7f9 fd98 	bl	80001d8 <__aeabi_uldivmod>
 80066a8:	4602      	mov	r2, r0
 80066aa:	460b      	mov	r3, r1
 80066ac:	4b60      	ldr	r3, [pc, #384]	; (8006830 <UART_SetConfig+0x4e4>)
 80066ae:	fba3 2302 	umull	r2, r3, r3, r2
 80066b2:	095b      	lsrs	r3, r3, #5
 80066b4:	011c      	lsls	r4, r3, #4
 80066b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066ba:	2200      	movs	r2, #0
 80066bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80066c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80066c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80066c8:	4642      	mov	r2, r8
 80066ca:	464b      	mov	r3, r9
 80066cc:	1891      	adds	r1, r2, r2
 80066ce:	61b9      	str	r1, [r7, #24]
 80066d0:	415b      	adcs	r3, r3
 80066d2:	61fb      	str	r3, [r7, #28]
 80066d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066d8:	4641      	mov	r1, r8
 80066da:	1851      	adds	r1, r2, r1
 80066dc:	6139      	str	r1, [r7, #16]
 80066de:	4649      	mov	r1, r9
 80066e0:	414b      	adcs	r3, r1
 80066e2:	617b      	str	r3, [r7, #20]
 80066e4:	f04f 0200 	mov.w	r2, #0
 80066e8:	f04f 0300 	mov.w	r3, #0
 80066ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80066f0:	4659      	mov	r1, fp
 80066f2:	00cb      	lsls	r3, r1, #3
 80066f4:	4651      	mov	r1, sl
 80066f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066fa:	4651      	mov	r1, sl
 80066fc:	00ca      	lsls	r2, r1, #3
 80066fe:	4610      	mov	r0, r2
 8006700:	4619      	mov	r1, r3
 8006702:	4603      	mov	r3, r0
 8006704:	4642      	mov	r2, r8
 8006706:	189b      	adds	r3, r3, r2
 8006708:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800670c:	464b      	mov	r3, r9
 800670e:	460a      	mov	r2, r1
 8006710:	eb42 0303 	adc.w	r3, r2, r3
 8006714:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	67bb      	str	r3, [r7, #120]	; 0x78
 8006722:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006724:	f04f 0200 	mov.w	r2, #0
 8006728:	f04f 0300 	mov.w	r3, #0
 800672c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006730:	4649      	mov	r1, r9
 8006732:	008b      	lsls	r3, r1, #2
 8006734:	4641      	mov	r1, r8
 8006736:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800673a:	4641      	mov	r1, r8
 800673c:	008a      	lsls	r2, r1, #2
 800673e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006742:	f7f9 fd49 	bl	80001d8 <__aeabi_uldivmod>
 8006746:	4602      	mov	r2, r0
 8006748:	460b      	mov	r3, r1
 800674a:	4b39      	ldr	r3, [pc, #228]	; (8006830 <UART_SetConfig+0x4e4>)
 800674c:	fba3 1302 	umull	r1, r3, r3, r2
 8006750:	095b      	lsrs	r3, r3, #5
 8006752:	2164      	movs	r1, #100	; 0x64
 8006754:	fb01 f303 	mul.w	r3, r1, r3
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	011b      	lsls	r3, r3, #4
 800675c:	3332      	adds	r3, #50	; 0x32
 800675e:	4a34      	ldr	r2, [pc, #208]	; (8006830 <UART_SetConfig+0x4e4>)
 8006760:	fba2 2303 	umull	r2, r3, r2, r3
 8006764:	095b      	lsrs	r3, r3, #5
 8006766:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800676a:	441c      	add	r4, r3
 800676c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006770:	2200      	movs	r2, #0
 8006772:	673b      	str	r3, [r7, #112]	; 0x70
 8006774:	677a      	str	r2, [r7, #116]	; 0x74
 8006776:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800677a:	4642      	mov	r2, r8
 800677c:	464b      	mov	r3, r9
 800677e:	1891      	adds	r1, r2, r2
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	415b      	adcs	r3, r3
 8006784:	60fb      	str	r3, [r7, #12]
 8006786:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800678a:	4641      	mov	r1, r8
 800678c:	1851      	adds	r1, r2, r1
 800678e:	6039      	str	r1, [r7, #0]
 8006790:	4649      	mov	r1, r9
 8006792:	414b      	adcs	r3, r1
 8006794:	607b      	str	r3, [r7, #4]
 8006796:	f04f 0200 	mov.w	r2, #0
 800679a:	f04f 0300 	mov.w	r3, #0
 800679e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80067a2:	4659      	mov	r1, fp
 80067a4:	00cb      	lsls	r3, r1, #3
 80067a6:	4651      	mov	r1, sl
 80067a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067ac:	4651      	mov	r1, sl
 80067ae:	00ca      	lsls	r2, r1, #3
 80067b0:	4610      	mov	r0, r2
 80067b2:	4619      	mov	r1, r3
 80067b4:	4603      	mov	r3, r0
 80067b6:	4642      	mov	r2, r8
 80067b8:	189b      	adds	r3, r3, r2
 80067ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80067bc:	464b      	mov	r3, r9
 80067be:	460a      	mov	r2, r1
 80067c0:	eb42 0303 	adc.w	r3, r2, r3
 80067c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	663b      	str	r3, [r7, #96]	; 0x60
 80067d0:	667a      	str	r2, [r7, #100]	; 0x64
 80067d2:	f04f 0200 	mov.w	r2, #0
 80067d6:	f04f 0300 	mov.w	r3, #0
 80067da:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80067de:	4649      	mov	r1, r9
 80067e0:	008b      	lsls	r3, r1, #2
 80067e2:	4641      	mov	r1, r8
 80067e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067e8:	4641      	mov	r1, r8
 80067ea:	008a      	lsls	r2, r1, #2
 80067ec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80067f0:	f7f9 fcf2 	bl	80001d8 <__aeabi_uldivmod>
 80067f4:	4602      	mov	r2, r0
 80067f6:	460b      	mov	r3, r1
 80067f8:	4b0d      	ldr	r3, [pc, #52]	; (8006830 <UART_SetConfig+0x4e4>)
 80067fa:	fba3 1302 	umull	r1, r3, r3, r2
 80067fe:	095b      	lsrs	r3, r3, #5
 8006800:	2164      	movs	r1, #100	; 0x64
 8006802:	fb01 f303 	mul.w	r3, r1, r3
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	011b      	lsls	r3, r3, #4
 800680a:	3332      	adds	r3, #50	; 0x32
 800680c:	4a08      	ldr	r2, [pc, #32]	; (8006830 <UART_SetConfig+0x4e4>)
 800680e:	fba2 2303 	umull	r2, r3, r2, r3
 8006812:	095b      	lsrs	r3, r3, #5
 8006814:	f003 020f 	and.w	r2, r3, #15
 8006818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4422      	add	r2, r4
 8006820:	609a      	str	r2, [r3, #8]
}
 8006822:	bf00      	nop
 8006824:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006828:	46bd      	mov	sp, r7
 800682a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800682e:	bf00      	nop
 8006830:	51eb851f 	.word	0x51eb851f

08006834 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006834:	b084      	sub	sp, #16
 8006836:	b480      	push	{r7}
 8006838:	b085      	sub	sp, #20
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	f107 001c 	add.w	r0, r7, #28
 8006842:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006846:	2300      	movs	r3, #0
 8006848:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800684a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800684c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800684e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8006852:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006854:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006856:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800685a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800685c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800685e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	4313      	orrs	r3, r2
 8006864:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800686e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	431a      	orrs	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3714      	adds	r7, #20
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	b004      	add	sp, #16
 8006888:	4770      	bx	lr

0800688a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800688a:	b480      	push	{r7}
 800688c:	b083      	sub	sp, #12
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006898:	4618      	mov	r0, r3
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	370c      	adds	r7, #12
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr

080068c6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80068c6:	b480      	push	{r7}
 80068c8:	b083      	sub	sp, #12
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2203      	movs	r2, #3
 80068d2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	370c      	adds	r7, #12
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr

080068e2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80068e2:	b480      	push	{r7}
 80068e4:	b083      	sub	sp, #12
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0303 	and.w	r3, r3, #3
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	370c      	adds	r7, #12
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr

080068fe <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80068fe:	b480      	push	{r7}
 8006900:	b085      	sub	sp, #20
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
 8006906:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006908:	2300      	movs	r3, #0
 800690a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800691c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006922:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006928:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	4313      	orrs	r3, r2
 800692e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006938:	f023 030f 	bic.w	r3, r3, #15
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	431a      	orrs	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3714      	adds	r7, #20
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr

08006952 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006952:	b480      	push	{r7}
 8006954:	b083      	sub	sp, #12
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	b2db      	uxtb	r3, r3
}
 8006960:	4618      	mov	r0, r3
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800696c:	b480      	push	{r7}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	3314      	adds	r3, #20
 800697a:	461a      	mov	r2, r3
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	4413      	add	r3, r2
 8006980:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
}  
 8006986:	4618      	mov	r0, r3
 8006988:	3714      	adds	r7, #20
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006992:	b480      	push	{r7}
 8006994:	b085      	sub	sp, #20
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
 800699a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800699c:	2300      	movs	r3, #0
 800699e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	685a      	ldr	r2, [r3, #4]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80069b8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80069be:	431a      	orrs	r2, r3
                       Data->DPSM);
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80069c4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d0:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	431a      	orrs	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80069dc:	2300      	movs	r3, #0

}
 80069de:	4618      	mov	r0, r3
 80069e0:	3714      	adds	r7, #20
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b088      	sub	sp, #32
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80069f8:	2310      	movs	r3, #16
 80069fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80069fc:	2340      	movs	r3, #64	; 0x40
 80069fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a00:	2300      	movs	r3, #0
 8006a02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a08:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a0a:	f107 0308 	add.w	r3, r7, #8
 8006a0e:	4619      	mov	r1, r3
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f7ff ff74 	bl	80068fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a1a:	2110      	movs	r1, #16
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 fa19 	bl	8006e54 <SDMMC_GetCmdResp1>
 8006a22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a24:	69fb      	ldr	r3, [r7, #28]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3720      	adds	r7, #32
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b088      	sub	sp, #32
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
 8006a36:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006a3c:	2311      	movs	r3, #17
 8006a3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a40:	2340      	movs	r3, #64	; 0x40
 8006a42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a44:	2300      	movs	r3, #0
 8006a46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a4c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a4e:	f107 0308 	add.w	r3, r7, #8
 8006a52:	4619      	mov	r1, r3
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f7ff ff52 	bl	80068fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a5e:	2111      	movs	r1, #17
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 f9f7 	bl	8006e54 <SDMMC_GetCmdResp1>
 8006a66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a68:	69fb      	ldr	r3, [r7, #28]
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3720      	adds	r7, #32
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b088      	sub	sp, #32
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
 8006a7a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006a80:	2312      	movs	r3, #18
 8006a82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a84:	2340      	movs	r3, #64	; 0x40
 8006a86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a90:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a92:	f107 0308 	add.w	r3, r7, #8
 8006a96:	4619      	mov	r1, r3
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f7ff ff30 	bl	80068fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aa2:	2112      	movs	r1, #18
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f9d5 	bl	8006e54 <SDMMC_GetCmdResp1>
 8006aaa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006aac:	69fb      	ldr	r3, [r7, #28]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3720      	adds	r7, #32
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b088      	sub	sp, #32
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
 8006abe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006ac4:	2318      	movs	r3, #24
 8006ac6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ac8:	2340      	movs	r3, #64	; 0x40
 8006aca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006acc:	2300      	movs	r3, #0
 8006ace:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ad0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ad4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ad6:	f107 0308 	add.w	r3, r7, #8
 8006ada:	4619      	mov	r1, r3
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f7ff ff0e 	bl	80068fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ae6:	2118      	movs	r1, #24
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 f9b3 	bl	8006e54 <SDMMC_GetCmdResp1>
 8006aee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006af0:	69fb      	ldr	r3, [r7, #28]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3720      	adds	r7, #32
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b088      	sub	sp, #32
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
 8006b02:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006b08:	2319      	movs	r3, #25
 8006b0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b0c:	2340      	movs	r3, #64	; 0x40
 8006b0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b10:	2300      	movs	r3, #0
 8006b12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b18:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b1a:	f107 0308 	add.w	r3, r7, #8
 8006b1e:	4619      	mov	r1, r3
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f7ff feec 	bl	80068fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b2a:	2119      	movs	r1, #25
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 f991 	bl	8006e54 <SDMMC_GetCmdResp1>
 8006b32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b34:	69fb      	ldr	r3, [r7, #28]
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3720      	adds	r7, #32
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
	...

08006b40 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b088      	sub	sp, #32
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006b4c:	230c      	movs	r3, #12
 8006b4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b50:	2340      	movs	r3, #64	; 0x40
 8006b52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b54:	2300      	movs	r3, #0
 8006b56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b5c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b5e:	f107 0308 	add.w	r3, r7, #8
 8006b62:	4619      	mov	r1, r3
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f7ff feca 	bl	80068fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8006b6a:	4a05      	ldr	r2, [pc, #20]	; (8006b80 <SDMMC_CmdStopTransfer+0x40>)
 8006b6c:	210c      	movs	r1, #12
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 f970 	bl	8006e54 <SDMMC_GetCmdResp1>
 8006b74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b76:	69fb      	ldr	r3, [r7, #28]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3720      	adds	r7, #32
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	05f5e100 	.word	0x05f5e100

08006b84 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b08a      	sub	sp, #40	; 0x28
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006b94:	2307      	movs	r3, #7
 8006b96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b98:	2340      	movs	r3, #64	; 0x40
 8006b9a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ba0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ba4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ba6:	f107 0310 	add.w	r3, r7, #16
 8006baa:	4619      	mov	r1, r3
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	f7ff fea6 	bl	80068fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bb6:	2107      	movs	r1, #7
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f000 f94b 	bl	8006e54 <SDMMC_GetCmdResp1>
 8006bbe:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3728      	adds	r7, #40	; 0x28
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b088      	sub	sp, #32
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006bde:	2300      	movs	r3, #0
 8006be0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006be2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006be6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006be8:	f107 0308 	add.w	r3, r7, #8
 8006bec:	4619      	mov	r1, r3
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f7ff fe85 	bl	80068fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 fb65 	bl	80072c4 <SDMMC_GetCmdError>
 8006bfa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006bfc:	69fb      	ldr	r3, [r7, #28]
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3720      	adds	r7, #32
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b088      	sub	sp, #32
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006c0e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006c12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006c14:	2308      	movs	r3, #8
 8006c16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006c18:	2340      	movs	r3, #64	; 0x40
 8006c1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c24:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c26:	f107 0308 	add.w	r3, r7, #8
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f7ff fe66 	bl	80068fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 faf8 	bl	8007228 <SDMMC_GetCmdResp7>
 8006c38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c3a:	69fb      	ldr	r3, [r7, #28]
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3720      	adds	r7, #32
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b088      	sub	sp, #32
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006c52:	2337      	movs	r3, #55	; 0x37
 8006c54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006c56:	2340      	movs	r3, #64	; 0x40
 8006c58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c62:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c64:	f107 0308 	add.w	r3, r7, #8
 8006c68:	4619      	mov	r1, r3
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f7ff fe47 	bl	80068fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c74:	2137      	movs	r1, #55	; 0x37
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 f8ec 	bl	8006e54 <SDMMC_GetCmdResp1>
 8006c7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c7e:	69fb      	ldr	r3, [r7, #28]
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3720      	adds	r7, #32
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b088      	sub	sp, #32
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006c9e:	2329      	movs	r3, #41	; 0x29
 8006ca0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ca2:	2340      	movs	r3, #64	; 0x40
 8006ca4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006caa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006cb0:	f107 0308 	add.w	r3, r7, #8
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f7ff fe21 	bl	80068fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 f9ff 	bl	80070c0 <SDMMC_GetCmdResp3>
 8006cc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006cc4:	69fb      	ldr	r3, [r7, #28]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3720      	adds	r7, #32
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b088      	sub	sp, #32
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
 8006cd6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006cdc:	2306      	movs	r3, #6
 8006cde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ce0:	2340      	movs	r3, #64	; 0x40
 8006ce2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ce8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006cee:	f107 0308 	add.w	r3, r7, #8
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f7ff fe02 	bl	80068fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8006cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cfe:	2106      	movs	r1, #6
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 f8a7 	bl	8006e54 <SDMMC_GetCmdResp1>
 8006d06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d08:	69fb      	ldr	r3, [r7, #28]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3720      	adds	r7, #32
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b088      	sub	sp, #32
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006d1e:	2333      	movs	r3, #51	; 0x33
 8006d20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d22:	2340      	movs	r3, #64	; 0x40
 8006d24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d26:	2300      	movs	r3, #0
 8006d28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d2e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d30:	f107 0308 	add.w	r3, r7, #8
 8006d34:	4619      	mov	r1, r3
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f7ff fde1 	bl	80068fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8006d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d40:	2133      	movs	r1, #51	; 0x33
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 f886 	bl	8006e54 <SDMMC_GetCmdResp1>
 8006d48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d4a:	69fb      	ldr	r3, [r7, #28]
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3720      	adds	r7, #32
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b088      	sub	sp, #32
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006d60:	2302      	movs	r3, #2
 8006d62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006d64:	23c0      	movs	r3, #192	; 0xc0
 8006d66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d70:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d72:	f107 0308 	add.w	r3, r7, #8
 8006d76:	4619      	mov	r1, r3
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f7ff fdc0 	bl	80068fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f956 	bl	8007030 <SDMMC_GetCmdResp2>
 8006d84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d86:	69fb      	ldr	r3, [r7, #28]
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3720      	adds	r7, #32
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b088      	sub	sp, #32
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006d9e:	2309      	movs	r3, #9
 8006da0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006da2:	23c0      	movs	r3, #192	; 0xc0
 8006da4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006da6:	2300      	movs	r3, #0
 8006da8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006daa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006db0:	f107 0308 	add.w	r3, r7, #8
 8006db4:	4619      	mov	r1, r3
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f7ff fda1 	bl	80068fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 f937 	bl	8007030 <SDMMC_GetCmdResp2>
 8006dc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006dc4:	69fb      	ldr	r3, [r7, #28]
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3720      	adds	r7, #32
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b088      	sub	sp, #32
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
 8006dd6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006de0:	2340      	movs	r3, #64	; 0x40
 8006de2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006de4:	2300      	movs	r3, #0
 8006de6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006de8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006dee:	f107 0308 	add.w	r3, r7, #8
 8006df2:	4619      	mov	r1, r3
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f7ff fd82 	bl	80068fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006dfa:	683a      	ldr	r2, [r7, #0]
 8006dfc:	2103      	movs	r1, #3
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f99c 	bl	800713c <SDMMC_GetCmdResp6>
 8006e04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e06:	69fb      	ldr	r3, [r7, #28]
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3720      	adds	r7, #32
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b088      	sub	sp, #32
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006e1e:	230d      	movs	r3, #13
 8006e20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006e22:	2340      	movs	r3, #64	; 0x40
 8006e24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e26:	2300      	movs	r3, #0
 8006e28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e2e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e30:	f107 0308 	add.w	r3, r7, #8
 8006e34:	4619      	mov	r1, r3
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f7ff fd61 	bl	80068fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e40:	210d      	movs	r1, #13
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 f806 	bl	8006e54 <SDMMC_GetCmdResp1>
 8006e48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e4a:	69fb      	ldr	r3, [r7, #28]
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3720      	adds	r7, #32
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b088      	sub	sp, #32
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	607a      	str	r2, [r7, #4]
 8006e60:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006e62:	4b70      	ldr	r3, [pc, #448]	; (8007024 <SDMMC_GetCmdResp1+0x1d0>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a70      	ldr	r2, [pc, #448]	; (8007028 <SDMMC_GetCmdResp1+0x1d4>)
 8006e68:	fba2 2303 	umull	r2, r3, r2, r3
 8006e6c:	0a5a      	lsrs	r2, r3, #9
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	fb02 f303 	mul.w	r3, r2, r3
 8006e74:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	1e5a      	subs	r2, r3, #1
 8006e7a:	61fa      	str	r2, [r7, #28]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d102      	bne.n	8006e86 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006e80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006e84:	e0c9      	b.n	800701a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e8a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d0ef      	beq.n	8006e76 <SDMMC_GetCmdResp1+0x22>
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1ea      	bne.n	8006e76 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ea4:	f003 0304 	and.w	r3, r3, #4
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d004      	beq.n	8006eb6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2204      	movs	r2, #4
 8006eb0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006eb2:	2304      	movs	r3, #4
 8006eb4:	e0b1      	b.n	800701a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d004      	beq.n	8006ecc <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e0a6      	b.n	800701a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	22c5      	movs	r2, #197	; 0xc5
 8006ed0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f7ff fd3d 	bl	8006952 <SDIO_GetCommandResponse>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	461a      	mov	r2, r3
 8006edc:	7afb      	ldrb	r3, [r7, #11]
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d001      	beq.n	8006ee6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e099      	b.n	800701a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006ee6:	2100      	movs	r1, #0
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f7ff fd3f 	bl	800696c <SDIO_GetResponse>
 8006eee:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006ef0:	697a      	ldr	r2, [r7, #20]
 8006ef2:	4b4e      	ldr	r3, [pc, #312]	; (800702c <SDMMC_GetCmdResp1+0x1d8>)
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d101      	bne.n	8006efe <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006efa:	2300      	movs	r3, #0
 8006efc:	e08d      	b.n	800701a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	da02      	bge.n	8006f0a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006f04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f08:	e087      	b.n	800701a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d001      	beq.n	8006f18 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006f14:	2340      	movs	r3, #64	; 0x40
 8006f16:	e080      	b.n	800701a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d001      	beq.n	8006f26 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006f22:	2380      	movs	r3, #128	; 0x80
 8006f24:	e079      	b.n	800701a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d002      	beq.n	8006f36 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006f30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f34:	e071      	b.n	800701a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d002      	beq.n	8006f46 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006f40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f44:	e069      	b.n	800701a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d002      	beq.n	8006f56 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006f50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f54:	e061      	b.n	800701a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d002      	beq.n	8006f66 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006f60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f64:	e059      	b.n	800701a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d002      	beq.n	8006f76 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f74:	e051      	b.n	800701a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d002      	beq.n	8006f86 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006f80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006f84:	e049      	b.n	800701a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d002      	beq.n	8006f96 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006f90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006f94:	e041      	b.n	800701a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d002      	beq.n	8006fa6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006fa0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fa4:	e039      	b.n	800701a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d002      	beq.n	8006fb6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006fb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006fb4:	e031      	b.n	800701a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d002      	beq.n	8006fc6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006fc0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006fc4:	e029      	b.n	800701a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d002      	beq.n	8006fd6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006fd0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006fd4:	e021      	b.n	800701a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d002      	beq.n	8006fe6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006fe0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006fe4:	e019      	b.n	800701a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d002      	beq.n	8006ff6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006ff0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006ff4:	e011      	b.n	800701a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d002      	beq.n	8007006 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007000:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007004:	e009      	b.n	800701a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	f003 0308 	and.w	r3, r3, #8
 800700c:	2b00      	cmp	r3, #0
 800700e:	d002      	beq.n	8007016 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007010:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007014:	e001      	b.n	800701a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007016:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800701a:	4618      	mov	r0, r3
 800701c:	3720      	adds	r7, #32
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	2000000c 	.word	0x2000000c
 8007028:	10624dd3 	.word	0x10624dd3
 800702c:	fdffe008 	.word	0xfdffe008

08007030 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007038:	4b1f      	ldr	r3, [pc, #124]	; (80070b8 <SDMMC_GetCmdResp2+0x88>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a1f      	ldr	r2, [pc, #124]	; (80070bc <SDMMC_GetCmdResp2+0x8c>)
 800703e:	fba2 2303 	umull	r2, r3, r2, r3
 8007042:	0a5b      	lsrs	r3, r3, #9
 8007044:	f241 3288 	movw	r2, #5000	; 0x1388
 8007048:	fb02 f303 	mul.w	r3, r2, r3
 800704c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	1e5a      	subs	r2, r3, #1
 8007052:	60fa      	str	r2, [r7, #12]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d102      	bne.n	800705e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007058:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800705c:	e026      	b.n	80070ac <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007062:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800706a:	2b00      	cmp	r3, #0
 800706c:	d0ef      	beq.n	800704e <SDMMC_GetCmdResp2+0x1e>
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007074:	2b00      	cmp	r3, #0
 8007076:	d1ea      	bne.n	800704e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800707c:	f003 0304 	and.w	r3, r3, #4
 8007080:	2b00      	cmp	r3, #0
 8007082:	d004      	beq.n	800708e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2204      	movs	r2, #4
 8007088:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800708a:	2304      	movs	r3, #4
 800708c:	e00e      	b.n	80070ac <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007092:	f003 0301 	and.w	r3, r3, #1
 8007096:	2b00      	cmp	r3, #0
 8007098:	d004      	beq.n	80070a4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80070a0:	2301      	movs	r3, #1
 80070a2:	e003      	b.n	80070ac <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	22c5      	movs	r2, #197	; 0xc5
 80070a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3714      	adds	r7, #20
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr
 80070b8:	2000000c 	.word	0x2000000c
 80070bc:	10624dd3 	.word	0x10624dd3

080070c0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80070c8:	4b1a      	ldr	r3, [pc, #104]	; (8007134 <SDMMC_GetCmdResp3+0x74>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a1a      	ldr	r2, [pc, #104]	; (8007138 <SDMMC_GetCmdResp3+0x78>)
 80070ce:	fba2 2303 	umull	r2, r3, r2, r3
 80070d2:	0a5b      	lsrs	r3, r3, #9
 80070d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80070d8:	fb02 f303 	mul.w	r3, r2, r3
 80070dc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	1e5a      	subs	r2, r3, #1
 80070e2:	60fa      	str	r2, [r7, #12]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d102      	bne.n	80070ee <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80070e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80070ec:	e01b      	b.n	8007126 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070f2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d0ef      	beq.n	80070de <SDMMC_GetCmdResp3+0x1e>
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007104:	2b00      	cmp	r3, #0
 8007106:	d1ea      	bne.n	80070de <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800710c:	f003 0304 	and.w	r3, r3, #4
 8007110:	2b00      	cmp	r3, #0
 8007112:	d004      	beq.n	800711e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2204      	movs	r2, #4
 8007118:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800711a:	2304      	movs	r3, #4
 800711c:	e003      	b.n	8007126 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	22c5      	movs	r2, #197	; 0xc5
 8007122:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3714      	adds	r7, #20
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	2000000c 	.word	0x2000000c
 8007138:	10624dd3 	.word	0x10624dd3

0800713c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b088      	sub	sp, #32
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	460b      	mov	r3, r1
 8007146:	607a      	str	r2, [r7, #4]
 8007148:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800714a:	4b35      	ldr	r3, [pc, #212]	; (8007220 <SDMMC_GetCmdResp6+0xe4>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a35      	ldr	r2, [pc, #212]	; (8007224 <SDMMC_GetCmdResp6+0xe8>)
 8007150:	fba2 2303 	umull	r2, r3, r2, r3
 8007154:	0a5b      	lsrs	r3, r3, #9
 8007156:	f241 3288 	movw	r2, #5000	; 0x1388
 800715a:	fb02 f303 	mul.w	r3, r2, r3
 800715e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	1e5a      	subs	r2, r3, #1
 8007164:	61fa      	str	r2, [r7, #28]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d102      	bne.n	8007170 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800716a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800716e:	e052      	b.n	8007216 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007174:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800717c:	2b00      	cmp	r3, #0
 800717e:	d0ef      	beq.n	8007160 <SDMMC_GetCmdResp6+0x24>
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1ea      	bne.n	8007160 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800718e:	f003 0304 	and.w	r3, r3, #4
 8007192:	2b00      	cmp	r3, #0
 8007194:	d004      	beq.n	80071a0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2204      	movs	r2, #4
 800719a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800719c:	2304      	movs	r3, #4
 800719e:	e03a      	b.n	8007216 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a4:	f003 0301 	and.w	r3, r3, #1
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d004      	beq.n	80071b6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2201      	movs	r2, #1
 80071b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e02f      	b.n	8007216 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f7ff fbcb 	bl	8006952 <SDIO_GetCommandResponse>
 80071bc:	4603      	mov	r3, r0
 80071be:	461a      	mov	r2, r3
 80071c0:	7afb      	ldrb	r3, [r7, #11]
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d001      	beq.n	80071ca <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e025      	b.n	8007216 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	22c5      	movs	r2, #197	; 0xc5
 80071ce:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80071d0:	2100      	movs	r1, #0
 80071d2:	68f8      	ldr	r0, [r7, #12]
 80071d4:	f7ff fbca 	bl	800696c <SDIO_GetResponse>
 80071d8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d106      	bne.n	80071f2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	0c1b      	lsrs	r3, r3, #16
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80071ee:	2300      	movs	r3, #0
 80071f0:	e011      	b.n	8007216 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d002      	beq.n	8007202 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80071fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007200:	e009      	b.n	8007216 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007208:	2b00      	cmp	r3, #0
 800720a:	d002      	beq.n	8007212 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800720c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007210:	e001      	b.n	8007216 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007212:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007216:	4618      	mov	r0, r3
 8007218:	3720      	adds	r7, #32
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	2000000c 	.word	0x2000000c
 8007224:	10624dd3 	.word	0x10624dd3

08007228 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007230:	4b22      	ldr	r3, [pc, #136]	; (80072bc <SDMMC_GetCmdResp7+0x94>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a22      	ldr	r2, [pc, #136]	; (80072c0 <SDMMC_GetCmdResp7+0x98>)
 8007236:	fba2 2303 	umull	r2, r3, r2, r3
 800723a:	0a5b      	lsrs	r3, r3, #9
 800723c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007240:	fb02 f303 	mul.w	r3, r2, r3
 8007244:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	1e5a      	subs	r2, r3, #1
 800724a:	60fa      	str	r2, [r7, #12]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d102      	bne.n	8007256 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007250:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007254:	e02c      	b.n	80072b0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800725a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007262:	2b00      	cmp	r3, #0
 8007264:	d0ef      	beq.n	8007246 <SDMMC_GetCmdResp7+0x1e>
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800726c:	2b00      	cmp	r3, #0
 800726e:	d1ea      	bne.n	8007246 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007274:	f003 0304 	and.w	r3, r3, #4
 8007278:	2b00      	cmp	r3, #0
 800727a:	d004      	beq.n	8007286 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2204      	movs	r2, #4
 8007280:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007282:	2304      	movs	r3, #4
 8007284:	e014      	b.n	80072b0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800728a:	f003 0301 	and.w	r3, r3, #1
 800728e:	2b00      	cmp	r3, #0
 8007290:	d004      	beq.n	800729c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2201      	movs	r2, #1
 8007296:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007298:	2301      	movs	r3, #1
 800729a:	e009      	b.n	80072b0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d002      	beq.n	80072ae <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2240      	movs	r2, #64	; 0x40
 80072ac:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80072ae:	2300      	movs	r3, #0
  
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3714      	adds	r7, #20
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr
 80072bc:	2000000c 	.word	0x2000000c
 80072c0:	10624dd3 	.word	0x10624dd3

080072c4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80072cc:	4b11      	ldr	r3, [pc, #68]	; (8007314 <SDMMC_GetCmdError+0x50>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a11      	ldr	r2, [pc, #68]	; (8007318 <SDMMC_GetCmdError+0x54>)
 80072d2:	fba2 2303 	umull	r2, r3, r2, r3
 80072d6:	0a5b      	lsrs	r3, r3, #9
 80072d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80072dc:	fb02 f303 	mul.w	r3, r2, r3
 80072e0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	1e5a      	subs	r2, r3, #1
 80072e6:	60fa      	str	r2, [r7, #12]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d102      	bne.n	80072f2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80072ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80072f0:	e009      	b.n	8007306 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d0f1      	beq.n	80072e2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	22c5      	movs	r2, #197	; 0xc5
 8007302:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3714      	adds	r7, #20
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	2000000c 	.word	0x2000000c
 8007318:	10624dd3 	.word	0x10624dd3

0800731c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007320:	4904      	ldr	r1, [pc, #16]	; (8007334 <MX_FATFS_Init+0x18>)
 8007322:	4805      	ldr	r0, [pc, #20]	; (8007338 <MX_FATFS_Init+0x1c>)
 8007324:	f002 fcd0 	bl	8009cc8 <FATFS_LinkDriver>
 8007328:	4603      	mov	r3, r0
 800732a:	461a      	mov	r2, r3
 800732c:	4b03      	ldr	r3, [pc, #12]	; (800733c <MX_FATFS_Init+0x20>)
 800732e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007330:	bf00      	nop
 8007332:	bd80      	pop	{r7, pc}
 8007334:	2000a428 	.word	0x2000a428
 8007338:	08009dd8 	.word	0x08009dd8
 800733c:	2000a424 	.word	0x2000a424

08007340 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007340:	b480      	push	{r7}
 8007342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007344:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007346:	4618      	mov	r0, r3
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007356:	2300      	movs	r3, #0
 8007358:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800735a:	f000 f896 	bl	800748a <BSP_SD_IsDetected>
 800735e:	4603      	mov	r3, r0
 8007360:	2b01      	cmp	r3, #1
 8007362:	d001      	beq.n	8007368 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e012      	b.n	800738e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8007368:	480b      	ldr	r0, [pc, #44]	; (8007398 <BSP_SD_Init+0x48>)
 800736a:	f7fb fe8f 	bl	800308c <HAL_SD_Init>
 800736e:	4603      	mov	r3, r0
 8007370:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8007372:	79fb      	ldrb	r3, [r7, #7]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d109      	bne.n	800738c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8007378:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800737c:	4806      	ldr	r0, [pc, #24]	; (8007398 <BSP_SD_Init+0x48>)
 800737e:	f7fc fc5d 	bl	8003c3c <HAL_SD_ConfigWideBusOperation>
 8007382:	4603      	mov	r3, r0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d001      	beq.n	800738c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800738c:	79fb      	ldrb	r3, [r7, #7]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3708      	adds	r7, #8
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	2000a0a8 	.word	0x2000a0a8

0800739c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b086      	sub	sp, #24
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80073a8:	2300      	movs	r3, #0
 80073aa:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	68ba      	ldr	r2, [r7, #8]
 80073b0:	68f9      	ldr	r1, [r7, #12]
 80073b2:	4806      	ldr	r0, [pc, #24]	; (80073cc <BSP_SD_ReadBlocks_DMA+0x30>)
 80073b4:	f7fb ff1a 	bl	80031ec <HAL_SD_ReadBlocks_DMA>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d001      	beq.n	80073c2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80073c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3718      	adds	r7, #24
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}
 80073cc:	2000a0a8 	.word	0x2000a0a8

080073d0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b086      	sub	sp, #24
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80073dc:	2300      	movs	r3, #0
 80073de:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	68f9      	ldr	r1, [r7, #12]
 80073e6:	4806      	ldr	r0, [pc, #24]	; (8007400 <BSP_SD_WriteBlocks_DMA+0x30>)
 80073e8:	f7fb ffe2 	bl	80033b0 <HAL_SD_WriteBlocks_DMA>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d001      	beq.n	80073f6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80073f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3718      	adds	r7, #24
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	2000a0a8 	.word	0x2000a0a8

08007404 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007408:	4805      	ldr	r0, [pc, #20]	; (8007420 <BSP_SD_GetCardState+0x1c>)
 800740a:	f7fc fcb1 	bl	8003d70 <HAL_SD_GetCardState>
 800740e:	4603      	mov	r3, r0
 8007410:	2b04      	cmp	r3, #4
 8007412:	bf14      	ite	ne
 8007414:	2301      	movne	r3, #1
 8007416:	2300      	moveq	r3, #0
 8007418:	b2db      	uxtb	r3, r3
}
 800741a:	4618      	mov	r0, r3
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	2000a0a8 	.word	0x2000a0a8

08007424 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800742c:	6879      	ldr	r1, [r7, #4]
 800742e:	4803      	ldr	r0, [pc, #12]	; (800743c <BSP_SD_GetCardInfo+0x18>)
 8007430:	f7fc fbd8 	bl	8003be4 <HAL_SD_GetCardInfo>
}
 8007434:	bf00      	nop
 8007436:	3708      	adds	r7, #8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	2000a0a8 	.word	0x2000a0a8

08007440 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8007448:	f000 f818 	bl	800747c <BSP_SD_AbortCallback>
}
 800744c:	bf00      	nop
 800744e:	3708      	adds	r7, #8
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800745c:	f000 f98c 	bl	8007778 <BSP_SD_WriteCpltCallback>
}
 8007460:	bf00      	nop
 8007462:	3708      	adds	r7, #8
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007470:	f000 f98e 	bl	8007790 <BSP_SD_ReadCpltCallback>
}
 8007474:	bf00      	nop
 8007476:	3708      	adds	r7, #8
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800747c:	b480      	push	{r7}
 800747e:	af00      	add	r7, sp, #0

}
 8007480:	bf00      	nop
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800748a:	b480      	push	{r7}
 800748c:	b083      	sub	sp, #12
 800748e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007490:	2301      	movs	r3, #1
 8007492:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8007494:	79fb      	ldrb	r3, [r7, #7]
 8007496:	b2db      	uxtb	r3, r3
}
 8007498:	4618      	mov	r0, r3
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80074ac:	f7fa fae8 	bl	8001a80 <HAL_GetTick>
 80074b0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80074b2:	e006      	b.n	80074c2 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80074b4:	f7ff ffa6 	bl	8007404 <BSP_SD_GetCardState>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d101      	bne.n	80074c2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80074be:	2300      	movs	r3, #0
 80074c0:	e009      	b.n	80074d6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80074c2:	f7fa fadd 	bl	8001a80 <HAL_GetTick>
 80074c6:	4602      	mov	r2, r0
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d8f0      	bhi.n	80074b4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80074d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
	...

080074e0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	4603      	mov	r3, r0
 80074e8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80074ea:	4b0b      	ldr	r3, [pc, #44]	; (8007518 <SD_CheckStatus+0x38>)
 80074ec:	2201      	movs	r2, #1
 80074ee:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80074f0:	f7ff ff88 	bl	8007404 <BSP_SD_GetCardState>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d107      	bne.n	800750a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80074fa:	4b07      	ldr	r3, [pc, #28]	; (8007518 <SD_CheckStatus+0x38>)
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	f023 0301 	bic.w	r3, r3, #1
 8007504:	b2da      	uxtb	r2, r3
 8007506:	4b04      	ldr	r3, [pc, #16]	; (8007518 <SD_CheckStatus+0x38>)
 8007508:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800750a:	4b03      	ldr	r3, [pc, #12]	; (8007518 <SD_CheckStatus+0x38>)
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	b2db      	uxtb	r3, r3
}
 8007510:	4618      	mov	r0, r3
 8007512:	3708      	adds	r7, #8
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	20000015 	.word	0x20000015

0800751c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	4603      	mov	r3, r0
 8007524:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007526:	f7ff ff13 	bl	8007350 <BSP_SD_Init>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d107      	bne.n	8007540 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8007530:	79fb      	ldrb	r3, [r7, #7]
 8007532:	4618      	mov	r0, r3
 8007534:	f7ff ffd4 	bl	80074e0 <SD_CheckStatus>
 8007538:	4603      	mov	r3, r0
 800753a:	461a      	mov	r2, r3
 800753c:	4b04      	ldr	r3, [pc, #16]	; (8007550 <SD_initialize+0x34>)
 800753e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007540:	4b03      	ldr	r3, [pc, #12]	; (8007550 <SD_initialize+0x34>)
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	b2db      	uxtb	r3, r3
}
 8007546:	4618      	mov	r0, r3
 8007548:	3708      	adds	r7, #8
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	20000015 	.word	0x20000015

08007554 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	4603      	mov	r3, r0
 800755c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800755e:	79fb      	ldrb	r3, [r7, #7]
 8007560:	4618      	mov	r0, r3
 8007562:	f7ff ffbd 	bl	80074e0 <SD_CheckStatus>
 8007566:	4603      	mov	r3, r0
}
 8007568:	4618      	mov	r0, r3
 800756a:	3708      	adds	r7, #8
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b086      	sub	sp, #24
 8007574:	af00      	add	r7, sp, #0
 8007576:	60b9      	str	r1, [r7, #8]
 8007578:	607a      	str	r2, [r7, #4]
 800757a:	603b      	str	r3, [r7, #0]
 800757c:	4603      	mov	r3, r0
 800757e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007584:	f247 5030 	movw	r0, #30000	; 0x7530
 8007588:	f7ff ff8c 	bl	80074a4 <SD_CheckStatusWithTimeout>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	da01      	bge.n	8007596 <SD_read+0x26>
  {
    return res;
 8007592:	7dfb      	ldrb	r3, [r7, #23]
 8007594:	e03b      	b.n	800760e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8007596:	683a      	ldr	r2, [r7, #0]
 8007598:	6879      	ldr	r1, [r7, #4]
 800759a:	68b8      	ldr	r0, [r7, #8]
 800759c:	f7ff fefe 	bl	800739c <BSP_SD_ReadBlocks_DMA>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d132      	bne.n	800760c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80075a6:	4b1c      	ldr	r3, [pc, #112]	; (8007618 <SD_read+0xa8>)
 80075a8:	2200      	movs	r2, #0
 80075aa:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80075ac:	f7fa fa68 	bl	8001a80 <HAL_GetTick>
 80075b0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80075b2:	bf00      	nop
 80075b4:	4b18      	ldr	r3, [pc, #96]	; (8007618 <SD_read+0xa8>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d108      	bne.n	80075ce <SD_read+0x5e>
 80075bc:	f7fa fa60 	bl	8001a80 <HAL_GetTick>
 80075c0:	4602      	mov	r2, r0
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	1ad3      	subs	r3, r2, r3
 80075c6:	f247 522f 	movw	r2, #29999	; 0x752f
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d9f2      	bls.n	80075b4 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80075ce:	4b12      	ldr	r3, [pc, #72]	; (8007618 <SD_read+0xa8>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d102      	bne.n	80075dc <SD_read+0x6c>
      {
        res = RES_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	75fb      	strb	r3, [r7, #23]
 80075da:	e017      	b.n	800760c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80075dc:	4b0e      	ldr	r3, [pc, #56]	; (8007618 <SD_read+0xa8>)
 80075de:	2200      	movs	r2, #0
 80075e0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80075e2:	f7fa fa4d 	bl	8001a80 <HAL_GetTick>
 80075e6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80075e8:	e007      	b.n	80075fa <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80075ea:	f7ff ff0b 	bl	8007404 <BSP_SD_GetCardState>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d102      	bne.n	80075fa <SD_read+0x8a>
          {
            res = RES_OK;
 80075f4:	2300      	movs	r3, #0
 80075f6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80075f8:	e008      	b.n	800760c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80075fa:	f7fa fa41 	bl	8001a80 <HAL_GetTick>
 80075fe:	4602      	mov	r2, r0
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	1ad3      	subs	r3, r2, r3
 8007604:	f247 522f 	movw	r2, #29999	; 0x752f
 8007608:	4293      	cmp	r3, r2
 800760a:	d9ee      	bls.n	80075ea <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800760c:	7dfb      	ldrb	r3, [r7, #23]
}
 800760e:	4618      	mov	r0, r3
 8007610:	3718      	adds	r7, #24
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	2000a430 	.word	0x2000a430

0800761c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b086      	sub	sp, #24
 8007620:	af00      	add	r7, sp, #0
 8007622:	60b9      	str	r1, [r7, #8]
 8007624:	607a      	str	r2, [r7, #4]
 8007626:	603b      	str	r3, [r7, #0]
 8007628:	4603      	mov	r3, r0
 800762a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8007630:	4b24      	ldr	r3, [pc, #144]	; (80076c4 <SD_write+0xa8>)
 8007632:	2200      	movs	r2, #0
 8007634:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007636:	f247 5030 	movw	r0, #30000	; 0x7530
 800763a:	f7ff ff33 	bl	80074a4 <SD_CheckStatusWithTimeout>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	da01      	bge.n	8007648 <SD_write+0x2c>
  {
    return res;
 8007644:	7dfb      	ldrb	r3, [r7, #23]
 8007646:	e038      	b.n	80076ba <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8007648:	683a      	ldr	r2, [r7, #0]
 800764a:	6879      	ldr	r1, [r7, #4]
 800764c:	68b8      	ldr	r0, [r7, #8]
 800764e:	f7ff febf 	bl	80073d0 <BSP_SD_WriteBlocks_DMA>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d12f      	bne.n	80076b8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8007658:	f7fa fa12 	bl	8001a80 <HAL_GetTick>
 800765c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800765e:	bf00      	nop
 8007660:	4b18      	ldr	r3, [pc, #96]	; (80076c4 <SD_write+0xa8>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d108      	bne.n	800767a <SD_write+0x5e>
 8007668:	f7fa fa0a 	bl	8001a80 <HAL_GetTick>
 800766c:	4602      	mov	r2, r0
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	f247 522f 	movw	r2, #29999	; 0x752f
 8007676:	4293      	cmp	r3, r2
 8007678:	d9f2      	bls.n	8007660 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800767a:	4b12      	ldr	r3, [pc, #72]	; (80076c4 <SD_write+0xa8>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d102      	bne.n	8007688 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	75fb      	strb	r3, [r7, #23]
 8007686:	e017      	b.n	80076b8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8007688:	4b0e      	ldr	r3, [pc, #56]	; (80076c4 <SD_write+0xa8>)
 800768a:	2200      	movs	r2, #0
 800768c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800768e:	f7fa f9f7 	bl	8001a80 <HAL_GetTick>
 8007692:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007694:	e007      	b.n	80076a6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007696:	f7ff feb5 	bl	8007404 <BSP_SD_GetCardState>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d102      	bne.n	80076a6 <SD_write+0x8a>
          {
            res = RES_OK;
 80076a0:	2300      	movs	r3, #0
 80076a2:	75fb      	strb	r3, [r7, #23]
            break;
 80076a4:	e008      	b.n	80076b8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80076a6:	f7fa f9eb 	bl	8001a80 <HAL_GetTick>
 80076aa:	4602      	mov	r2, r0
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	1ad3      	subs	r3, r2, r3
 80076b0:	f247 522f 	movw	r2, #29999	; 0x752f
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d9ee      	bls.n	8007696 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80076b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3718      	adds	r7, #24
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	2000a42c 	.word	0x2000a42c

080076c8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b08c      	sub	sp, #48	; 0x30
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	4603      	mov	r3, r0
 80076d0:	603a      	str	r2, [r7, #0]
 80076d2:	71fb      	strb	r3, [r7, #7]
 80076d4:	460b      	mov	r3, r1
 80076d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80076de:	4b25      	ldr	r3, [pc, #148]	; (8007774 <SD_ioctl+0xac>)
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	f003 0301 	and.w	r3, r3, #1
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d001      	beq.n	80076f0 <SD_ioctl+0x28>
 80076ec:	2303      	movs	r3, #3
 80076ee:	e03c      	b.n	800776a <SD_ioctl+0xa2>

  switch (cmd)
 80076f0:	79bb      	ldrb	r3, [r7, #6]
 80076f2:	2b03      	cmp	r3, #3
 80076f4:	d834      	bhi.n	8007760 <SD_ioctl+0x98>
 80076f6:	a201      	add	r2, pc, #4	; (adr r2, 80076fc <SD_ioctl+0x34>)
 80076f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fc:	0800770d 	.word	0x0800770d
 8007700:	08007715 	.word	0x08007715
 8007704:	0800772d 	.word	0x0800772d
 8007708:	08007747 	.word	0x08007747
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800770c:	2300      	movs	r3, #0
 800770e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007712:	e028      	b.n	8007766 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007714:	f107 030c 	add.w	r3, r7, #12
 8007718:	4618      	mov	r0, r3
 800771a:	f7ff fe83 	bl	8007424 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800771e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007724:	2300      	movs	r3, #0
 8007726:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800772a:	e01c      	b.n	8007766 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800772c:	f107 030c 	add.w	r3, r7, #12
 8007730:	4618      	mov	r0, r3
 8007732:	f7ff fe77 	bl	8007424 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007738:	b29a      	uxth	r2, r3
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800773e:	2300      	movs	r3, #0
 8007740:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007744:	e00f      	b.n	8007766 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007746:	f107 030c 	add.w	r3, r7, #12
 800774a:	4618      	mov	r0, r3
 800774c:	f7ff fe6a 	bl	8007424 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007752:	0a5a      	lsrs	r2, r3, #9
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007758:	2300      	movs	r3, #0
 800775a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800775e:	e002      	b.n	8007766 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007760:	2304      	movs	r3, #4
 8007762:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8007766:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800776a:	4618      	mov	r0, r3
 800776c:	3730      	adds	r7, #48	; 0x30
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop
 8007774:	20000015 	.word	0x20000015

08007778 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8007778:	b480      	push	{r7}
 800777a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800777c:	4b03      	ldr	r3, [pc, #12]	; (800778c <BSP_SD_WriteCpltCallback+0x14>)
 800777e:	2201      	movs	r2, #1
 8007780:	601a      	str	r2, [r3, #0]
}
 8007782:	bf00      	nop
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr
 800778c:	2000a42c 	.word	0x2000a42c

08007790 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8007790:	b480      	push	{r7}
 8007792:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8007794:	4b03      	ldr	r3, [pc, #12]	; (80077a4 <BSP_SD_ReadCpltCallback+0x14>)
 8007796:	2201      	movs	r2, #1
 8007798:	601a      	str	r2, [r3, #0]
}
 800779a:	bf00      	nop
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr
 80077a4:	2000a430 	.word	0x2000a430

080077a8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	4603      	mov	r3, r0
 80077b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80077b2:	79fb      	ldrb	r3, [r7, #7]
 80077b4:	4a08      	ldr	r2, [pc, #32]	; (80077d8 <disk_status+0x30>)
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	4413      	add	r3, r2
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	79fa      	ldrb	r2, [r7, #7]
 80077c0:	4905      	ldr	r1, [pc, #20]	; (80077d8 <disk_status+0x30>)
 80077c2:	440a      	add	r2, r1
 80077c4:	7a12      	ldrb	r2, [r2, #8]
 80077c6:	4610      	mov	r0, r2
 80077c8:	4798      	blx	r3
 80077ca:	4603      	mov	r3, r0
 80077cc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80077ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3710      	adds	r7, #16
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	2000a45c 	.word	0x2000a45c

080077dc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	4603      	mov	r3, r0
 80077e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80077e6:	2300      	movs	r3, #0
 80077e8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80077ea:	79fb      	ldrb	r3, [r7, #7]
 80077ec:	4a0d      	ldr	r2, [pc, #52]	; (8007824 <disk_initialize+0x48>)
 80077ee:	5cd3      	ldrb	r3, [r2, r3]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d111      	bne.n	8007818 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80077f4:	79fb      	ldrb	r3, [r7, #7]
 80077f6:	4a0b      	ldr	r2, [pc, #44]	; (8007824 <disk_initialize+0x48>)
 80077f8:	2101      	movs	r1, #1
 80077fa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80077fc:	79fb      	ldrb	r3, [r7, #7]
 80077fe:	4a09      	ldr	r2, [pc, #36]	; (8007824 <disk_initialize+0x48>)
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	4413      	add	r3, r2
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	79fa      	ldrb	r2, [r7, #7]
 800780a:	4906      	ldr	r1, [pc, #24]	; (8007824 <disk_initialize+0x48>)
 800780c:	440a      	add	r2, r1
 800780e:	7a12      	ldrb	r2, [r2, #8]
 8007810:	4610      	mov	r0, r2
 8007812:	4798      	blx	r3
 8007814:	4603      	mov	r3, r0
 8007816:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007818:	7bfb      	ldrb	r3, [r7, #15]
}
 800781a:	4618      	mov	r0, r3
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	2000a45c 	.word	0x2000a45c

08007828 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007828:	b590      	push	{r4, r7, lr}
 800782a:	b087      	sub	sp, #28
 800782c:	af00      	add	r7, sp, #0
 800782e:	60b9      	str	r1, [r7, #8]
 8007830:	607a      	str	r2, [r7, #4]
 8007832:	603b      	str	r3, [r7, #0]
 8007834:	4603      	mov	r3, r0
 8007836:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007838:	7bfb      	ldrb	r3, [r7, #15]
 800783a:	4a0a      	ldr	r2, [pc, #40]	; (8007864 <disk_read+0x3c>)
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	4413      	add	r3, r2
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	689c      	ldr	r4, [r3, #8]
 8007844:	7bfb      	ldrb	r3, [r7, #15]
 8007846:	4a07      	ldr	r2, [pc, #28]	; (8007864 <disk_read+0x3c>)
 8007848:	4413      	add	r3, r2
 800784a:	7a18      	ldrb	r0, [r3, #8]
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	68b9      	ldr	r1, [r7, #8]
 8007852:	47a0      	blx	r4
 8007854:	4603      	mov	r3, r0
 8007856:	75fb      	strb	r3, [r7, #23]
  return res;
 8007858:	7dfb      	ldrb	r3, [r7, #23]
}
 800785a:	4618      	mov	r0, r3
 800785c:	371c      	adds	r7, #28
 800785e:	46bd      	mov	sp, r7
 8007860:	bd90      	pop	{r4, r7, pc}
 8007862:	bf00      	nop
 8007864:	2000a45c 	.word	0x2000a45c

08007868 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007868:	b590      	push	{r4, r7, lr}
 800786a:	b087      	sub	sp, #28
 800786c:	af00      	add	r7, sp, #0
 800786e:	60b9      	str	r1, [r7, #8]
 8007870:	607a      	str	r2, [r7, #4]
 8007872:	603b      	str	r3, [r7, #0]
 8007874:	4603      	mov	r3, r0
 8007876:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007878:	7bfb      	ldrb	r3, [r7, #15]
 800787a:	4a0a      	ldr	r2, [pc, #40]	; (80078a4 <disk_write+0x3c>)
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	4413      	add	r3, r2
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	68dc      	ldr	r4, [r3, #12]
 8007884:	7bfb      	ldrb	r3, [r7, #15]
 8007886:	4a07      	ldr	r2, [pc, #28]	; (80078a4 <disk_write+0x3c>)
 8007888:	4413      	add	r3, r2
 800788a:	7a18      	ldrb	r0, [r3, #8]
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	68b9      	ldr	r1, [r7, #8]
 8007892:	47a0      	blx	r4
 8007894:	4603      	mov	r3, r0
 8007896:	75fb      	strb	r3, [r7, #23]
  return res;
 8007898:	7dfb      	ldrb	r3, [r7, #23]
}
 800789a:	4618      	mov	r0, r3
 800789c:	371c      	adds	r7, #28
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd90      	pop	{r4, r7, pc}
 80078a2:	bf00      	nop
 80078a4:	2000a45c 	.word	0x2000a45c

080078a8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	4603      	mov	r3, r0
 80078b0:	603a      	str	r2, [r7, #0]
 80078b2:	71fb      	strb	r3, [r7, #7]
 80078b4:	460b      	mov	r3, r1
 80078b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80078b8:	79fb      	ldrb	r3, [r7, #7]
 80078ba:	4a09      	ldr	r2, [pc, #36]	; (80078e0 <disk_ioctl+0x38>)
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	4413      	add	r3, r2
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	79fa      	ldrb	r2, [r7, #7]
 80078c6:	4906      	ldr	r1, [pc, #24]	; (80078e0 <disk_ioctl+0x38>)
 80078c8:	440a      	add	r2, r1
 80078ca:	7a10      	ldrb	r0, [r2, #8]
 80078cc:	79b9      	ldrb	r1, [r7, #6]
 80078ce:	683a      	ldr	r2, [r7, #0]
 80078d0:	4798      	blx	r3
 80078d2:	4603      	mov	r3, r0
 80078d4:	73fb      	strb	r3, [r7, #15]
  return res;
 80078d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3710      	adds	r7, #16
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	2000a45c 	.word	0x2000a45c

080078e4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80078e4:	b480      	push	{r7}
 80078e6:	b085      	sub	sp, #20
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	3301      	adds	r3, #1
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80078f4:	89fb      	ldrh	r3, [r7, #14]
 80078f6:	021b      	lsls	r3, r3, #8
 80078f8:	b21a      	sxth	r2, r3
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	b21b      	sxth	r3, r3
 8007900:	4313      	orrs	r3, r2
 8007902:	b21b      	sxth	r3, r3
 8007904:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007906:	89fb      	ldrh	r3, [r7, #14]
}
 8007908:	4618      	mov	r0, r3
 800790a:	3714      	adds	r7, #20
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007914:	b480      	push	{r7}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	3303      	adds	r3, #3
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	021b      	lsls	r3, r3, #8
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	3202      	adds	r2, #2
 800792c:	7812      	ldrb	r2, [r2, #0]
 800792e:	4313      	orrs	r3, r2
 8007930:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	021b      	lsls	r3, r3, #8
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	3201      	adds	r2, #1
 800793a:	7812      	ldrb	r2, [r2, #0]
 800793c:	4313      	orrs	r3, r2
 800793e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	021b      	lsls	r3, r3, #8
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	7812      	ldrb	r2, [r2, #0]
 8007948:	4313      	orrs	r3, r2
 800794a:	60fb      	str	r3, [r7, #12]
	return rv;
 800794c:	68fb      	ldr	r3, [r7, #12]
}
 800794e:	4618      	mov	r0, r3
 8007950:	3714      	adds	r7, #20
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr

0800795a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800795a:	b480      	push	{r7}
 800795c:	b083      	sub	sp, #12
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
 8007962:	460b      	mov	r3, r1
 8007964:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	1c5a      	adds	r2, r3, #1
 800796a:	607a      	str	r2, [r7, #4]
 800796c:	887a      	ldrh	r2, [r7, #2]
 800796e:	b2d2      	uxtb	r2, r2
 8007970:	701a      	strb	r2, [r3, #0]
 8007972:	887b      	ldrh	r3, [r7, #2]
 8007974:	0a1b      	lsrs	r3, r3, #8
 8007976:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	1c5a      	adds	r2, r3, #1
 800797c:	607a      	str	r2, [r7, #4]
 800797e:	887a      	ldrh	r2, [r7, #2]
 8007980:	b2d2      	uxtb	r2, r2
 8007982:	701a      	strb	r2, [r3, #0]
}
 8007984:	bf00      	nop
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	1c5a      	adds	r2, r3, #1
 800799e:	607a      	str	r2, [r7, #4]
 80079a0:	683a      	ldr	r2, [r7, #0]
 80079a2:	b2d2      	uxtb	r2, r2
 80079a4:	701a      	strb	r2, [r3, #0]
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	0a1b      	lsrs	r3, r3, #8
 80079aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	1c5a      	adds	r2, r3, #1
 80079b0:	607a      	str	r2, [r7, #4]
 80079b2:	683a      	ldr	r2, [r7, #0]
 80079b4:	b2d2      	uxtb	r2, r2
 80079b6:	701a      	strb	r2, [r3, #0]
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	0a1b      	lsrs	r3, r3, #8
 80079bc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	1c5a      	adds	r2, r3, #1
 80079c2:	607a      	str	r2, [r7, #4]
 80079c4:	683a      	ldr	r2, [r7, #0]
 80079c6:	b2d2      	uxtb	r2, r2
 80079c8:	701a      	strb	r2, [r3, #0]
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	0a1b      	lsrs	r3, r3, #8
 80079ce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	1c5a      	adds	r2, r3, #1
 80079d4:	607a      	str	r2, [r7, #4]
 80079d6:	683a      	ldr	r2, [r7, #0]
 80079d8:	b2d2      	uxtb	r2, r2
 80079da:	701a      	strb	r2, [r3, #0]
}
 80079dc:	bf00      	nop
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80079e8:	b480      	push	{r7}
 80079ea:	b087      	sub	sp, #28
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00d      	beq.n	8007a1e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	1c53      	adds	r3, r2, #1
 8007a06:	613b      	str	r3, [r7, #16]
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	1c59      	adds	r1, r3, #1
 8007a0c:	6179      	str	r1, [r7, #20]
 8007a0e:	7812      	ldrb	r2, [r2, #0]
 8007a10:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	3b01      	subs	r3, #1
 8007a16:	607b      	str	r3, [r7, #4]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1f1      	bne.n	8007a02 <mem_cpy+0x1a>
	}
}
 8007a1e:	bf00      	nop
 8007a20:	371c      	adds	r7, #28
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr

08007a2a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007a2a:	b480      	push	{r7}
 8007a2c:	b087      	sub	sp, #28
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	60f8      	str	r0, [r7, #12]
 8007a32:	60b9      	str	r1, [r7, #8]
 8007a34:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	1c5a      	adds	r2, r3, #1
 8007a3e:	617a      	str	r2, [r7, #20]
 8007a40:	68ba      	ldr	r2, [r7, #8]
 8007a42:	b2d2      	uxtb	r2, r2
 8007a44:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	3b01      	subs	r3, #1
 8007a4a:	607b      	str	r3, [r7, #4]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1f3      	bne.n	8007a3a <mem_set+0x10>
}
 8007a52:	bf00      	nop
 8007a54:	bf00      	nop
 8007a56:	371c      	adds	r7, #28
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007a60:	b480      	push	{r7}
 8007a62:	b089      	sub	sp, #36	; 0x24
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	61fb      	str	r3, [r7, #28]
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007a74:	2300      	movs	r3, #0
 8007a76:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	1c5a      	adds	r2, r3, #1
 8007a7c:	61fa      	str	r2, [r7, #28]
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	4619      	mov	r1, r3
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	1c5a      	adds	r2, r3, #1
 8007a86:	61ba      	str	r2, [r7, #24]
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	1acb      	subs	r3, r1, r3
 8007a8c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	3b01      	subs	r3, #1
 8007a92:	607b      	str	r3, [r7, #4]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d002      	beq.n	8007aa0 <mem_cmp+0x40>
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d0eb      	beq.n	8007a78 <mem_cmp+0x18>

	return r;
 8007aa0:	697b      	ldr	r3, [r7, #20]
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3724      	adds	r7, #36	; 0x24
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr

08007aae <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007aae:	b480      	push	{r7}
 8007ab0:	b083      	sub	sp, #12
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
 8007ab6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007ab8:	e002      	b.n	8007ac0 <chk_chr+0x12>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	3301      	adds	r3, #1
 8007abe:	607b      	str	r3, [r7, #4]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d005      	beq.n	8007ad4 <chk_chr+0x26>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	461a      	mov	r2, r3
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d1f2      	bne.n	8007aba <chk_chr+0xc>
	return *str;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	781b      	ldrb	r3, [r3, #0]
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007aee:	2300      	movs	r3, #0
 8007af0:	60bb      	str	r3, [r7, #8]
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	60fb      	str	r3, [r7, #12]
 8007af6:	e029      	b.n	8007b4c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007af8:	4a27      	ldr	r2, [pc, #156]	; (8007b98 <chk_lock+0xb4>)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	011b      	lsls	r3, r3, #4
 8007afe:	4413      	add	r3, r2
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d01d      	beq.n	8007b42 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007b06:	4a24      	ldr	r2, [pc, #144]	; (8007b98 <chk_lock+0xb4>)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	011b      	lsls	r3, r3, #4
 8007b0c:	4413      	add	r3, r2
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d116      	bne.n	8007b46 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007b18:	4a1f      	ldr	r2, [pc, #124]	; (8007b98 <chk_lock+0xb4>)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	011b      	lsls	r3, r3, #4
 8007b1e:	4413      	add	r3, r2
 8007b20:	3304      	adds	r3, #4
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d10c      	bne.n	8007b46 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007b2c:	4a1a      	ldr	r2, [pc, #104]	; (8007b98 <chk_lock+0xb4>)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	011b      	lsls	r3, r3, #4
 8007b32:	4413      	add	r3, r2
 8007b34:	3308      	adds	r3, #8
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d102      	bne.n	8007b46 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007b40:	e007      	b.n	8007b52 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007b42:	2301      	movs	r3, #1
 8007b44:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	60fb      	str	r3, [r7, #12]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d9d2      	bls.n	8007af8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d109      	bne.n	8007b6c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d102      	bne.n	8007b64 <chk_lock+0x80>
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d101      	bne.n	8007b68 <chk_lock+0x84>
 8007b64:	2300      	movs	r3, #0
 8007b66:	e010      	b.n	8007b8a <chk_lock+0xa6>
 8007b68:	2312      	movs	r3, #18
 8007b6a:	e00e      	b.n	8007b8a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d108      	bne.n	8007b84 <chk_lock+0xa0>
 8007b72:	4a09      	ldr	r2, [pc, #36]	; (8007b98 <chk_lock+0xb4>)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	011b      	lsls	r3, r3, #4
 8007b78:	4413      	add	r3, r2
 8007b7a:	330c      	adds	r3, #12
 8007b7c:	881b      	ldrh	r3, [r3, #0]
 8007b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b82:	d101      	bne.n	8007b88 <chk_lock+0xa4>
 8007b84:	2310      	movs	r3, #16
 8007b86:	e000      	b.n	8007b8a <chk_lock+0xa6>
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3714      	adds	r7, #20
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr
 8007b96:	bf00      	nop
 8007b98:	2000a43c 	.word	0x2000a43c

08007b9c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	607b      	str	r3, [r7, #4]
 8007ba6:	e002      	b.n	8007bae <enq_lock+0x12>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	3301      	adds	r3, #1
 8007bac:	607b      	str	r3, [r7, #4]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d806      	bhi.n	8007bc2 <enq_lock+0x26>
 8007bb4:	4a09      	ldr	r2, [pc, #36]	; (8007bdc <enq_lock+0x40>)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	011b      	lsls	r3, r3, #4
 8007bba:	4413      	add	r3, r2
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1f2      	bne.n	8007ba8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	bf14      	ite	ne
 8007bc8:	2301      	movne	r3, #1
 8007bca:	2300      	moveq	r3, #0
 8007bcc:	b2db      	uxtb	r3, r3
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	370c      	adds	r7, #12
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr
 8007bda:	bf00      	nop
 8007bdc:	2000a43c 	.word	0x2000a43c

08007be0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b085      	sub	sp, #20
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007bea:	2300      	movs	r3, #0
 8007bec:	60fb      	str	r3, [r7, #12]
 8007bee:	e01f      	b.n	8007c30 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007bf0:	4a41      	ldr	r2, [pc, #260]	; (8007cf8 <inc_lock+0x118>)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	011b      	lsls	r3, r3, #4
 8007bf6:	4413      	add	r3, r2
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d113      	bne.n	8007c2a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007c02:	4a3d      	ldr	r2, [pc, #244]	; (8007cf8 <inc_lock+0x118>)
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	011b      	lsls	r3, r3, #4
 8007c08:	4413      	add	r3, r2
 8007c0a:	3304      	adds	r3, #4
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d109      	bne.n	8007c2a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007c16:	4a38      	ldr	r2, [pc, #224]	; (8007cf8 <inc_lock+0x118>)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	011b      	lsls	r3, r3, #4
 8007c1c:	4413      	add	r3, r2
 8007c1e:	3308      	adds	r3, #8
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d006      	beq.n	8007c38 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	60fb      	str	r3, [r7, #12]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d9dc      	bls.n	8007bf0 <inc_lock+0x10>
 8007c36:	e000      	b.n	8007c3a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007c38:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2b02      	cmp	r3, #2
 8007c3e:	d132      	bne.n	8007ca6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007c40:	2300      	movs	r3, #0
 8007c42:	60fb      	str	r3, [r7, #12]
 8007c44:	e002      	b.n	8007c4c <inc_lock+0x6c>
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	60fb      	str	r3, [r7, #12]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d806      	bhi.n	8007c60 <inc_lock+0x80>
 8007c52:	4a29      	ldr	r2, [pc, #164]	; (8007cf8 <inc_lock+0x118>)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	011b      	lsls	r3, r3, #4
 8007c58:	4413      	add	r3, r2
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d1f2      	bne.n	8007c46 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2b02      	cmp	r3, #2
 8007c64:	d101      	bne.n	8007c6a <inc_lock+0x8a>
 8007c66:	2300      	movs	r3, #0
 8007c68:	e040      	b.n	8007cec <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	4922      	ldr	r1, [pc, #136]	; (8007cf8 <inc_lock+0x118>)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	011b      	lsls	r3, r3, #4
 8007c74:	440b      	add	r3, r1
 8007c76:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	689a      	ldr	r2, [r3, #8]
 8007c7c:	491e      	ldr	r1, [pc, #120]	; (8007cf8 <inc_lock+0x118>)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	011b      	lsls	r3, r3, #4
 8007c82:	440b      	add	r3, r1
 8007c84:	3304      	adds	r3, #4
 8007c86:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	695a      	ldr	r2, [r3, #20]
 8007c8c:	491a      	ldr	r1, [pc, #104]	; (8007cf8 <inc_lock+0x118>)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	011b      	lsls	r3, r3, #4
 8007c92:	440b      	add	r3, r1
 8007c94:	3308      	adds	r3, #8
 8007c96:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007c98:	4a17      	ldr	r2, [pc, #92]	; (8007cf8 <inc_lock+0x118>)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	011b      	lsls	r3, r3, #4
 8007c9e:	4413      	add	r3, r2
 8007ca0:	330c      	adds	r3, #12
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d009      	beq.n	8007cc0 <inc_lock+0xe0>
 8007cac:	4a12      	ldr	r2, [pc, #72]	; (8007cf8 <inc_lock+0x118>)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	011b      	lsls	r3, r3, #4
 8007cb2:	4413      	add	r3, r2
 8007cb4:	330c      	adds	r3, #12
 8007cb6:	881b      	ldrh	r3, [r3, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d001      	beq.n	8007cc0 <inc_lock+0xe0>
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	e015      	b.n	8007cec <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d108      	bne.n	8007cd8 <inc_lock+0xf8>
 8007cc6:	4a0c      	ldr	r2, [pc, #48]	; (8007cf8 <inc_lock+0x118>)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	011b      	lsls	r3, r3, #4
 8007ccc:	4413      	add	r3, r2
 8007cce:	330c      	adds	r3, #12
 8007cd0:	881b      	ldrh	r3, [r3, #0]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	b29a      	uxth	r2, r3
 8007cd6:	e001      	b.n	8007cdc <inc_lock+0xfc>
 8007cd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007cdc:	4906      	ldr	r1, [pc, #24]	; (8007cf8 <inc_lock+0x118>)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	011b      	lsls	r3, r3, #4
 8007ce2:	440b      	add	r3, r1
 8007ce4:	330c      	adds	r3, #12
 8007ce6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	3301      	adds	r3, #1
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3714      	adds	r7, #20
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr
 8007cf8:	2000a43c 	.word	0x2000a43c

08007cfc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b085      	sub	sp, #20
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	3b01      	subs	r3, #1
 8007d08:	607b      	str	r3, [r7, #4]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d825      	bhi.n	8007d5c <dec_lock+0x60>
		n = Files[i].ctr;
 8007d10:	4a17      	ldr	r2, [pc, #92]	; (8007d70 <dec_lock+0x74>)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	011b      	lsls	r3, r3, #4
 8007d16:	4413      	add	r3, r2
 8007d18:	330c      	adds	r3, #12
 8007d1a:	881b      	ldrh	r3, [r3, #0]
 8007d1c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007d1e:	89fb      	ldrh	r3, [r7, #14]
 8007d20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d24:	d101      	bne.n	8007d2a <dec_lock+0x2e>
 8007d26:	2300      	movs	r3, #0
 8007d28:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007d2a:	89fb      	ldrh	r3, [r7, #14]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d002      	beq.n	8007d36 <dec_lock+0x3a>
 8007d30:	89fb      	ldrh	r3, [r7, #14]
 8007d32:	3b01      	subs	r3, #1
 8007d34:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007d36:	4a0e      	ldr	r2, [pc, #56]	; (8007d70 <dec_lock+0x74>)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	011b      	lsls	r3, r3, #4
 8007d3c:	4413      	add	r3, r2
 8007d3e:	330c      	adds	r3, #12
 8007d40:	89fa      	ldrh	r2, [r7, #14]
 8007d42:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007d44:	89fb      	ldrh	r3, [r7, #14]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d105      	bne.n	8007d56 <dec_lock+0x5a>
 8007d4a:	4a09      	ldr	r2, [pc, #36]	; (8007d70 <dec_lock+0x74>)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	011b      	lsls	r3, r3, #4
 8007d50:	4413      	add	r3, r2
 8007d52:	2200      	movs	r2, #0
 8007d54:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007d56:	2300      	movs	r3, #0
 8007d58:	737b      	strb	r3, [r7, #13]
 8007d5a:	e001      	b.n	8007d60 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007d5c:	2302      	movs	r3, #2
 8007d5e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007d60:	7b7b      	ldrb	r3, [r7, #13]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3714      	adds	r7, #20
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	2000a43c 	.word	0x2000a43c

08007d74 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b085      	sub	sp, #20
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	60fb      	str	r3, [r7, #12]
 8007d80:	e010      	b.n	8007da4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007d82:	4a0d      	ldr	r2, [pc, #52]	; (8007db8 <clear_lock+0x44>)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	011b      	lsls	r3, r3, #4
 8007d88:	4413      	add	r3, r2
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d105      	bne.n	8007d9e <clear_lock+0x2a>
 8007d92:	4a09      	ldr	r2, [pc, #36]	; (8007db8 <clear_lock+0x44>)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	011b      	lsls	r3, r3, #4
 8007d98:	4413      	add	r3, r2
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	3301      	adds	r3, #1
 8007da2:	60fb      	str	r3, [r7, #12]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d9eb      	bls.n	8007d82 <clear_lock+0xe>
	}
}
 8007daa:	bf00      	nop
 8007dac:	bf00      	nop
 8007dae:	3714      	adds	r7, #20
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr
 8007db8:	2000a43c 	.word	0x2000a43c

08007dbc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b086      	sub	sp, #24
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	78db      	ldrb	r3, [r3, #3]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d034      	beq.n	8007e3a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	7858      	ldrb	r0, [r3, #1]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007de0:	2301      	movs	r3, #1
 8007de2:	697a      	ldr	r2, [r7, #20]
 8007de4:	f7ff fd40 	bl	8007868 <disk_write>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d002      	beq.n	8007df4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	73fb      	strb	r3, [r7, #15]
 8007df2:	e022      	b.n	8007e3a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfe:	697a      	ldr	r2, [r7, #20]
 8007e00:	1ad2      	subs	r2, r2, r3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	69db      	ldr	r3, [r3, #28]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d217      	bcs.n	8007e3a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	789b      	ldrb	r3, [r3, #2]
 8007e0e:	613b      	str	r3, [r7, #16]
 8007e10:	e010      	b.n	8007e34 <sync_window+0x78>
					wsect += fs->fsize;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	69db      	ldr	r3, [r3, #28]
 8007e16:	697a      	ldr	r2, [r7, #20]
 8007e18:	4413      	add	r3, r2
 8007e1a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	7858      	ldrb	r0, [r3, #1]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007e26:	2301      	movs	r3, #1
 8007e28:	697a      	ldr	r2, [r7, #20]
 8007e2a:	f7ff fd1d 	bl	8007868 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	3b01      	subs	r3, #1
 8007e32:	613b      	str	r3, [r7, #16]
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d8eb      	bhi.n	8007e12 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3718      	adds	r7, #24
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e56:	683a      	ldr	r2, [r7, #0]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d01b      	beq.n	8007e94 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f7ff ffad 	bl	8007dbc <sync_window>
 8007e62:	4603      	mov	r3, r0
 8007e64:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007e66:	7bfb      	ldrb	r3, [r7, #15]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d113      	bne.n	8007e94 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	7858      	ldrb	r0, [r3, #1]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007e76:	2301      	movs	r3, #1
 8007e78:	683a      	ldr	r2, [r7, #0]
 8007e7a:	f7ff fcd5 	bl	8007828 <disk_read>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d004      	beq.n	8007e8e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007e84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e88:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	683a      	ldr	r2, [r7, #0]
 8007e92:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8007e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
	...

08007ea0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f7ff ff87 	bl	8007dbc <sync_window>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007eb2:	7bfb      	ldrb	r3, [r7, #15]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d159      	bne.n	8007f6c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	2b03      	cmp	r3, #3
 8007ebe:	d149      	bne.n	8007f54 <sync_fs+0xb4>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	791b      	ldrb	r3, [r3, #4]
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d145      	bne.n	8007f54 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	899b      	ldrh	r3, [r3, #12]
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	f7ff fda8 	bl	8007a2a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	3334      	adds	r3, #52	; 0x34
 8007ede:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007ee2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7ff fd37 	bl	800795a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	3334      	adds	r3, #52	; 0x34
 8007ef0:	4921      	ldr	r1, [pc, #132]	; (8007f78 <sync_fs+0xd8>)
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7ff fd4c 	bl	8007990 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	3334      	adds	r3, #52	; 0x34
 8007efc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007f00:	491e      	ldr	r1, [pc, #120]	; (8007f7c <sync_fs+0xdc>)
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7ff fd44 	bl	8007990 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	3334      	adds	r3, #52	; 0x34
 8007f0c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	695b      	ldr	r3, [r3, #20]
 8007f14:	4619      	mov	r1, r3
 8007f16:	4610      	mov	r0, r2
 8007f18:	f7ff fd3a 	bl	8007990 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	3334      	adds	r3, #52	; 0x34
 8007f20:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	691b      	ldr	r3, [r3, #16]
 8007f28:	4619      	mov	r1, r3
 8007f2a:	4610      	mov	r0, r2
 8007f2c:	f7ff fd30 	bl	8007990 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a1b      	ldr	r3, [r3, #32]
 8007f34:	1c5a      	adds	r2, r3, #1
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	7858      	ldrb	r0, [r3, #1]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f48:	2301      	movs	r3, #1
 8007f4a:	f7ff fc8d 	bl	8007868 <disk_write>
			fs->fsi_flag = 0;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	785b      	ldrb	r3, [r3, #1]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	2100      	movs	r1, #0
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f7ff fca3 	bl	80078a8 <disk_ioctl>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d001      	beq.n	8007f6c <sync_fs+0xcc>
 8007f68:	2301      	movs	r3, #1
 8007f6a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	41615252 	.word	0x41615252
 8007f7c:	61417272 	.word	0x61417272

08007f80 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	3b02      	subs	r3, #2
 8007f8e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	699b      	ldr	r3, [r3, #24]
 8007f94:	3b02      	subs	r3, #2
 8007f96:	683a      	ldr	r2, [r7, #0]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d301      	bcc.n	8007fa0 <clust2sect+0x20>
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	e008      	b.n	8007fb2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	895b      	ldrh	r3, [r3, #10]
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	fb03 f202 	mul.w	r2, r3, r2
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb0:	4413      	add	r3, r2
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	370c      	adds	r7, #12
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr

08007fbe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007fbe:	b580      	push	{r7, lr}
 8007fc0:	b086      	sub	sp, #24
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
 8007fc6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d904      	bls.n	8007fde <get_fat+0x20>
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	699b      	ldr	r3, [r3, #24]
 8007fd8:	683a      	ldr	r2, [r7, #0]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d302      	bcc.n	8007fe4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007fde:	2301      	movs	r3, #1
 8007fe0:	617b      	str	r3, [r7, #20]
 8007fe2:	e0bb      	b.n	800815c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007fe4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fe8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	2b03      	cmp	r3, #3
 8007ff0:	f000 8083 	beq.w	80080fa <get_fat+0x13c>
 8007ff4:	2b03      	cmp	r3, #3
 8007ff6:	f300 80a7 	bgt.w	8008148 <get_fat+0x18a>
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d002      	beq.n	8008004 <get_fat+0x46>
 8007ffe:	2b02      	cmp	r3, #2
 8008000:	d056      	beq.n	80080b0 <get_fat+0xf2>
 8008002:	e0a1      	b.n	8008148 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	60fb      	str	r3, [r7, #12]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	085b      	lsrs	r3, r3, #1
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	4413      	add	r3, r2
 8008010:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	899b      	ldrh	r3, [r3, #12]
 800801a:	4619      	mov	r1, r3
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008022:	4413      	add	r3, r2
 8008024:	4619      	mov	r1, r3
 8008026:	6938      	ldr	r0, [r7, #16]
 8008028:	f7ff ff0c 	bl	8007e44 <move_window>
 800802c:	4603      	mov	r3, r0
 800802e:	2b00      	cmp	r3, #0
 8008030:	f040 808d 	bne.w	800814e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	1c5a      	adds	r2, r3, #1
 8008038:	60fa      	str	r2, [r7, #12]
 800803a:	693a      	ldr	r2, [r7, #16]
 800803c:	8992      	ldrh	r2, [r2, #12]
 800803e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008042:	fb01 f202 	mul.w	r2, r1, r2
 8008046:	1a9b      	subs	r3, r3, r2
 8008048:	693a      	ldr	r2, [r7, #16]
 800804a:	4413      	add	r3, r2
 800804c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008050:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	899b      	ldrh	r3, [r3, #12]
 800805a:	4619      	mov	r1, r3
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008062:	4413      	add	r3, r2
 8008064:	4619      	mov	r1, r3
 8008066:	6938      	ldr	r0, [r7, #16]
 8008068:	f7ff feec 	bl	8007e44 <move_window>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d16f      	bne.n	8008152 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	899b      	ldrh	r3, [r3, #12]
 8008076:	461a      	mov	r2, r3
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	fbb3 f1f2 	udiv	r1, r3, r2
 800807e:	fb01 f202 	mul.w	r2, r1, r2
 8008082:	1a9b      	subs	r3, r3, r2
 8008084:	693a      	ldr	r2, [r7, #16]
 8008086:	4413      	add	r3, r2
 8008088:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800808c:	021b      	lsls	r3, r3, #8
 800808e:	461a      	mov	r2, r3
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	4313      	orrs	r3, r2
 8008094:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	f003 0301 	and.w	r3, r3, #1
 800809c:	2b00      	cmp	r3, #0
 800809e:	d002      	beq.n	80080a6 <get_fat+0xe8>
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	091b      	lsrs	r3, r3, #4
 80080a4:	e002      	b.n	80080ac <get_fat+0xee>
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080ac:	617b      	str	r3, [r7, #20]
			break;
 80080ae:	e055      	b.n	800815c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	899b      	ldrh	r3, [r3, #12]
 80080b8:	085b      	lsrs	r3, r3, #1
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	4619      	mov	r1, r3
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80080c4:	4413      	add	r3, r2
 80080c6:	4619      	mov	r1, r3
 80080c8:	6938      	ldr	r0, [r7, #16]
 80080ca:	f7ff febb 	bl	8007e44 <move_window>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d140      	bne.n	8008156 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	005b      	lsls	r3, r3, #1
 80080de:	693a      	ldr	r2, [r7, #16]
 80080e0:	8992      	ldrh	r2, [r2, #12]
 80080e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80080e6:	fb00 f202 	mul.w	r2, r0, r2
 80080ea:	1a9b      	subs	r3, r3, r2
 80080ec:	440b      	add	r3, r1
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7ff fbf8 	bl	80078e4 <ld_word>
 80080f4:	4603      	mov	r3, r0
 80080f6:	617b      	str	r3, [r7, #20]
			break;
 80080f8:	e030      	b.n	800815c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	899b      	ldrh	r3, [r3, #12]
 8008102:	089b      	lsrs	r3, r3, #2
 8008104:	b29b      	uxth	r3, r3
 8008106:	4619      	mov	r1, r3
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	fbb3 f3f1 	udiv	r3, r3, r1
 800810e:	4413      	add	r3, r2
 8008110:	4619      	mov	r1, r3
 8008112:	6938      	ldr	r0, [r7, #16]
 8008114:	f7ff fe96 	bl	8007e44 <move_window>
 8008118:	4603      	mov	r3, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d11d      	bne.n	800815a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	693a      	ldr	r2, [r7, #16]
 800812a:	8992      	ldrh	r2, [r2, #12]
 800812c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008130:	fb00 f202 	mul.w	r2, r0, r2
 8008134:	1a9b      	subs	r3, r3, r2
 8008136:	440b      	add	r3, r1
 8008138:	4618      	mov	r0, r3
 800813a:	f7ff fbeb 	bl	8007914 <ld_dword>
 800813e:	4603      	mov	r3, r0
 8008140:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008144:	617b      	str	r3, [r7, #20]
			break;
 8008146:	e009      	b.n	800815c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008148:	2301      	movs	r3, #1
 800814a:	617b      	str	r3, [r7, #20]
 800814c:	e006      	b.n	800815c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800814e:	bf00      	nop
 8008150:	e004      	b.n	800815c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008152:	bf00      	nop
 8008154:	e002      	b.n	800815c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008156:	bf00      	nop
 8008158:	e000      	b.n	800815c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800815a:	bf00      	nop
		}
	}

	return val;
 800815c:	697b      	ldr	r3, [r7, #20]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3718      	adds	r7, #24
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008166:	b590      	push	{r4, r7, lr}
 8008168:	b089      	sub	sp, #36	; 0x24
 800816a:	af00      	add	r7, sp, #0
 800816c:	60f8      	str	r0, [r7, #12]
 800816e:	60b9      	str	r1, [r7, #8]
 8008170:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008172:	2302      	movs	r3, #2
 8008174:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	2b01      	cmp	r3, #1
 800817a:	f240 8102 	bls.w	8008382 <put_fat+0x21c>
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	699b      	ldr	r3, [r3, #24]
 8008182:	68ba      	ldr	r2, [r7, #8]
 8008184:	429a      	cmp	r2, r3
 8008186:	f080 80fc 	bcs.w	8008382 <put_fat+0x21c>
		switch (fs->fs_type) {
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	2b03      	cmp	r3, #3
 8008190:	f000 80b6 	beq.w	8008300 <put_fat+0x19a>
 8008194:	2b03      	cmp	r3, #3
 8008196:	f300 80fd 	bgt.w	8008394 <put_fat+0x22e>
 800819a:	2b01      	cmp	r3, #1
 800819c:	d003      	beq.n	80081a6 <put_fat+0x40>
 800819e:	2b02      	cmp	r3, #2
 80081a0:	f000 8083 	beq.w	80082aa <put_fat+0x144>
 80081a4:	e0f6      	b.n	8008394 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	61bb      	str	r3, [r7, #24]
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	085b      	lsrs	r3, r3, #1
 80081ae:	69ba      	ldr	r2, [r7, #24]
 80081b0:	4413      	add	r3, r2
 80081b2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	899b      	ldrh	r3, [r3, #12]
 80081bc:	4619      	mov	r1, r3
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80081c4:	4413      	add	r3, r2
 80081c6:	4619      	mov	r1, r3
 80081c8:	68f8      	ldr	r0, [r7, #12]
 80081ca:	f7ff fe3b 	bl	8007e44 <move_window>
 80081ce:	4603      	mov	r3, r0
 80081d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80081d2:	7ffb      	ldrb	r3, [r7, #31]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	f040 80d6 	bne.w	8008386 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	1c5a      	adds	r2, r3, #1
 80081e4:	61ba      	str	r2, [r7, #24]
 80081e6:	68fa      	ldr	r2, [r7, #12]
 80081e8:	8992      	ldrh	r2, [r2, #12]
 80081ea:	fbb3 f0f2 	udiv	r0, r3, r2
 80081ee:	fb00 f202 	mul.w	r2, r0, r2
 80081f2:	1a9b      	subs	r3, r3, r2
 80081f4:	440b      	add	r3, r1
 80081f6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	f003 0301 	and.w	r3, r3, #1
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00d      	beq.n	800821e <put_fat+0xb8>
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	b25b      	sxtb	r3, r3
 8008208:	f003 030f 	and.w	r3, r3, #15
 800820c:	b25a      	sxtb	r2, r3
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	b2db      	uxtb	r3, r3
 8008212:	011b      	lsls	r3, r3, #4
 8008214:	b25b      	sxtb	r3, r3
 8008216:	4313      	orrs	r3, r2
 8008218:	b25b      	sxtb	r3, r3
 800821a:	b2db      	uxtb	r3, r3
 800821c:	e001      	b.n	8008222 <put_fat+0xbc>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	b2db      	uxtb	r3, r3
 8008222:	697a      	ldr	r2, [r7, #20]
 8008224:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2201      	movs	r2, #1
 800822a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	899b      	ldrh	r3, [r3, #12]
 8008234:	4619      	mov	r1, r3
 8008236:	69bb      	ldr	r3, [r7, #24]
 8008238:	fbb3 f3f1 	udiv	r3, r3, r1
 800823c:	4413      	add	r3, r2
 800823e:	4619      	mov	r1, r3
 8008240:	68f8      	ldr	r0, [r7, #12]
 8008242:	f7ff fdff 	bl	8007e44 <move_window>
 8008246:	4603      	mov	r3, r0
 8008248:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800824a:	7ffb      	ldrb	r3, [r7, #31]
 800824c:	2b00      	cmp	r3, #0
 800824e:	f040 809c 	bne.w	800838a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	899b      	ldrh	r3, [r3, #12]
 800825c:	461a      	mov	r2, r3
 800825e:	69bb      	ldr	r3, [r7, #24]
 8008260:	fbb3 f0f2 	udiv	r0, r3, r2
 8008264:	fb00 f202 	mul.w	r2, r0, r2
 8008268:	1a9b      	subs	r3, r3, r2
 800826a:	440b      	add	r3, r1
 800826c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	f003 0301 	and.w	r3, r3, #1
 8008274:	2b00      	cmp	r3, #0
 8008276:	d003      	beq.n	8008280 <put_fat+0x11a>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	091b      	lsrs	r3, r3, #4
 800827c:	b2db      	uxtb	r3, r3
 800827e:	e00e      	b.n	800829e <put_fat+0x138>
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	b25b      	sxtb	r3, r3
 8008286:	f023 030f 	bic.w	r3, r3, #15
 800828a:	b25a      	sxtb	r2, r3
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	0a1b      	lsrs	r3, r3, #8
 8008290:	b25b      	sxtb	r3, r3
 8008292:	f003 030f 	and.w	r3, r3, #15
 8008296:	b25b      	sxtb	r3, r3
 8008298:	4313      	orrs	r3, r2
 800829a:	b25b      	sxtb	r3, r3
 800829c:	b2db      	uxtb	r3, r3
 800829e:	697a      	ldr	r2, [r7, #20]
 80082a0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2201      	movs	r2, #1
 80082a6:	70da      	strb	r2, [r3, #3]
			break;
 80082a8:	e074      	b.n	8008394 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	899b      	ldrh	r3, [r3, #12]
 80082b2:	085b      	lsrs	r3, r3, #1
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	4619      	mov	r1, r3
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80082be:	4413      	add	r3, r2
 80082c0:	4619      	mov	r1, r3
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f7ff fdbe 	bl	8007e44 <move_window>
 80082c8:	4603      	mov	r3, r0
 80082ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80082cc:	7ffb      	ldrb	r3, [r7, #31]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d15d      	bne.n	800838e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	005b      	lsls	r3, r3, #1
 80082dc:	68fa      	ldr	r2, [r7, #12]
 80082de:	8992      	ldrh	r2, [r2, #12]
 80082e0:	fbb3 f0f2 	udiv	r0, r3, r2
 80082e4:	fb00 f202 	mul.w	r2, r0, r2
 80082e8:	1a9b      	subs	r3, r3, r2
 80082ea:	440b      	add	r3, r1
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	b292      	uxth	r2, r2
 80082f0:	4611      	mov	r1, r2
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7ff fb31 	bl	800795a <st_word>
			fs->wflag = 1;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2201      	movs	r2, #1
 80082fc:	70da      	strb	r2, [r3, #3]
			break;
 80082fe:	e049      	b.n	8008394 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	899b      	ldrh	r3, [r3, #12]
 8008308:	089b      	lsrs	r3, r3, #2
 800830a:	b29b      	uxth	r3, r3
 800830c:	4619      	mov	r1, r3
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	fbb3 f3f1 	udiv	r3, r3, r1
 8008314:	4413      	add	r3, r2
 8008316:	4619      	mov	r1, r3
 8008318:	68f8      	ldr	r0, [r7, #12]
 800831a:	f7ff fd93 	bl	8007e44 <move_window>
 800831e:	4603      	mov	r3, r0
 8008320:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008322:	7ffb      	ldrb	r3, [r7, #31]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d134      	bne.n	8008392 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	68fa      	ldr	r2, [r7, #12]
 800833a:	8992      	ldrh	r2, [r2, #12]
 800833c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008340:	fb00 f202 	mul.w	r2, r0, r2
 8008344:	1a9b      	subs	r3, r3, r2
 8008346:	440b      	add	r3, r1
 8008348:	4618      	mov	r0, r3
 800834a:	f7ff fae3 	bl	8007914 <ld_dword>
 800834e:	4603      	mov	r3, r0
 8008350:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008354:	4323      	orrs	r3, r4
 8008356:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	8992      	ldrh	r2, [r2, #12]
 8008366:	fbb3 f0f2 	udiv	r0, r3, r2
 800836a:	fb00 f202 	mul.w	r2, r0, r2
 800836e:	1a9b      	subs	r3, r3, r2
 8008370:	440b      	add	r3, r1
 8008372:	6879      	ldr	r1, [r7, #4]
 8008374:	4618      	mov	r0, r3
 8008376:	f7ff fb0b 	bl	8007990 <st_dword>
			fs->wflag = 1;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2201      	movs	r2, #1
 800837e:	70da      	strb	r2, [r3, #3]
			break;
 8008380:	e008      	b.n	8008394 <put_fat+0x22e>
		}
	}
 8008382:	bf00      	nop
 8008384:	e006      	b.n	8008394 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008386:	bf00      	nop
 8008388:	e004      	b.n	8008394 <put_fat+0x22e>
			if (res != FR_OK) break;
 800838a:	bf00      	nop
 800838c:	e002      	b.n	8008394 <put_fat+0x22e>
			if (res != FR_OK) break;
 800838e:	bf00      	nop
 8008390:	e000      	b.n	8008394 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008392:	bf00      	nop
	return res;
 8008394:	7ffb      	ldrb	r3, [r7, #31]
}
 8008396:	4618      	mov	r0, r3
 8008398:	3724      	adds	r7, #36	; 0x24
 800839a:	46bd      	mov	sp, r7
 800839c:	bd90      	pop	{r4, r7, pc}

0800839e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b088      	sub	sp, #32
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	60f8      	str	r0, [r7, #12]
 80083a6:	60b9      	str	r1, [r7, #8]
 80083a8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80083aa:	2300      	movs	r3, #0
 80083ac:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d904      	bls.n	80083c4 <remove_chain+0x26>
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	699b      	ldr	r3, [r3, #24]
 80083be:	68ba      	ldr	r2, [r7, #8]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d301      	bcc.n	80083c8 <remove_chain+0x2a>
 80083c4:	2302      	movs	r3, #2
 80083c6:	e04b      	b.n	8008460 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00c      	beq.n	80083e8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80083ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80083d2:	6879      	ldr	r1, [r7, #4]
 80083d4:	69b8      	ldr	r0, [r7, #24]
 80083d6:	f7ff fec6 	bl	8008166 <put_fat>
 80083da:	4603      	mov	r3, r0
 80083dc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80083de:	7ffb      	ldrb	r3, [r7, #31]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d001      	beq.n	80083e8 <remove_chain+0x4a>
 80083e4:	7ffb      	ldrb	r3, [r7, #31]
 80083e6:	e03b      	b.n	8008460 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80083e8:	68b9      	ldr	r1, [r7, #8]
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f7ff fde7 	bl	8007fbe <get_fat>
 80083f0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d031      	beq.n	800845c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d101      	bne.n	8008402 <remove_chain+0x64>
 80083fe:	2302      	movs	r3, #2
 8008400:	e02e      	b.n	8008460 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008408:	d101      	bne.n	800840e <remove_chain+0x70>
 800840a:	2301      	movs	r3, #1
 800840c:	e028      	b.n	8008460 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800840e:	2200      	movs	r2, #0
 8008410:	68b9      	ldr	r1, [r7, #8]
 8008412:	69b8      	ldr	r0, [r7, #24]
 8008414:	f7ff fea7 	bl	8008166 <put_fat>
 8008418:	4603      	mov	r3, r0
 800841a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800841c:	7ffb      	ldrb	r3, [r7, #31]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d001      	beq.n	8008426 <remove_chain+0x88>
 8008422:	7ffb      	ldrb	r3, [r7, #31]
 8008424:	e01c      	b.n	8008460 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	695a      	ldr	r2, [r3, #20]
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	699b      	ldr	r3, [r3, #24]
 800842e:	3b02      	subs	r3, #2
 8008430:	429a      	cmp	r2, r3
 8008432:	d20b      	bcs.n	800844c <remove_chain+0xae>
			fs->free_clst++;
 8008434:	69bb      	ldr	r3, [r7, #24]
 8008436:	695b      	ldr	r3, [r3, #20]
 8008438:	1c5a      	adds	r2, r3, #1
 800843a:	69bb      	ldr	r3, [r7, #24]
 800843c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	791b      	ldrb	r3, [r3, #4]
 8008442:	f043 0301 	orr.w	r3, r3, #1
 8008446:	b2da      	uxtb	r2, r3
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	699b      	ldr	r3, [r3, #24]
 8008454:	68ba      	ldr	r2, [r7, #8]
 8008456:	429a      	cmp	r2, r3
 8008458:	d3c6      	bcc.n	80083e8 <remove_chain+0x4a>
 800845a:	e000      	b.n	800845e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800845c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800845e:	2300      	movs	r3, #0
}
 8008460:	4618      	mov	r0, r3
 8008462:	3720      	adds	r7, #32
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b088      	sub	sp, #32
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d10d      	bne.n	800849a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	691b      	ldr	r3, [r3, #16]
 8008482:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d004      	beq.n	8008494 <create_chain+0x2c>
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	699b      	ldr	r3, [r3, #24]
 800848e:	69ba      	ldr	r2, [r7, #24]
 8008490:	429a      	cmp	r2, r3
 8008492:	d31b      	bcc.n	80084cc <create_chain+0x64>
 8008494:	2301      	movs	r3, #1
 8008496:	61bb      	str	r3, [r7, #24]
 8008498:	e018      	b.n	80084cc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800849a:	6839      	ldr	r1, [r7, #0]
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f7ff fd8e 	bl	8007fbe <get_fat>
 80084a2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d801      	bhi.n	80084ae <create_chain+0x46>
 80084aa:	2301      	movs	r3, #1
 80084ac:	e070      	b.n	8008590 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084b4:	d101      	bne.n	80084ba <create_chain+0x52>
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	e06a      	b.n	8008590 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	699b      	ldr	r3, [r3, #24]
 80084be:	68fa      	ldr	r2, [r7, #12]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d201      	bcs.n	80084c8 <create_chain+0x60>
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	e063      	b.n	8008590 <create_chain+0x128>
		scl = clst;
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80084d0:	69fb      	ldr	r3, [r7, #28]
 80084d2:	3301      	adds	r3, #1
 80084d4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	699b      	ldr	r3, [r3, #24]
 80084da:	69fa      	ldr	r2, [r7, #28]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d307      	bcc.n	80084f0 <create_chain+0x88>
				ncl = 2;
 80084e0:	2302      	movs	r3, #2
 80084e2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80084e4:	69fa      	ldr	r2, [r7, #28]
 80084e6:	69bb      	ldr	r3, [r7, #24]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d901      	bls.n	80084f0 <create_chain+0x88>
 80084ec:	2300      	movs	r3, #0
 80084ee:	e04f      	b.n	8008590 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80084f0:	69f9      	ldr	r1, [r7, #28]
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f7ff fd63 	bl	8007fbe <get_fat>
 80084f8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d00e      	beq.n	800851e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2b01      	cmp	r3, #1
 8008504:	d003      	beq.n	800850e <create_chain+0xa6>
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800850c:	d101      	bne.n	8008512 <create_chain+0xaa>
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	e03e      	b.n	8008590 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008512:	69fa      	ldr	r2, [r7, #28]
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	429a      	cmp	r2, r3
 8008518:	d1da      	bne.n	80084d0 <create_chain+0x68>
 800851a:	2300      	movs	r3, #0
 800851c:	e038      	b.n	8008590 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800851e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008520:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008524:	69f9      	ldr	r1, [r7, #28]
 8008526:	6938      	ldr	r0, [r7, #16]
 8008528:	f7ff fe1d 	bl	8008166 <put_fat>
 800852c:	4603      	mov	r3, r0
 800852e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008530:	7dfb      	ldrb	r3, [r7, #23]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d109      	bne.n	800854a <create_chain+0xe2>
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d006      	beq.n	800854a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800853c:	69fa      	ldr	r2, [r7, #28]
 800853e:	6839      	ldr	r1, [r7, #0]
 8008540:	6938      	ldr	r0, [r7, #16]
 8008542:	f7ff fe10 	bl	8008166 <put_fat>
 8008546:	4603      	mov	r3, r0
 8008548:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800854a:	7dfb      	ldrb	r3, [r7, #23]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d116      	bne.n	800857e <create_chain+0x116>
		fs->last_clst = ncl;
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	69fa      	ldr	r2, [r7, #28]
 8008554:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	695a      	ldr	r2, [r3, #20]
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	699b      	ldr	r3, [r3, #24]
 800855e:	3b02      	subs	r3, #2
 8008560:	429a      	cmp	r2, r3
 8008562:	d804      	bhi.n	800856e <create_chain+0x106>
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	695b      	ldr	r3, [r3, #20]
 8008568:	1e5a      	subs	r2, r3, #1
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	791b      	ldrb	r3, [r3, #4]
 8008572:	f043 0301 	orr.w	r3, r3, #1
 8008576:	b2da      	uxtb	r2, r3
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	711a      	strb	r2, [r3, #4]
 800857c:	e007      	b.n	800858e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800857e:	7dfb      	ldrb	r3, [r7, #23]
 8008580:	2b01      	cmp	r3, #1
 8008582:	d102      	bne.n	800858a <create_chain+0x122>
 8008584:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008588:	e000      	b.n	800858c <create_chain+0x124>
 800858a:	2301      	movs	r3, #1
 800858c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800858e:	69fb      	ldr	r3, [r7, #28]
}
 8008590:	4618      	mov	r0, r3
 8008592:	3720      	adds	r7, #32
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008598:	b480      	push	{r7}
 800859a:	b087      	sub	sp, #28
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ac:	3304      	adds	r3, #4
 80085ae:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	899b      	ldrh	r3, [r3, #12]
 80085b4:	461a      	mov	r2, r3
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	8952      	ldrh	r2, [r2, #10]
 80085c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80085c4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	1d1a      	adds	r2, r3, #4
 80085ca:	613a      	str	r2, [r7, #16]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d101      	bne.n	80085da <clmt_clust+0x42>
 80085d6:	2300      	movs	r3, #0
 80085d8:	e010      	b.n	80085fc <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80085da:	697a      	ldr	r2, [r7, #20]
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	429a      	cmp	r2, r3
 80085e0:	d307      	bcc.n	80085f2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80085e2:	697a      	ldr	r2, [r7, #20]
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	1ad3      	subs	r3, r2, r3
 80085e8:	617b      	str	r3, [r7, #20]
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	3304      	adds	r3, #4
 80085ee:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80085f0:	e7e9      	b.n	80085c6 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80085f2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	4413      	add	r3, r2
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	371c      	adds	r7, #28
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b086      	sub	sp, #24
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800861e:	d204      	bcs.n	800862a <dir_sdi+0x22>
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	f003 031f 	and.w	r3, r3, #31
 8008626:	2b00      	cmp	r3, #0
 8008628:	d001      	beq.n	800862e <dir_sdi+0x26>
		return FR_INT_ERR;
 800862a:	2302      	movs	r3, #2
 800862c:	e071      	b.n	8008712 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	683a      	ldr	r2, [r7, #0]
 8008632:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d106      	bne.n	800864e <dir_sdi+0x46>
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	2b02      	cmp	r3, #2
 8008646:	d902      	bls.n	800864e <dir_sdi+0x46>
		clst = fs->dirbase;
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800864c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d10c      	bne.n	800866e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	095b      	lsrs	r3, r3, #5
 8008658:	693a      	ldr	r2, [r7, #16]
 800865a:	8912      	ldrh	r2, [r2, #8]
 800865c:	4293      	cmp	r3, r2
 800865e:	d301      	bcc.n	8008664 <dir_sdi+0x5c>
 8008660:	2302      	movs	r3, #2
 8008662:	e056      	b.n	8008712 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	61da      	str	r2, [r3, #28]
 800866c:	e02d      	b.n	80086ca <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	895b      	ldrh	r3, [r3, #10]
 8008672:	461a      	mov	r2, r3
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	899b      	ldrh	r3, [r3, #12]
 8008678:	fb02 f303 	mul.w	r3, r2, r3
 800867c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800867e:	e019      	b.n	80086b4 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6979      	ldr	r1, [r7, #20]
 8008684:	4618      	mov	r0, r3
 8008686:	f7ff fc9a 	bl	8007fbe <get_fat>
 800868a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008692:	d101      	bne.n	8008698 <dir_sdi+0x90>
 8008694:	2301      	movs	r3, #1
 8008696:	e03c      	b.n	8008712 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	2b01      	cmp	r3, #1
 800869c:	d904      	bls.n	80086a8 <dir_sdi+0xa0>
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	699b      	ldr	r3, [r3, #24]
 80086a2:	697a      	ldr	r2, [r7, #20]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d301      	bcc.n	80086ac <dir_sdi+0xa4>
 80086a8:	2302      	movs	r3, #2
 80086aa:	e032      	b.n	8008712 <dir_sdi+0x10a>
			ofs -= csz;
 80086ac:	683a      	ldr	r2, [r7, #0]
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	1ad3      	subs	r3, r2, r3
 80086b2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80086b4:	683a      	ldr	r2, [r7, #0]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d2e1      	bcs.n	8008680 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80086bc:	6979      	ldr	r1, [r7, #20]
 80086be:	6938      	ldr	r0, [r7, #16]
 80086c0:	f7ff fc5e 	bl	8007f80 <clust2sect>
 80086c4:	4602      	mov	r2, r0
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	697a      	ldr	r2, [r7, #20]
 80086ce:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	69db      	ldr	r3, [r3, #28]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d101      	bne.n	80086dc <dir_sdi+0xd4>
 80086d8:	2302      	movs	r3, #2
 80086da:	e01a      	b.n	8008712 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	69da      	ldr	r2, [r3, #28]
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	899b      	ldrh	r3, [r3, #12]
 80086e4:	4619      	mov	r1, r3
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80086ec:	441a      	add	r2, r3
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	899b      	ldrh	r3, [r3, #12]
 80086fc:	461a      	mov	r2, r3
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	fbb3 f0f2 	udiv	r0, r3, r2
 8008704:	fb00 f202 	mul.w	r2, r0, r2
 8008708:	1a9b      	subs	r3, r3, r2
 800870a:	18ca      	adds	r2, r1, r3
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3718      	adds	r7, #24
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800871a:	b580      	push	{r7, lr}
 800871c:	b086      	sub	sp, #24
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
 8008722:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	695b      	ldr	r3, [r3, #20]
 800872e:	3320      	adds	r3, #32
 8008730:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	69db      	ldr	r3, [r3, #28]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d003      	beq.n	8008742 <dir_next+0x28>
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008740:	d301      	bcc.n	8008746 <dir_next+0x2c>
 8008742:	2304      	movs	r3, #4
 8008744:	e0bb      	b.n	80088be <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	899b      	ldrh	r3, [r3, #12]
 800874a:	461a      	mov	r2, r3
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008752:	fb01 f202 	mul.w	r2, r1, r2
 8008756:	1a9b      	subs	r3, r3, r2
 8008758:	2b00      	cmp	r3, #0
 800875a:	f040 809d 	bne.w	8008898 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	69db      	ldr	r3, [r3, #28]
 8008762:	1c5a      	adds	r2, r3, #1
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	699b      	ldr	r3, [r3, #24]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d10b      	bne.n	8008788 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	095b      	lsrs	r3, r3, #5
 8008774:	68fa      	ldr	r2, [r7, #12]
 8008776:	8912      	ldrh	r2, [r2, #8]
 8008778:	4293      	cmp	r3, r2
 800877a:	f0c0 808d 	bcc.w	8008898 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2200      	movs	r2, #0
 8008782:	61da      	str	r2, [r3, #28]
 8008784:	2304      	movs	r3, #4
 8008786:	e09a      	b.n	80088be <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	899b      	ldrh	r3, [r3, #12]
 800878c:	461a      	mov	r2, r3
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	fbb3 f3f2 	udiv	r3, r3, r2
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	8952      	ldrh	r2, [r2, #10]
 8008798:	3a01      	subs	r2, #1
 800879a:	4013      	ands	r3, r2
 800879c:	2b00      	cmp	r3, #0
 800879e:	d17b      	bne.n	8008898 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	699b      	ldr	r3, [r3, #24]
 80087a6:	4619      	mov	r1, r3
 80087a8:	4610      	mov	r0, r2
 80087aa:	f7ff fc08 	bl	8007fbe <get_fat>
 80087ae:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d801      	bhi.n	80087ba <dir_next+0xa0>
 80087b6:	2302      	movs	r3, #2
 80087b8:	e081      	b.n	80088be <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087c0:	d101      	bne.n	80087c6 <dir_next+0xac>
 80087c2:	2301      	movs	r3, #1
 80087c4:	e07b      	b.n	80088be <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	699b      	ldr	r3, [r3, #24]
 80087ca:	697a      	ldr	r2, [r7, #20]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d359      	bcc.n	8008884 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d104      	bne.n	80087e0 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	61da      	str	r2, [r3, #28]
 80087dc:	2304      	movs	r3, #4
 80087de:	e06e      	b.n	80088be <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	699b      	ldr	r3, [r3, #24]
 80087e6:	4619      	mov	r1, r3
 80087e8:	4610      	mov	r0, r2
 80087ea:	f7ff fe3d 	bl	8008468 <create_chain>
 80087ee:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d101      	bne.n	80087fa <dir_next+0xe0>
 80087f6:	2307      	movs	r3, #7
 80087f8:	e061      	b.n	80088be <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d101      	bne.n	8008804 <dir_next+0xea>
 8008800:	2302      	movs	r3, #2
 8008802:	e05c      	b.n	80088be <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800880a:	d101      	bne.n	8008810 <dir_next+0xf6>
 800880c:	2301      	movs	r3, #1
 800880e:	e056      	b.n	80088be <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008810:	68f8      	ldr	r0, [r7, #12]
 8008812:	f7ff fad3 	bl	8007dbc <sync_window>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d001      	beq.n	8008820 <dir_next+0x106>
 800881c:	2301      	movs	r3, #1
 800881e:	e04e      	b.n	80088be <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	899b      	ldrh	r3, [r3, #12]
 800882a:	461a      	mov	r2, r3
 800882c:	2100      	movs	r1, #0
 800882e:	f7ff f8fc 	bl	8007a2a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008832:	2300      	movs	r3, #0
 8008834:	613b      	str	r3, [r7, #16]
 8008836:	6979      	ldr	r1, [r7, #20]
 8008838:	68f8      	ldr	r0, [r7, #12]
 800883a:	f7ff fba1 	bl	8007f80 <clust2sect>
 800883e:	4602      	mov	r2, r0
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	631a      	str	r2, [r3, #48]	; 0x30
 8008844:	e012      	b.n	800886c <dir_next+0x152>
						fs->wflag = 1;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2201      	movs	r2, #1
 800884a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800884c:	68f8      	ldr	r0, [r7, #12]
 800884e:	f7ff fab5 	bl	8007dbc <sync_window>
 8008852:	4603      	mov	r3, r0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d001      	beq.n	800885c <dir_next+0x142>
 8008858:	2301      	movs	r3, #1
 800885a:	e030      	b.n	80088be <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	3301      	adds	r3, #1
 8008860:	613b      	str	r3, [r7, #16]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008866:	1c5a      	adds	r2, r3, #1
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	631a      	str	r2, [r3, #48]	; 0x30
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	895b      	ldrh	r3, [r3, #10]
 8008870:	461a      	mov	r2, r3
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	4293      	cmp	r3, r2
 8008876:	d3e6      	bcc.n	8008846 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	1ad2      	subs	r2, r2, r3
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	697a      	ldr	r2, [r7, #20]
 8008888:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800888a:	6979      	ldr	r1, [r7, #20]
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f7ff fb77 	bl	8007f80 <clust2sect>
 8008892:	4602      	mov	r2, r0
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	68ba      	ldr	r2, [r7, #8]
 800889c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	899b      	ldrh	r3, [r3, #12]
 80088a8:	461a      	mov	r2, r3
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	fbb3 f0f2 	udiv	r0, r3, r2
 80088b0:	fb00 f202 	mul.w	r2, r0, r2
 80088b4:	1a9b      	subs	r3, r3, r2
 80088b6:	18ca      	adds	r2, r1, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3718      	adds	r7, #24
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b086      	sub	sp, #24
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
 80088ce:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80088d6:	2100      	movs	r1, #0
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f7ff fe95 	bl	8008608 <dir_sdi>
 80088de:	4603      	mov	r3, r0
 80088e0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80088e2:	7dfb      	ldrb	r3, [r7, #23]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d12b      	bne.n	8008940 <dir_alloc+0x7a>
		n = 0;
 80088e8:	2300      	movs	r3, #0
 80088ea:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	69db      	ldr	r3, [r3, #28]
 80088f0:	4619      	mov	r1, r3
 80088f2:	68f8      	ldr	r0, [r7, #12]
 80088f4:	f7ff faa6 	bl	8007e44 <move_window>
 80088f8:	4603      	mov	r3, r0
 80088fa:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80088fc:	7dfb      	ldrb	r3, [r7, #23]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d11d      	bne.n	800893e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a1b      	ldr	r3, [r3, #32]
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	2be5      	cmp	r3, #229	; 0xe5
 800890a:	d004      	beq.n	8008916 <dir_alloc+0x50>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6a1b      	ldr	r3, [r3, #32]
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d107      	bne.n	8008926 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	3301      	adds	r3, #1
 800891a:	613b      	str	r3, [r7, #16]
 800891c:	693a      	ldr	r2, [r7, #16]
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	429a      	cmp	r2, r3
 8008922:	d102      	bne.n	800892a <dir_alloc+0x64>
 8008924:	e00c      	b.n	8008940 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008926:	2300      	movs	r3, #0
 8008928:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800892a:	2101      	movs	r1, #1
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f7ff fef4 	bl	800871a <dir_next>
 8008932:	4603      	mov	r3, r0
 8008934:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008936:	7dfb      	ldrb	r3, [r7, #23]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d0d7      	beq.n	80088ec <dir_alloc+0x26>
 800893c:	e000      	b.n	8008940 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800893e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008940:	7dfb      	ldrb	r3, [r7, #23]
 8008942:	2b04      	cmp	r3, #4
 8008944:	d101      	bne.n	800894a <dir_alloc+0x84>
 8008946:	2307      	movs	r3, #7
 8008948:	75fb      	strb	r3, [r7, #23]
	return res;
 800894a:	7dfb      	ldrb	r3, [r7, #23]
}
 800894c:	4618      	mov	r0, r3
 800894e:	3718      	adds	r7, #24
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	331a      	adds	r3, #26
 8008962:	4618      	mov	r0, r3
 8008964:	f7fe ffbe 	bl	80078e4 <ld_word>
 8008968:	4603      	mov	r3, r0
 800896a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	2b03      	cmp	r3, #3
 8008972:	d109      	bne.n	8008988 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	3314      	adds	r3, #20
 8008978:	4618      	mov	r0, r3
 800897a:	f7fe ffb3 	bl	80078e4 <ld_word>
 800897e:	4603      	mov	r3, r0
 8008980:	041b      	lsls	r3, r3, #16
 8008982:	68fa      	ldr	r2, [r7, #12]
 8008984:	4313      	orrs	r3, r2
 8008986:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008988:	68fb      	ldr	r3, [r7, #12]
}
 800898a:	4618      	mov	r0, r3
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}

08008992 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008992:	b580      	push	{r7, lr}
 8008994:	b084      	sub	sp, #16
 8008996:	af00      	add	r7, sp, #0
 8008998:	60f8      	str	r0, [r7, #12]
 800899a:	60b9      	str	r1, [r7, #8]
 800899c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	331a      	adds	r3, #26
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	b292      	uxth	r2, r2
 80089a6:	4611      	mov	r1, r2
 80089a8:	4618      	mov	r0, r3
 80089aa:	f7fe ffd6 	bl	800795a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	2b03      	cmp	r3, #3
 80089b4:	d109      	bne.n	80089ca <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	f103 0214 	add.w	r2, r3, #20
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	0c1b      	lsrs	r3, r3, #16
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	4619      	mov	r1, r3
 80089c4:	4610      	mov	r0, r2
 80089c6:	f7fe ffc8 	bl	800795a <st_word>
	}
}
 80089ca:	bf00      	nop
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b086      	sub	sp, #24
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80089e0:	2100      	movs	r1, #0
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f7ff fe10 	bl	8008608 <dir_sdi>
 80089e8:	4603      	mov	r3, r0
 80089ea:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80089ec:	7dfb      	ldrb	r3, [r7, #23]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d001      	beq.n	80089f6 <dir_find+0x24>
 80089f2:	7dfb      	ldrb	r3, [r7, #23]
 80089f4:	e03e      	b.n	8008a74 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	69db      	ldr	r3, [r3, #28]
 80089fa:	4619      	mov	r1, r3
 80089fc:	6938      	ldr	r0, [r7, #16]
 80089fe:	f7ff fa21 	bl	8007e44 <move_window>
 8008a02:	4603      	mov	r3, r0
 8008a04:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008a06:	7dfb      	ldrb	r3, [r7, #23]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d12f      	bne.n	8008a6c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6a1b      	ldr	r3, [r3, #32]
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008a14:	7bfb      	ldrb	r3, [r7, #15]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d102      	bne.n	8008a20 <dir_find+0x4e>
 8008a1a:	2304      	movs	r3, #4
 8008a1c:	75fb      	strb	r3, [r7, #23]
 8008a1e:	e028      	b.n	8008a72 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6a1b      	ldr	r3, [r3, #32]
 8008a24:	330b      	adds	r3, #11
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a2c:	b2da      	uxtb	r2, r3
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6a1b      	ldr	r3, [r3, #32]
 8008a36:	330b      	adds	r3, #11
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	f003 0308 	and.w	r3, r3, #8
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d10a      	bne.n	8008a58 <dir_find+0x86>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6a18      	ldr	r0, [r3, #32]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	3324      	adds	r3, #36	; 0x24
 8008a4a:	220b      	movs	r2, #11
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	f7ff f807 	bl	8007a60 <mem_cmp>
 8008a52:	4603      	mov	r3, r0
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d00b      	beq.n	8008a70 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008a58:	2100      	movs	r1, #0
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f7ff fe5d 	bl	800871a <dir_next>
 8008a60:	4603      	mov	r3, r0
 8008a62:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008a64:	7dfb      	ldrb	r3, [r7, #23]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d0c5      	beq.n	80089f6 <dir_find+0x24>
 8008a6a:	e002      	b.n	8008a72 <dir_find+0xa0>
		if (res != FR_OK) break;
 8008a6c:	bf00      	nop
 8008a6e:	e000      	b.n	8008a72 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008a70:	bf00      	nop

	return res;
 8008a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3718      	adds	r7, #24
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008a8a:	2101      	movs	r1, #1
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f7ff ff1a 	bl	80088c6 <dir_alloc>
 8008a92:	4603      	mov	r3, r0
 8008a94:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008a96:	7bfb      	ldrb	r3, [r7, #15]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d11c      	bne.n	8008ad6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	69db      	ldr	r3, [r3, #28]
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	68b8      	ldr	r0, [r7, #8]
 8008aa4:	f7ff f9ce 	bl	8007e44 <move_window>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008aac:	7bfb      	ldrb	r3, [r7, #15]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d111      	bne.n	8008ad6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6a1b      	ldr	r3, [r3, #32]
 8008ab6:	2220      	movs	r2, #32
 8008ab8:	2100      	movs	r1, #0
 8008aba:	4618      	mov	r0, r3
 8008abc:	f7fe ffb5 	bl	8007a2a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6a18      	ldr	r0, [r3, #32]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	3324      	adds	r3, #36	; 0x24
 8008ac8:	220b      	movs	r2, #11
 8008aca:	4619      	mov	r1, r3
 8008acc:	f7fe ff8c 	bl	80079e8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3710      	adds	r7, #16
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b088      	sub	sp, #32
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	60fb      	str	r3, [r7, #12]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	3324      	adds	r3, #36	; 0x24
 8008af4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008af6:	220b      	movs	r2, #11
 8008af8:	2120      	movs	r1, #32
 8008afa:	68b8      	ldr	r0, [r7, #8]
 8008afc:	f7fe ff95 	bl	8007a2a <mem_set>
	si = i = 0; ni = 8;
 8008b00:	2300      	movs	r3, #0
 8008b02:	613b      	str	r3, [r7, #16]
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	61fb      	str	r3, [r7, #28]
 8008b08:	2308      	movs	r3, #8
 8008b0a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	1c5a      	adds	r2, r3, #1
 8008b10:	61fa      	str	r2, [r7, #28]
 8008b12:	68fa      	ldr	r2, [r7, #12]
 8008b14:	4413      	add	r3, r2
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008b1a:	7efb      	ldrb	r3, [r7, #27]
 8008b1c:	2b20      	cmp	r3, #32
 8008b1e:	d94e      	bls.n	8008bbe <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008b20:	7efb      	ldrb	r3, [r7, #27]
 8008b22:	2b2f      	cmp	r3, #47	; 0x2f
 8008b24:	d006      	beq.n	8008b34 <create_name+0x54>
 8008b26:	7efb      	ldrb	r3, [r7, #27]
 8008b28:	2b5c      	cmp	r3, #92	; 0x5c
 8008b2a:	d110      	bne.n	8008b4e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008b2c:	e002      	b.n	8008b34 <create_name+0x54>
 8008b2e:	69fb      	ldr	r3, [r7, #28]
 8008b30:	3301      	adds	r3, #1
 8008b32:	61fb      	str	r3, [r7, #28]
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	69fb      	ldr	r3, [r7, #28]
 8008b38:	4413      	add	r3, r2
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	2b2f      	cmp	r3, #47	; 0x2f
 8008b3e:	d0f6      	beq.n	8008b2e <create_name+0x4e>
 8008b40:	68fa      	ldr	r2, [r7, #12]
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	4413      	add	r3, r2
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	2b5c      	cmp	r3, #92	; 0x5c
 8008b4a:	d0f0      	beq.n	8008b2e <create_name+0x4e>
			break;
 8008b4c:	e038      	b.n	8008bc0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008b4e:	7efb      	ldrb	r3, [r7, #27]
 8008b50:	2b2e      	cmp	r3, #46	; 0x2e
 8008b52:	d003      	beq.n	8008b5c <create_name+0x7c>
 8008b54:	693a      	ldr	r2, [r7, #16]
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d30c      	bcc.n	8008b76 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	2b0b      	cmp	r3, #11
 8008b60:	d002      	beq.n	8008b68 <create_name+0x88>
 8008b62:	7efb      	ldrb	r3, [r7, #27]
 8008b64:	2b2e      	cmp	r3, #46	; 0x2e
 8008b66:	d001      	beq.n	8008b6c <create_name+0x8c>
 8008b68:	2306      	movs	r3, #6
 8008b6a:	e044      	b.n	8008bf6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008b6c:	2308      	movs	r3, #8
 8008b6e:	613b      	str	r3, [r7, #16]
 8008b70:	230b      	movs	r3, #11
 8008b72:	617b      	str	r3, [r7, #20]
			continue;
 8008b74:	e022      	b.n	8008bbc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008b76:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	da04      	bge.n	8008b88 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008b7e:	7efb      	ldrb	r3, [r7, #27]
 8008b80:	3b80      	subs	r3, #128	; 0x80
 8008b82:	4a1f      	ldr	r2, [pc, #124]	; (8008c00 <create_name+0x120>)
 8008b84:	5cd3      	ldrb	r3, [r2, r3]
 8008b86:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008b88:	7efb      	ldrb	r3, [r7, #27]
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	481d      	ldr	r0, [pc, #116]	; (8008c04 <create_name+0x124>)
 8008b8e:	f7fe ff8e 	bl	8007aae <chk_chr>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d001      	beq.n	8008b9c <create_name+0xbc>
 8008b98:	2306      	movs	r3, #6
 8008b9a:	e02c      	b.n	8008bf6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008b9c:	7efb      	ldrb	r3, [r7, #27]
 8008b9e:	2b60      	cmp	r3, #96	; 0x60
 8008ba0:	d905      	bls.n	8008bae <create_name+0xce>
 8008ba2:	7efb      	ldrb	r3, [r7, #27]
 8008ba4:	2b7a      	cmp	r3, #122	; 0x7a
 8008ba6:	d802      	bhi.n	8008bae <create_name+0xce>
 8008ba8:	7efb      	ldrb	r3, [r7, #27]
 8008baa:	3b20      	subs	r3, #32
 8008bac:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	1c5a      	adds	r2, r3, #1
 8008bb2:	613a      	str	r2, [r7, #16]
 8008bb4:	68ba      	ldr	r2, [r7, #8]
 8008bb6:	4413      	add	r3, r2
 8008bb8:	7efa      	ldrb	r2, [r7, #27]
 8008bba:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008bbc:	e7a6      	b.n	8008b0c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008bbe:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	441a      	add	r2, r3
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d101      	bne.n	8008bd4 <create_name+0xf4>
 8008bd0:	2306      	movs	r3, #6
 8008bd2:	e010      	b.n	8008bf6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	2be5      	cmp	r3, #229	; 0xe5
 8008bda:	d102      	bne.n	8008be2 <create_name+0x102>
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	2205      	movs	r2, #5
 8008be0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008be2:	7efb      	ldrb	r3, [r7, #27]
 8008be4:	2b20      	cmp	r3, #32
 8008be6:	d801      	bhi.n	8008bec <create_name+0x10c>
 8008be8:	2204      	movs	r2, #4
 8008bea:	e000      	b.n	8008bee <create_name+0x10e>
 8008bec:	2200      	movs	r2, #0
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	330b      	adds	r3, #11
 8008bf2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008bf4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3720      	adds	r7, #32
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	08009dec 	.word	0x08009dec
 8008c04:	08009d74 	.word	0x08009d74

08008c08 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b086      	sub	sp, #24
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008c1c:	e002      	b.n	8008c24 <follow_path+0x1c>
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	3301      	adds	r3, #1
 8008c22:	603b      	str	r3, [r7, #0]
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	2b2f      	cmp	r3, #47	; 0x2f
 8008c2a:	d0f8      	beq.n	8008c1e <follow_path+0x16>
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	2b5c      	cmp	r3, #92	; 0x5c
 8008c32:	d0f4      	beq.n	8008c1e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	2200      	movs	r2, #0
 8008c38:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	2b1f      	cmp	r3, #31
 8008c40:	d80a      	bhi.n	8008c58 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2280      	movs	r2, #128	; 0x80
 8008c46:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008c4a:	2100      	movs	r1, #0
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f7ff fcdb 	bl	8008608 <dir_sdi>
 8008c52:	4603      	mov	r3, r0
 8008c54:	75fb      	strb	r3, [r7, #23]
 8008c56:	e048      	b.n	8008cea <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008c58:	463b      	mov	r3, r7
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f7ff ff3f 	bl	8008ae0 <create_name>
 8008c62:	4603      	mov	r3, r0
 8008c64:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008c66:	7dfb      	ldrb	r3, [r7, #23]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d139      	bne.n	8008ce0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f7ff feb0 	bl	80089d2 <dir_find>
 8008c72:	4603      	mov	r3, r0
 8008c74:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008c7c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008c7e:	7dfb      	ldrb	r3, [r7, #23]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d00a      	beq.n	8008c9a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008c84:	7dfb      	ldrb	r3, [r7, #23]
 8008c86:	2b04      	cmp	r3, #4
 8008c88:	d12c      	bne.n	8008ce4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008c8a:	7afb      	ldrb	r3, [r7, #11]
 8008c8c:	f003 0304 	and.w	r3, r3, #4
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d127      	bne.n	8008ce4 <follow_path+0xdc>
 8008c94:	2305      	movs	r3, #5
 8008c96:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008c98:	e024      	b.n	8008ce4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008c9a:	7afb      	ldrb	r3, [r7, #11]
 8008c9c:	f003 0304 	and.w	r3, r3, #4
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d121      	bne.n	8008ce8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	799b      	ldrb	r3, [r3, #6]
 8008ca8:	f003 0310 	and.w	r3, r3, #16
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d102      	bne.n	8008cb6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008cb0:	2305      	movs	r3, #5
 8008cb2:	75fb      	strb	r3, [r7, #23]
 8008cb4:	e019      	b.n	8008cea <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	695b      	ldr	r3, [r3, #20]
 8008cc0:	68fa      	ldr	r2, [r7, #12]
 8008cc2:	8992      	ldrh	r2, [r2, #12]
 8008cc4:	fbb3 f0f2 	udiv	r0, r3, r2
 8008cc8:	fb00 f202 	mul.w	r2, r0, r2
 8008ccc:	1a9b      	subs	r3, r3, r2
 8008cce:	440b      	add	r3, r1
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	68f8      	ldr	r0, [r7, #12]
 8008cd4:	f7ff fe3e 	bl	8008954 <ld_clust>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008cde:	e7bb      	b.n	8008c58 <follow_path+0x50>
			if (res != FR_OK) break;
 8008ce0:	bf00      	nop
 8008ce2:	e002      	b.n	8008cea <follow_path+0xe2>
				break;
 8008ce4:	bf00      	nop
 8008ce6:	e000      	b.n	8008cea <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008ce8:	bf00      	nop
			}
		}
	}

	return res;
 8008cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3718      	adds	r7, #24
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b087      	sub	sp, #28
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008cfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d00:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d031      	beq.n	8008d6e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	617b      	str	r3, [r7, #20]
 8008d10:	e002      	b.n	8008d18 <get_ldnumber+0x24>
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	3301      	adds	r3, #1
 8008d16:	617b      	str	r3, [r7, #20]
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	2b20      	cmp	r3, #32
 8008d1e:	d903      	bls.n	8008d28 <get_ldnumber+0x34>
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	2b3a      	cmp	r3, #58	; 0x3a
 8008d26:	d1f4      	bne.n	8008d12 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	2b3a      	cmp	r3, #58	; 0x3a
 8008d2e:	d11c      	bne.n	8008d6a <get_ldnumber+0x76>
			tp = *path;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	1c5a      	adds	r2, r3, #1
 8008d3a:	60fa      	str	r2, [r7, #12]
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	3b30      	subs	r3, #48	; 0x30
 8008d40:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	2b09      	cmp	r3, #9
 8008d46:	d80e      	bhi.n	8008d66 <get_ldnumber+0x72>
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d10a      	bne.n	8008d66 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d107      	bne.n	8008d66 <get_ldnumber+0x72>
					vol = (int)i;
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	617b      	str	r3, [r7, #20]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	697a      	ldr	r2, [r7, #20]
 8008d64:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	e002      	b.n	8008d70 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008d6e:	693b      	ldr	r3, [r7, #16]
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	371c      	adds	r7, #28
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	70da      	strb	r2, [r3, #3]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d92:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008d94:	6839      	ldr	r1, [r7, #0]
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f7ff f854 	bl	8007e44 <move_window>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d001      	beq.n	8008da6 <check_fs+0x2a>
 8008da2:	2304      	movs	r3, #4
 8008da4:	e038      	b.n	8008e18 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	3334      	adds	r3, #52	; 0x34
 8008daa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7fe fd98 	bl	80078e4 <ld_word>
 8008db4:	4603      	mov	r3, r0
 8008db6:	461a      	mov	r2, r3
 8008db8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d001      	beq.n	8008dc4 <check_fs+0x48>
 8008dc0:	2303      	movs	r3, #3
 8008dc2:	e029      	b.n	8008e18 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008dca:	2be9      	cmp	r3, #233	; 0xe9
 8008dcc:	d009      	beq.n	8008de2 <check_fs+0x66>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008dd4:	2beb      	cmp	r3, #235	; 0xeb
 8008dd6:	d11e      	bne.n	8008e16 <check_fs+0x9a>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008dde:	2b90      	cmp	r3, #144	; 0x90
 8008de0:	d119      	bne.n	8008e16 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	3334      	adds	r3, #52	; 0x34
 8008de6:	3336      	adds	r3, #54	; 0x36
 8008de8:	4618      	mov	r0, r3
 8008dea:	f7fe fd93 	bl	8007914 <ld_dword>
 8008dee:	4603      	mov	r3, r0
 8008df0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008df4:	4a0a      	ldr	r2, [pc, #40]	; (8008e20 <check_fs+0xa4>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d101      	bne.n	8008dfe <check_fs+0x82>
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	e00c      	b.n	8008e18 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	3334      	adds	r3, #52	; 0x34
 8008e02:	3352      	adds	r3, #82	; 0x52
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7fe fd85 	bl	8007914 <ld_dword>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	4a05      	ldr	r2, [pc, #20]	; (8008e24 <check_fs+0xa8>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d101      	bne.n	8008e16 <check_fs+0x9a>
 8008e12:	2300      	movs	r3, #0
 8008e14:	e000      	b.n	8008e18 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008e16:	2302      	movs	r3, #2
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	00544146 	.word	0x00544146
 8008e24:	33544146 	.word	0x33544146

08008e28 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b096      	sub	sp, #88	; 0x58
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	4613      	mov	r3, r2
 8008e34:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008e3c:	68f8      	ldr	r0, [r7, #12]
 8008e3e:	f7ff ff59 	bl	8008cf4 <get_ldnumber>
 8008e42:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	da01      	bge.n	8008e4e <find_volume+0x26>
 8008e4a:	230b      	movs	r3, #11
 8008e4c:	e262      	b.n	8009314 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008e4e:	4a9f      	ldr	r2, [pc, #636]	; (80090cc <find_volume+0x2a4>)
 8008e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e56:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d101      	bne.n	8008e62 <find_volume+0x3a>
 8008e5e:	230c      	movs	r3, #12
 8008e60:	e258      	b.n	8009314 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e66:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008e68:	79fb      	ldrb	r3, [r7, #7]
 8008e6a:	f023 0301 	bic.w	r3, r3, #1
 8008e6e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d01a      	beq.n	8008eae <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e7a:	785b      	ldrb	r3, [r3, #1]
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7fe fc93 	bl	80077a8 <disk_status>
 8008e82:	4603      	mov	r3, r0
 8008e84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008e88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e8c:	f003 0301 	and.w	r3, r3, #1
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d10c      	bne.n	8008eae <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008e94:	79fb      	ldrb	r3, [r7, #7]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d007      	beq.n	8008eaa <find_volume+0x82>
 8008e9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e9e:	f003 0304 	and.w	r3, r3, #4
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d001      	beq.n	8008eaa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008ea6:	230a      	movs	r3, #10
 8008ea8:	e234      	b.n	8009314 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8008eaa:	2300      	movs	r3, #0
 8008eac:	e232      	b.n	8009314 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eb6:	b2da      	uxtb	r2, r3
 8008eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eba:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ebe:	785b      	ldrb	r3, [r3, #1]
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f7fe fc8b 	bl	80077dc <disk_initialize>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008ecc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008ed0:	f003 0301 	and.w	r3, r3, #1
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d001      	beq.n	8008edc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008ed8:	2303      	movs	r3, #3
 8008eda:	e21b      	b.n	8009314 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008edc:	79fb      	ldrb	r3, [r7, #7]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d007      	beq.n	8008ef2 <find_volume+0xca>
 8008ee2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008ee6:	f003 0304 	and.w	r3, r3, #4
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d001      	beq.n	8008ef2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008eee:	230a      	movs	r3, #10
 8008ef0:	e210      	b.n	8009314 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef4:	7858      	ldrb	r0, [r3, #1]
 8008ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef8:	330c      	adds	r3, #12
 8008efa:	461a      	mov	r2, r3
 8008efc:	2102      	movs	r1, #2
 8008efe:	f7fe fcd3 	bl	80078a8 <disk_ioctl>
 8008f02:	4603      	mov	r3, r0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d001      	beq.n	8008f0c <find_volume+0xe4>
 8008f08:	2301      	movs	r3, #1
 8008f0a:	e203      	b.n	8009314 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f0e:	899b      	ldrh	r3, [r3, #12]
 8008f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f14:	d80d      	bhi.n	8008f32 <find_volume+0x10a>
 8008f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f18:	899b      	ldrh	r3, [r3, #12]
 8008f1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f1e:	d308      	bcc.n	8008f32 <find_volume+0x10a>
 8008f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f22:	899b      	ldrh	r3, [r3, #12]
 8008f24:	461a      	mov	r2, r3
 8008f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f28:	899b      	ldrh	r3, [r3, #12]
 8008f2a:	3b01      	subs	r3, #1
 8008f2c:	4013      	ands	r3, r2
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d001      	beq.n	8008f36 <find_volume+0x10e>
 8008f32:	2301      	movs	r3, #1
 8008f34:	e1ee      	b.n	8009314 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008f36:	2300      	movs	r3, #0
 8008f38:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008f3a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008f3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008f3e:	f7ff ff1d 	bl	8008d7c <check_fs>
 8008f42:	4603      	mov	r3, r0
 8008f44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008f48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f4c:	2b02      	cmp	r3, #2
 8008f4e:	d149      	bne.n	8008fe4 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008f50:	2300      	movs	r3, #0
 8008f52:	643b      	str	r3, [r7, #64]	; 0x40
 8008f54:	e01e      	b.n	8008f94 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f58:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008f5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f5e:	011b      	lsls	r3, r3, #4
 8008f60:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008f64:	4413      	add	r3, r2
 8008f66:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6a:	3304      	adds	r3, #4
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d006      	beq.n	8008f80 <find_volume+0x158>
 8008f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f74:	3308      	adds	r3, #8
 8008f76:	4618      	mov	r0, r3
 8008f78:	f7fe fccc 	bl	8007914 <ld_dword>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	e000      	b.n	8008f82 <find_volume+0x15a>
 8008f80:	2200      	movs	r2, #0
 8008f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	3358      	adds	r3, #88	; 0x58
 8008f88:	443b      	add	r3, r7
 8008f8a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008f8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f90:	3301      	adds	r3, #1
 8008f92:	643b      	str	r3, [r7, #64]	; 0x40
 8008f94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f96:	2b03      	cmp	r3, #3
 8008f98:	d9dd      	bls.n	8008f56 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008f9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d002      	beq.n	8008faa <find_volume+0x182>
 8008fa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fa6:	3b01      	subs	r3, #1
 8008fa8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008faa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	3358      	adds	r3, #88	; 0x58
 8008fb0:	443b      	add	r3, r7
 8008fb2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008fb6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008fb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d005      	beq.n	8008fca <find_volume+0x1a2>
 8008fbe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008fc0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008fc2:	f7ff fedb 	bl	8008d7c <check_fs>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	e000      	b.n	8008fcc <find_volume+0x1a4>
 8008fca:	2303      	movs	r3, #3
 8008fcc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008fd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d905      	bls.n	8008fe4 <find_volume+0x1bc>
 8008fd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fda:	3301      	adds	r3, #1
 8008fdc:	643b      	str	r3, [r7, #64]	; 0x40
 8008fde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fe0:	2b03      	cmp	r3, #3
 8008fe2:	d9e2      	bls.n	8008faa <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008fe4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008fe8:	2b04      	cmp	r3, #4
 8008fea:	d101      	bne.n	8008ff0 <find_volume+0x1c8>
 8008fec:	2301      	movs	r3, #1
 8008fee:	e191      	b.n	8009314 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008ff0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d901      	bls.n	8008ffc <find_volume+0x1d4>
 8008ff8:	230d      	movs	r3, #13
 8008ffa:	e18b      	b.n	8009314 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ffe:	3334      	adds	r3, #52	; 0x34
 8009000:	330b      	adds	r3, #11
 8009002:	4618      	mov	r0, r3
 8009004:	f7fe fc6e 	bl	80078e4 <ld_word>
 8009008:	4603      	mov	r3, r0
 800900a:	461a      	mov	r2, r3
 800900c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800900e:	899b      	ldrh	r3, [r3, #12]
 8009010:	429a      	cmp	r2, r3
 8009012:	d001      	beq.n	8009018 <find_volume+0x1f0>
 8009014:	230d      	movs	r3, #13
 8009016:	e17d      	b.n	8009314 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800901a:	3334      	adds	r3, #52	; 0x34
 800901c:	3316      	adds	r3, #22
 800901e:	4618      	mov	r0, r3
 8009020:	f7fe fc60 	bl	80078e4 <ld_word>
 8009024:	4603      	mov	r3, r0
 8009026:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800902a:	2b00      	cmp	r3, #0
 800902c:	d106      	bne.n	800903c <find_volume+0x214>
 800902e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009030:	3334      	adds	r3, #52	; 0x34
 8009032:	3324      	adds	r3, #36	; 0x24
 8009034:	4618      	mov	r0, r3
 8009036:	f7fe fc6d 	bl	8007914 <ld_dword>
 800903a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800903c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800903e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009040:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009044:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800904c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904e:	789b      	ldrb	r3, [r3, #2]
 8009050:	2b01      	cmp	r3, #1
 8009052:	d005      	beq.n	8009060 <find_volume+0x238>
 8009054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009056:	789b      	ldrb	r3, [r3, #2]
 8009058:	2b02      	cmp	r3, #2
 800905a:	d001      	beq.n	8009060 <find_volume+0x238>
 800905c:	230d      	movs	r3, #13
 800905e:	e159      	b.n	8009314 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009062:	789b      	ldrb	r3, [r3, #2]
 8009064:	461a      	mov	r2, r3
 8009066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009068:	fb02 f303 	mul.w	r3, r2, r3
 800906c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800906e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009070:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009074:	b29a      	uxth	r2, r3
 8009076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009078:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800907a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800907c:	895b      	ldrh	r3, [r3, #10]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d008      	beq.n	8009094 <find_volume+0x26c>
 8009082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009084:	895b      	ldrh	r3, [r3, #10]
 8009086:	461a      	mov	r2, r3
 8009088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800908a:	895b      	ldrh	r3, [r3, #10]
 800908c:	3b01      	subs	r3, #1
 800908e:	4013      	ands	r3, r2
 8009090:	2b00      	cmp	r3, #0
 8009092:	d001      	beq.n	8009098 <find_volume+0x270>
 8009094:	230d      	movs	r3, #13
 8009096:	e13d      	b.n	8009314 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909a:	3334      	adds	r3, #52	; 0x34
 800909c:	3311      	adds	r3, #17
 800909e:	4618      	mov	r0, r3
 80090a0:	f7fe fc20 	bl	80078e4 <ld_word>
 80090a4:	4603      	mov	r3, r0
 80090a6:	461a      	mov	r2, r3
 80090a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090aa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80090ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ae:	891b      	ldrh	r3, [r3, #8]
 80090b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090b2:	8992      	ldrh	r2, [r2, #12]
 80090b4:	0952      	lsrs	r2, r2, #5
 80090b6:	b292      	uxth	r2, r2
 80090b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80090bc:	fb01 f202 	mul.w	r2, r1, r2
 80090c0:	1a9b      	subs	r3, r3, r2
 80090c2:	b29b      	uxth	r3, r3
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d003      	beq.n	80090d0 <find_volume+0x2a8>
 80090c8:	230d      	movs	r3, #13
 80090ca:	e123      	b.n	8009314 <find_volume+0x4ec>
 80090cc:	2000a434 	.word	0x2000a434

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80090d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d2:	3334      	adds	r3, #52	; 0x34
 80090d4:	3313      	adds	r3, #19
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7fe fc04 	bl	80078e4 <ld_word>
 80090dc:	4603      	mov	r3, r0
 80090de:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80090e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d106      	bne.n	80090f4 <find_volume+0x2cc>
 80090e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e8:	3334      	adds	r3, #52	; 0x34
 80090ea:	3320      	adds	r3, #32
 80090ec:	4618      	mov	r0, r3
 80090ee:	f7fe fc11 	bl	8007914 <ld_dword>
 80090f2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80090f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f6:	3334      	adds	r3, #52	; 0x34
 80090f8:	330e      	adds	r3, #14
 80090fa:	4618      	mov	r0, r3
 80090fc:	f7fe fbf2 	bl	80078e4 <ld_word>
 8009100:	4603      	mov	r3, r0
 8009102:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009104:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009106:	2b00      	cmp	r3, #0
 8009108:	d101      	bne.n	800910e <find_volume+0x2e6>
 800910a:	230d      	movs	r3, #13
 800910c:	e102      	b.n	8009314 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800910e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009112:	4413      	add	r3, r2
 8009114:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009116:	8911      	ldrh	r1, [r2, #8]
 8009118:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800911a:	8992      	ldrh	r2, [r2, #12]
 800911c:	0952      	lsrs	r2, r2, #5
 800911e:	b292      	uxth	r2, r2
 8009120:	fbb1 f2f2 	udiv	r2, r1, r2
 8009124:	b292      	uxth	r2, r2
 8009126:	4413      	add	r3, r2
 8009128:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800912a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800912c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800912e:	429a      	cmp	r2, r3
 8009130:	d201      	bcs.n	8009136 <find_volume+0x30e>
 8009132:	230d      	movs	r3, #13
 8009134:	e0ee      	b.n	8009314 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009136:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800913a:	1ad3      	subs	r3, r2, r3
 800913c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800913e:	8952      	ldrh	r2, [r2, #10]
 8009140:	fbb3 f3f2 	udiv	r3, r3, r2
 8009144:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009148:	2b00      	cmp	r3, #0
 800914a:	d101      	bne.n	8009150 <find_volume+0x328>
 800914c:	230d      	movs	r3, #13
 800914e:	e0e1      	b.n	8009314 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8009150:	2303      	movs	r3, #3
 8009152:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009158:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800915c:	4293      	cmp	r3, r2
 800915e:	d802      	bhi.n	8009166 <find_volume+0x33e>
 8009160:	2302      	movs	r3, #2
 8009162:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009168:	f640 72f5 	movw	r2, #4085	; 0xff5
 800916c:	4293      	cmp	r3, r2
 800916e:	d802      	bhi.n	8009176 <find_volume+0x34e>
 8009170:	2301      	movs	r3, #1
 8009172:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009178:	1c9a      	adds	r2, r3, #2
 800917a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917c:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800917e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009180:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009182:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009184:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009188:	441a      	add	r2, r3
 800918a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800918e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009192:	441a      	add	r2, r3
 8009194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009196:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8009198:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800919c:	2b03      	cmp	r3, #3
 800919e:	d11e      	bne.n	80091de <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80091a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a2:	3334      	adds	r3, #52	; 0x34
 80091a4:	332a      	adds	r3, #42	; 0x2a
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7fe fb9c 	bl	80078e4 <ld_word>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d001      	beq.n	80091b6 <find_volume+0x38e>
 80091b2:	230d      	movs	r3, #13
 80091b4:	e0ae      	b.n	8009314 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80091b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b8:	891b      	ldrh	r3, [r3, #8]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d001      	beq.n	80091c2 <find_volume+0x39a>
 80091be:	230d      	movs	r3, #13
 80091c0:	e0a8      	b.n	8009314 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80091c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c4:	3334      	adds	r3, #52	; 0x34
 80091c6:	332c      	adds	r3, #44	; 0x2c
 80091c8:	4618      	mov	r0, r3
 80091ca:	f7fe fba3 	bl	8007914 <ld_dword>
 80091ce:	4602      	mov	r2, r0
 80091d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80091d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d6:	699b      	ldr	r3, [r3, #24]
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	647b      	str	r3, [r7, #68]	; 0x44
 80091dc:	e01f      	b.n	800921e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80091de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e0:	891b      	ldrh	r3, [r3, #8]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d101      	bne.n	80091ea <find_volume+0x3c2>
 80091e6:	230d      	movs	r3, #13
 80091e8:	e094      	b.n	8009314 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80091ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091f0:	441a      	add	r2, r3
 80091f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80091f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80091fa:	2b02      	cmp	r3, #2
 80091fc:	d103      	bne.n	8009206 <find_volume+0x3de>
 80091fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009200:	699b      	ldr	r3, [r3, #24]
 8009202:	005b      	lsls	r3, r3, #1
 8009204:	e00a      	b.n	800921c <find_volume+0x3f4>
 8009206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009208:	699a      	ldr	r2, [r3, #24]
 800920a:	4613      	mov	r3, r2
 800920c:	005b      	lsls	r3, r3, #1
 800920e:	4413      	add	r3, r2
 8009210:	085a      	lsrs	r2, r3, #1
 8009212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009214:	699b      	ldr	r3, [r3, #24]
 8009216:	f003 0301 	and.w	r3, r3, #1
 800921a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800921c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800921e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009220:	69da      	ldr	r2, [r3, #28]
 8009222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009224:	899b      	ldrh	r3, [r3, #12]
 8009226:	4619      	mov	r1, r3
 8009228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800922a:	440b      	add	r3, r1
 800922c:	3b01      	subs	r3, #1
 800922e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009230:	8989      	ldrh	r1, [r1, #12]
 8009232:	fbb3 f3f1 	udiv	r3, r3, r1
 8009236:	429a      	cmp	r2, r3
 8009238:	d201      	bcs.n	800923e <find_volume+0x416>
 800923a:	230d      	movs	r3, #13
 800923c:	e06a      	b.n	8009314 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800923e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009240:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009244:	615a      	str	r2, [r3, #20]
 8009246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009248:	695a      	ldr	r2, [r3, #20]
 800924a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800924c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800924e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009250:	2280      	movs	r2, #128	; 0x80
 8009252:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009254:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009258:	2b03      	cmp	r3, #3
 800925a:	d149      	bne.n	80092f0 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800925c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800925e:	3334      	adds	r3, #52	; 0x34
 8009260:	3330      	adds	r3, #48	; 0x30
 8009262:	4618      	mov	r0, r3
 8009264:	f7fe fb3e 	bl	80078e4 <ld_word>
 8009268:	4603      	mov	r3, r0
 800926a:	2b01      	cmp	r3, #1
 800926c:	d140      	bne.n	80092f0 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800926e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009270:	3301      	adds	r3, #1
 8009272:	4619      	mov	r1, r3
 8009274:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009276:	f7fe fde5 	bl	8007e44 <move_window>
 800927a:	4603      	mov	r3, r0
 800927c:	2b00      	cmp	r3, #0
 800927e:	d137      	bne.n	80092f0 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8009280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009282:	2200      	movs	r2, #0
 8009284:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009288:	3334      	adds	r3, #52	; 0x34
 800928a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800928e:	4618      	mov	r0, r3
 8009290:	f7fe fb28 	bl	80078e4 <ld_word>
 8009294:	4603      	mov	r3, r0
 8009296:	461a      	mov	r2, r3
 8009298:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800929c:	429a      	cmp	r2, r3
 800929e:	d127      	bne.n	80092f0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80092a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a2:	3334      	adds	r3, #52	; 0x34
 80092a4:	4618      	mov	r0, r3
 80092a6:	f7fe fb35 	bl	8007914 <ld_dword>
 80092aa:	4603      	mov	r3, r0
 80092ac:	4a1b      	ldr	r2, [pc, #108]	; (800931c <find_volume+0x4f4>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d11e      	bne.n	80092f0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80092b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b4:	3334      	adds	r3, #52	; 0x34
 80092b6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7fe fb2a 	bl	8007914 <ld_dword>
 80092c0:	4603      	mov	r3, r0
 80092c2:	4a17      	ldr	r2, [pc, #92]	; (8009320 <find_volume+0x4f8>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d113      	bne.n	80092f0 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80092c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ca:	3334      	adds	r3, #52	; 0x34
 80092cc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80092d0:	4618      	mov	r0, r3
 80092d2:	f7fe fb1f 	bl	8007914 <ld_dword>
 80092d6:	4602      	mov	r2, r0
 80092d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092da:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80092dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092de:	3334      	adds	r3, #52	; 0x34
 80092e0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80092e4:	4618      	mov	r0, r3
 80092e6:	f7fe fb15 	bl	8007914 <ld_dword>
 80092ea:	4602      	mov	r2, r0
 80092ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ee:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80092f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80092f6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80092f8:	4b0a      	ldr	r3, [pc, #40]	; (8009324 <find_volume+0x4fc>)
 80092fa:	881b      	ldrh	r3, [r3, #0]
 80092fc:	3301      	adds	r3, #1
 80092fe:	b29a      	uxth	r2, r3
 8009300:	4b08      	ldr	r3, [pc, #32]	; (8009324 <find_volume+0x4fc>)
 8009302:	801a      	strh	r2, [r3, #0]
 8009304:	4b07      	ldr	r3, [pc, #28]	; (8009324 <find_volume+0x4fc>)
 8009306:	881a      	ldrh	r2, [r3, #0]
 8009308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800930a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800930c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800930e:	f7fe fd31 	bl	8007d74 <clear_lock>
#endif
	return FR_OK;
 8009312:	2300      	movs	r3, #0
}
 8009314:	4618      	mov	r0, r3
 8009316:	3758      	adds	r7, #88	; 0x58
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}
 800931c:	41615252 	.word	0x41615252
 8009320:	61417272 	.word	0x61417272
 8009324:	2000a438 	.word	0x2000a438

08009328 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b084      	sub	sp, #16
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009332:	2309      	movs	r3, #9
 8009334:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d01c      	beq.n	8009376 <validate+0x4e>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d018      	beq.n	8009376 <validate+0x4e>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d013      	beq.n	8009376 <validate+0x4e>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	889a      	ldrh	r2, [r3, #4]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	88db      	ldrh	r3, [r3, #6]
 8009358:	429a      	cmp	r2, r3
 800935a:	d10c      	bne.n	8009376 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	785b      	ldrb	r3, [r3, #1]
 8009362:	4618      	mov	r0, r3
 8009364:	f7fe fa20 	bl	80077a8 <disk_status>
 8009368:	4603      	mov	r3, r0
 800936a:	f003 0301 	and.w	r3, r3, #1
 800936e:	2b00      	cmp	r3, #0
 8009370:	d101      	bne.n	8009376 <validate+0x4e>
			res = FR_OK;
 8009372:	2300      	movs	r3, #0
 8009374:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009376:	7bfb      	ldrb	r3, [r7, #15]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d102      	bne.n	8009382 <validate+0x5a>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	e000      	b.n	8009384 <validate+0x5c>
 8009382:	2300      	movs	r3, #0
 8009384:	683a      	ldr	r2, [r7, #0]
 8009386:	6013      	str	r3, [r2, #0]
	return res;
 8009388:	7bfb      	ldrb	r3, [r7, #15]
}
 800938a:	4618      	mov	r0, r3
 800938c:	3710      	adds	r7, #16
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
	...

08009394 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b088      	sub	sp, #32
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	4613      	mov	r3, r2
 80093a0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80093a6:	f107 0310 	add.w	r3, r7, #16
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7ff fca2 	bl	8008cf4 <get_ldnumber>
 80093b0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80093b2:	69fb      	ldr	r3, [r7, #28]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	da01      	bge.n	80093bc <f_mount+0x28>
 80093b8:	230b      	movs	r3, #11
 80093ba:	e02b      	b.n	8009414 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80093bc:	4a17      	ldr	r2, [pc, #92]	; (800941c <f_mount+0x88>)
 80093be:	69fb      	ldr	r3, [r7, #28]
 80093c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093c4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80093c6:	69bb      	ldr	r3, [r7, #24]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d005      	beq.n	80093d8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80093cc:	69b8      	ldr	r0, [r7, #24]
 80093ce:	f7fe fcd1 	bl	8007d74 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	2200      	movs	r2, #0
 80093d6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d002      	beq.n	80093e4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2200      	movs	r2, #0
 80093e2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80093e4:	68fa      	ldr	r2, [r7, #12]
 80093e6:	490d      	ldr	r1, [pc, #52]	; (800941c <f_mount+0x88>)
 80093e8:	69fb      	ldr	r3, [r7, #28]
 80093ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d002      	beq.n	80093fa <f_mount+0x66>
 80093f4:	79fb      	ldrb	r3, [r7, #7]
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	d001      	beq.n	80093fe <f_mount+0x6a>
 80093fa:	2300      	movs	r3, #0
 80093fc:	e00a      	b.n	8009414 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80093fe:	f107 010c 	add.w	r1, r7, #12
 8009402:	f107 0308 	add.w	r3, r7, #8
 8009406:	2200      	movs	r2, #0
 8009408:	4618      	mov	r0, r3
 800940a:	f7ff fd0d 	bl	8008e28 <find_volume>
 800940e:	4603      	mov	r3, r0
 8009410:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009412:	7dfb      	ldrb	r3, [r7, #23]
}
 8009414:	4618      	mov	r0, r3
 8009416:	3720      	adds	r7, #32
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}
 800941c:	2000a434 	.word	0x2000a434

08009420 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b098      	sub	sp, #96	; 0x60
 8009424:	af00      	add	r7, sp, #0
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	60b9      	str	r1, [r7, #8]
 800942a:	4613      	mov	r3, r2
 800942c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d101      	bne.n	8009438 <f_open+0x18>
 8009434:	2309      	movs	r3, #9
 8009436:	e1bb      	b.n	80097b0 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009438:	79fb      	ldrb	r3, [r7, #7]
 800943a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800943e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009440:	79fa      	ldrb	r2, [r7, #7]
 8009442:	f107 0110 	add.w	r1, r7, #16
 8009446:	f107 0308 	add.w	r3, r7, #8
 800944a:	4618      	mov	r0, r3
 800944c:	f7ff fcec 	bl	8008e28 <find_volume>
 8009450:	4603      	mov	r3, r0
 8009452:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8009456:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800945a:	2b00      	cmp	r3, #0
 800945c:	f040 819f 	bne.w	800979e <f_open+0x37e>
		dj.obj.fs = fs;
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009464:	68ba      	ldr	r2, [r7, #8]
 8009466:	f107 0314 	add.w	r3, r7, #20
 800946a:	4611      	mov	r1, r2
 800946c:	4618      	mov	r0, r3
 800946e:	f7ff fbcb 	bl	8008c08 <follow_path>
 8009472:	4603      	mov	r3, r0
 8009474:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009478:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800947c:	2b00      	cmp	r3, #0
 800947e:	d11a      	bne.n	80094b6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009480:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009484:	b25b      	sxtb	r3, r3
 8009486:	2b00      	cmp	r3, #0
 8009488:	da03      	bge.n	8009492 <f_open+0x72>
				res = FR_INVALID_NAME;
 800948a:	2306      	movs	r3, #6
 800948c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009490:	e011      	b.n	80094b6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009492:	79fb      	ldrb	r3, [r7, #7]
 8009494:	f023 0301 	bic.w	r3, r3, #1
 8009498:	2b00      	cmp	r3, #0
 800949a:	bf14      	ite	ne
 800949c:	2301      	movne	r3, #1
 800949e:	2300      	moveq	r3, #0
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	461a      	mov	r2, r3
 80094a4:	f107 0314 	add.w	r3, r7, #20
 80094a8:	4611      	mov	r1, r2
 80094aa:	4618      	mov	r0, r3
 80094ac:	f7fe fb1a 	bl	8007ae4 <chk_lock>
 80094b0:	4603      	mov	r3, r0
 80094b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80094b6:	79fb      	ldrb	r3, [r7, #7]
 80094b8:	f003 031c 	and.w	r3, r3, #28
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d07f      	beq.n	80095c0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80094c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d017      	beq.n	80094f8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80094c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094cc:	2b04      	cmp	r3, #4
 80094ce:	d10e      	bne.n	80094ee <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80094d0:	f7fe fb64 	bl	8007b9c <enq_lock>
 80094d4:	4603      	mov	r3, r0
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d006      	beq.n	80094e8 <f_open+0xc8>
 80094da:	f107 0314 	add.w	r3, r7, #20
 80094de:	4618      	mov	r0, r3
 80094e0:	f7ff facc 	bl	8008a7c <dir_register>
 80094e4:	4603      	mov	r3, r0
 80094e6:	e000      	b.n	80094ea <f_open+0xca>
 80094e8:	2312      	movs	r3, #18
 80094ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80094ee:	79fb      	ldrb	r3, [r7, #7]
 80094f0:	f043 0308 	orr.w	r3, r3, #8
 80094f4:	71fb      	strb	r3, [r7, #7]
 80094f6:	e010      	b.n	800951a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80094f8:	7ebb      	ldrb	r3, [r7, #26]
 80094fa:	f003 0311 	and.w	r3, r3, #17
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d003      	beq.n	800950a <f_open+0xea>
					res = FR_DENIED;
 8009502:	2307      	movs	r3, #7
 8009504:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009508:	e007      	b.n	800951a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800950a:	79fb      	ldrb	r3, [r7, #7]
 800950c:	f003 0304 	and.w	r3, r3, #4
 8009510:	2b00      	cmp	r3, #0
 8009512:	d002      	beq.n	800951a <f_open+0xfa>
 8009514:	2308      	movs	r3, #8
 8009516:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800951a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800951e:	2b00      	cmp	r3, #0
 8009520:	d168      	bne.n	80095f4 <f_open+0x1d4>
 8009522:	79fb      	ldrb	r3, [r7, #7]
 8009524:	f003 0308 	and.w	r3, r3, #8
 8009528:	2b00      	cmp	r3, #0
 800952a:	d063      	beq.n	80095f4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800952c:	f7fd ff08 	bl	8007340 <get_fattime>
 8009530:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009534:	330e      	adds	r3, #14
 8009536:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009538:	4618      	mov	r0, r3
 800953a:	f7fe fa29 	bl	8007990 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800953e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009540:	3316      	adds	r3, #22
 8009542:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009544:	4618      	mov	r0, r3
 8009546:	f7fe fa23 	bl	8007990 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800954a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800954c:	330b      	adds	r3, #11
 800954e:	2220      	movs	r2, #32
 8009550:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009556:	4611      	mov	r1, r2
 8009558:	4618      	mov	r0, r3
 800955a:	f7ff f9fb 	bl	8008954 <ld_clust>
 800955e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009564:	2200      	movs	r2, #0
 8009566:	4618      	mov	r0, r3
 8009568:	f7ff fa13 	bl	8008992 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800956c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800956e:	331c      	adds	r3, #28
 8009570:	2100      	movs	r1, #0
 8009572:	4618      	mov	r0, r3
 8009574:	f7fe fa0c 	bl	8007990 <st_dword>
					fs->wflag = 1;
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	2201      	movs	r2, #1
 800957c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800957e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009580:	2b00      	cmp	r3, #0
 8009582:	d037      	beq.n	80095f4 <f_open+0x1d4>
						dw = fs->winsect;
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009588:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800958a:	f107 0314 	add.w	r3, r7, #20
 800958e:	2200      	movs	r2, #0
 8009590:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009592:	4618      	mov	r0, r3
 8009594:	f7fe ff03 	bl	800839e <remove_chain>
 8009598:	4603      	mov	r3, r0
 800959a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800959e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d126      	bne.n	80095f4 <f_open+0x1d4>
							res = move_window(fs, dw);
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7fe fc4a 	bl	8007e44 <move_window>
 80095b0:	4603      	mov	r3, r0
 80095b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80095ba:	3a01      	subs	r2, #1
 80095bc:	611a      	str	r2, [r3, #16]
 80095be:	e019      	b.n	80095f4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80095c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d115      	bne.n	80095f4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80095c8:	7ebb      	ldrb	r3, [r7, #26]
 80095ca:	f003 0310 	and.w	r3, r3, #16
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d003      	beq.n	80095da <f_open+0x1ba>
					res = FR_NO_FILE;
 80095d2:	2304      	movs	r3, #4
 80095d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80095d8:	e00c      	b.n	80095f4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80095da:	79fb      	ldrb	r3, [r7, #7]
 80095dc:	f003 0302 	and.w	r3, r3, #2
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d007      	beq.n	80095f4 <f_open+0x1d4>
 80095e4:	7ebb      	ldrb	r3, [r7, #26]
 80095e6:	f003 0301 	and.w	r3, r3, #1
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d002      	beq.n	80095f4 <f_open+0x1d4>
						res = FR_DENIED;
 80095ee:	2307      	movs	r3, #7
 80095f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80095f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d128      	bne.n	800964e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80095fc:	79fb      	ldrb	r3, [r7, #7]
 80095fe:	f003 0308 	and.w	r3, r3, #8
 8009602:	2b00      	cmp	r3, #0
 8009604:	d003      	beq.n	800960e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009606:	79fb      	ldrb	r3, [r7, #7]
 8009608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800960c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009616:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800961c:	79fb      	ldrb	r3, [r7, #7]
 800961e:	f023 0301 	bic.w	r3, r3, #1
 8009622:	2b00      	cmp	r3, #0
 8009624:	bf14      	ite	ne
 8009626:	2301      	movne	r3, #1
 8009628:	2300      	moveq	r3, #0
 800962a:	b2db      	uxtb	r3, r3
 800962c:	461a      	mov	r2, r3
 800962e:	f107 0314 	add.w	r3, r7, #20
 8009632:	4611      	mov	r1, r2
 8009634:	4618      	mov	r0, r3
 8009636:	f7fe fad3 	bl	8007be0 <inc_lock>
 800963a:	4602      	mov	r2, r0
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	691b      	ldr	r3, [r3, #16]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d102      	bne.n	800964e <f_open+0x22e>
 8009648:	2302      	movs	r3, #2
 800964a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800964e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009652:	2b00      	cmp	r3, #0
 8009654:	f040 80a3 	bne.w	800979e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800965c:	4611      	mov	r1, r2
 800965e:	4618      	mov	r0, r3
 8009660:	f7ff f978 	bl	8008954 <ld_clust>
 8009664:	4602      	mov	r2, r0
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800966a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800966c:	331c      	adds	r3, #28
 800966e:	4618      	mov	r0, r3
 8009670:	f7fe f950 	bl	8007914 <ld_dword>
 8009674:	4602      	mov	r2, r0
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2200      	movs	r2, #0
 800967e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009680:	693a      	ldr	r2, [r7, #16]
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	88da      	ldrh	r2, [r3, #6]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	79fa      	ldrb	r2, [r7, #7]
 8009692:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2200      	movs	r2, #0
 8009698:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2200      	movs	r2, #0
 800969e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2200      	movs	r2, #0
 80096a4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	3330      	adds	r3, #48	; 0x30
 80096aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80096ae:	2100      	movs	r1, #0
 80096b0:	4618      	mov	r0, r3
 80096b2:	f7fe f9ba 	bl	8007a2a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80096b6:	79fb      	ldrb	r3, [r7, #7]
 80096b8:	f003 0320 	and.w	r3, r3, #32
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d06e      	beq.n	800979e <f_open+0x37e>
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	68db      	ldr	r3, [r3, #12]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d06a      	beq.n	800979e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	68da      	ldr	r2, [r3, #12]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	895b      	ldrh	r3, [r3, #10]
 80096d4:	461a      	mov	r2, r3
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	899b      	ldrh	r3, [r3, #12]
 80096da:	fb02 f303 	mul.w	r3, r2, r3
 80096de:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	689b      	ldr	r3, [r3, #8]
 80096e4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	68db      	ldr	r3, [r3, #12]
 80096ea:	657b      	str	r3, [r7, #84]	; 0x54
 80096ec:	e016      	b.n	800971c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7fe fc63 	bl	8007fbe <get_fat>
 80096f8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80096fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d802      	bhi.n	8009706 <f_open+0x2e6>
 8009700:	2302      	movs	r3, #2
 8009702:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009706:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009708:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800970c:	d102      	bne.n	8009714 <f_open+0x2f4>
 800970e:	2301      	movs	r3, #1
 8009710:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009714:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009718:	1ad3      	subs	r3, r2, r3
 800971a:	657b      	str	r3, [r7, #84]	; 0x54
 800971c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009720:	2b00      	cmp	r3, #0
 8009722:	d103      	bne.n	800972c <f_open+0x30c>
 8009724:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009728:	429a      	cmp	r2, r3
 800972a:	d8e0      	bhi.n	80096ee <f_open+0x2ce>
				}
				fp->clust = clst;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009730:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009732:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009736:	2b00      	cmp	r3, #0
 8009738:	d131      	bne.n	800979e <f_open+0x37e>
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	899b      	ldrh	r3, [r3, #12]
 800973e:	461a      	mov	r2, r3
 8009740:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009742:	fbb3 f1f2 	udiv	r1, r3, r2
 8009746:	fb01 f202 	mul.w	r2, r1, r2
 800974a:	1a9b      	subs	r3, r3, r2
 800974c:	2b00      	cmp	r3, #0
 800974e:	d026      	beq.n	800979e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009754:	4618      	mov	r0, r3
 8009756:	f7fe fc13 	bl	8007f80 <clust2sect>
 800975a:	6478      	str	r0, [r7, #68]	; 0x44
 800975c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800975e:	2b00      	cmp	r3, #0
 8009760:	d103      	bne.n	800976a <f_open+0x34a>
						res = FR_INT_ERR;
 8009762:	2302      	movs	r3, #2
 8009764:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009768:	e019      	b.n	800979e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	899b      	ldrh	r3, [r3, #12]
 800976e:	461a      	mov	r2, r3
 8009770:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009772:	fbb3 f2f2 	udiv	r2, r3, r2
 8009776:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009778:	441a      	add	r2, r3
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	7858      	ldrb	r0, [r3, #1]
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	6a1a      	ldr	r2, [r3, #32]
 800978c:	2301      	movs	r3, #1
 800978e:	f7fe f84b 	bl	8007828 <disk_read>
 8009792:	4603      	mov	r3, r0
 8009794:	2b00      	cmp	r3, #0
 8009796:	d002      	beq.n	800979e <f_open+0x37e>
 8009798:	2301      	movs	r3, #1
 800979a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800979e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d002      	beq.n	80097ac <f_open+0x38c>
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2200      	movs	r2, #0
 80097aa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80097ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3760      	adds	r7, #96	; 0x60
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b08c      	sub	sp, #48	; 0x30
 80097bc:	af00      	add	r7, sp, #0
 80097be:	60f8      	str	r0, [r7, #12]
 80097c0:	60b9      	str	r1, [r7, #8]
 80097c2:	607a      	str	r2, [r7, #4]
 80097c4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	2200      	movs	r2, #0
 80097ce:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f107 0210 	add.w	r2, r7, #16
 80097d6:	4611      	mov	r1, r2
 80097d8:	4618      	mov	r0, r3
 80097da:	f7ff fda5 	bl	8009328 <validate>
 80097de:	4603      	mov	r3, r0
 80097e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80097e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d107      	bne.n	80097fc <f_write+0x44>
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	7d5b      	ldrb	r3, [r3, #21]
 80097f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80097f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d002      	beq.n	8009802 <f_write+0x4a>
 80097fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009800:	e16a      	b.n	8009ad8 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	7d1b      	ldrb	r3, [r3, #20]
 8009806:	f003 0302 	and.w	r3, r3, #2
 800980a:	2b00      	cmp	r3, #0
 800980c:	d101      	bne.n	8009812 <f_write+0x5a>
 800980e:	2307      	movs	r3, #7
 8009810:	e162      	b.n	8009ad8 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	699a      	ldr	r2, [r3, #24]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	441a      	add	r2, r3
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	699b      	ldr	r3, [r3, #24]
 800981e:	429a      	cmp	r2, r3
 8009820:	f080 814c 	bcs.w	8009abc <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	699b      	ldr	r3, [r3, #24]
 8009828:	43db      	mvns	r3, r3
 800982a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800982c:	e146      	b.n	8009abc <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	699b      	ldr	r3, [r3, #24]
 8009832:	693a      	ldr	r2, [r7, #16]
 8009834:	8992      	ldrh	r2, [r2, #12]
 8009836:	fbb3 f1f2 	udiv	r1, r3, r2
 800983a:	fb01 f202 	mul.w	r2, r1, r2
 800983e:	1a9b      	subs	r3, r3, r2
 8009840:	2b00      	cmp	r3, #0
 8009842:	f040 80f1 	bne.w	8009a28 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	699b      	ldr	r3, [r3, #24]
 800984a:	693a      	ldr	r2, [r7, #16]
 800984c:	8992      	ldrh	r2, [r2, #12]
 800984e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009852:	693a      	ldr	r2, [r7, #16]
 8009854:	8952      	ldrh	r2, [r2, #10]
 8009856:	3a01      	subs	r2, #1
 8009858:	4013      	ands	r3, r2
 800985a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800985c:	69bb      	ldr	r3, [r7, #24]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d143      	bne.n	80098ea <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	699b      	ldr	r3, [r3, #24]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d10c      	bne.n	8009884 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	689b      	ldr	r3, [r3, #8]
 800986e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009872:	2b00      	cmp	r3, #0
 8009874:	d11a      	bne.n	80098ac <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2100      	movs	r1, #0
 800987a:	4618      	mov	r0, r3
 800987c:	f7fe fdf4 	bl	8008468 <create_chain>
 8009880:	62b8      	str	r0, [r7, #40]	; 0x28
 8009882:	e013      	b.n	80098ac <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009888:	2b00      	cmp	r3, #0
 800988a:	d007      	beq.n	800989c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	699b      	ldr	r3, [r3, #24]
 8009890:	4619      	mov	r1, r3
 8009892:	68f8      	ldr	r0, [r7, #12]
 8009894:	f7fe fe80 	bl	8008598 <clmt_clust>
 8009898:	62b8      	str	r0, [r7, #40]	; 0x28
 800989a:	e007      	b.n	80098ac <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800989c:	68fa      	ldr	r2, [r7, #12]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	69db      	ldr	r3, [r3, #28]
 80098a2:	4619      	mov	r1, r3
 80098a4:	4610      	mov	r0, r2
 80098a6:	f7fe fddf 	bl	8008468 <create_chain>
 80098aa:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80098ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	f000 8109 	beq.w	8009ac6 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80098b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	d104      	bne.n	80098c4 <f_write+0x10c>
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2202      	movs	r2, #2
 80098be:	755a      	strb	r2, [r3, #21]
 80098c0:	2302      	movs	r3, #2
 80098c2:	e109      	b.n	8009ad8 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80098c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098ca:	d104      	bne.n	80098d6 <f_write+0x11e>
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2201      	movs	r2, #1
 80098d0:	755a      	strb	r2, [r3, #21]
 80098d2:	2301      	movs	r3, #1
 80098d4:	e100      	b.n	8009ad8 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098da:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d102      	bne.n	80098ea <f_write+0x132>
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098e8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	7d1b      	ldrb	r3, [r3, #20]
 80098ee:	b25b      	sxtb	r3, r3
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	da18      	bge.n	8009926 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	7858      	ldrb	r0, [r3, #1]
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	6a1a      	ldr	r2, [r3, #32]
 8009902:	2301      	movs	r3, #1
 8009904:	f7fd ffb0 	bl	8007868 <disk_write>
 8009908:	4603      	mov	r3, r0
 800990a:	2b00      	cmp	r3, #0
 800990c:	d004      	beq.n	8009918 <f_write+0x160>
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2201      	movs	r2, #1
 8009912:	755a      	strb	r2, [r3, #21]
 8009914:	2301      	movs	r3, #1
 8009916:	e0df      	b.n	8009ad8 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	7d1b      	ldrb	r3, [r3, #20]
 800991c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009920:	b2da      	uxtb	r2, r3
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009926:	693a      	ldr	r2, [r7, #16]
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	69db      	ldr	r3, [r3, #28]
 800992c:	4619      	mov	r1, r3
 800992e:	4610      	mov	r0, r2
 8009930:	f7fe fb26 	bl	8007f80 <clust2sect>
 8009934:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d104      	bne.n	8009946 <f_write+0x18e>
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2202      	movs	r2, #2
 8009940:	755a      	strb	r2, [r3, #21]
 8009942:	2302      	movs	r3, #2
 8009944:	e0c8      	b.n	8009ad8 <f_write+0x320>
			sect += csect;
 8009946:	697a      	ldr	r2, [r7, #20]
 8009948:	69bb      	ldr	r3, [r7, #24]
 800994a:	4413      	add	r3, r2
 800994c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	899b      	ldrh	r3, [r3, #12]
 8009952:	461a      	mov	r2, r3
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	fbb3 f3f2 	udiv	r3, r3, r2
 800995a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800995c:	6a3b      	ldr	r3, [r7, #32]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d043      	beq.n	80099ea <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009962:	69ba      	ldr	r2, [r7, #24]
 8009964:	6a3b      	ldr	r3, [r7, #32]
 8009966:	4413      	add	r3, r2
 8009968:	693a      	ldr	r2, [r7, #16]
 800996a:	8952      	ldrh	r2, [r2, #10]
 800996c:	4293      	cmp	r3, r2
 800996e:	d905      	bls.n	800997c <f_write+0x1c4>
					cc = fs->csize - csect;
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	895b      	ldrh	r3, [r3, #10]
 8009974:	461a      	mov	r2, r3
 8009976:	69bb      	ldr	r3, [r7, #24]
 8009978:	1ad3      	subs	r3, r2, r3
 800997a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	7858      	ldrb	r0, [r3, #1]
 8009980:	6a3b      	ldr	r3, [r7, #32]
 8009982:	697a      	ldr	r2, [r7, #20]
 8009984:	69f9      	ldr	r1, [r7, #28]
 8009986:	f7fd ff6f 	bl	8007868 <disk_write>
 800998a:	4603      	mov	r3, r0
 800998c:	2b00      	cmp	r3, #0
 800998e:	d004      	beq.n	800999a <f_write+0x1e2>
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2201      	movs	r2, #1
 8009994:	755a      	strb	r2, [r3, #21]
 8009996:	2301      	movs	r3, #1
 8009998:	e09e      	b.n	8009ad8 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	6a1a      	ldr	r2, [r3, #32]
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	1ad3      	subs	r3, r2, r3
 80099a2:	6a3a      	ldr	r2, [r7, #32]
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d918      	bls.n	80099da <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	6a1a      	ldr	r2, [r3, #32]
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	1ad3      	subs	r3, r2, r3
 80099b6:	693a      	ldr	r2, [r7, #16]
 80099b8:	8992      	ldrh	r2, [r2, #12]
 80099ba:	fb02 f303 	mul.w	r3, r2, r3
 80099be:	69fa      	ldr	r2, [r7, #28]
 80099c0:	18d1      	adds	r1, r2, r3
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	899b      	ldrh	r3, [r3, #12]
 80099c6:	461a      	mov	r2, r3
 80099c8:	f7fe f80e 	bl	80079e8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	7d1b      	ldrb	r3, [r3, #20]
 80099d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099d4:	b2da      	uxtb	r2, r3
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	899b      	ldrh	r3, [r3, #12]
 80099de:	461a      	mov	r2, r3
 80099e0:	6a3b      	ldr	r3, [r7, #32]
 80099e2:	fb02 f303 	mul.w	r3, r2, r3
 80099e6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80099e8:	e04b      	b.n	8009a82 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	6a1b      	ldr	r3, [r3, #32]
 80099ee:	697a      	ldr	r2, [r7, #20]
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d016      	beq.n	8009a22 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	699a      	ldr	r2, [r3, #24]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d210      	bcs.n	8009a22 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	7858      	ldrb	r0, [r3, #1]
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	697a      	ldr	r2, [r7, #20]
 8009a0e:	f7fd ff0b 	bl	8007828 <disk_read>
 8009a12:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d004      	beq.n	8009a22 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	755a      	strb	r2, [r3, #21]
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e05a      	b.n	8009ad8 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	697a      	ldr	r2, [r7, #20]
 8009a26:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	899b      	ldrh	r3, [r3, #12]
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	699b      	ldr	r3, [r3, #24]
 8009a32:	693a      	ldr	r2, [r7, #16]
 8009a34:	8992      	ldrh	r2, [r2, #12]
 8009a36:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a3a:	fb01 f202 	mul.w	r2, r1, r2
 8009a3e:	1a9b      	subs	r3, r3, r2
 8009a40:	1ac3      	subs	r3, r0, r3
 8009a42:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d901      	bls.n	8009a50 <f_write+0x298>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	699b      	ldr	r3, [r3, #24]
 8009a5a:	693a      	ldr	r2, [r7, #16]
 8009a5c:	8992      	ldrh	r2, [r2, #12]
 8009a5e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009a62:	fb00 f202 	mul.w	r2, r0, r2
 8009a66:	1a9b      	subs	r3, r3, r2
 8009a68:	440b      	add	r3, r1
 8009a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a6c:	69f9      	ldr	r1, [r7, #28]
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f7fd ffba 	bl	80079e8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	7d1b      	ldrb	r3, [r3, #20]
 8009a78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009a7c:	b2da      	uxtb	r2, r3
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009a82:	69fa      	ldr	r2, [r7, #28]
 8009a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a86:	4413      	add	r3, r2
 8009a88:	61fb      	str	r3, [r7, #28]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	699a      	ldr	r2, [r3, #24]
 8009a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a90:	441a      	add	r2, r3
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	619a      	str	r2, [r3, #24]
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	68da      	ldr	r2, [r3, #12]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	699b      	ldr	r3, [r3, #24]
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	bf38      	it	cc
 8009aa2:	461a      	movcc	r2, r3
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	60da      	str	r2, [r3, #12]
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aae:	441a      	add	r2, r3
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	601a      	str	r2, [r3, #0]
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab8:	1ad3      	subs	r3, r2, r3
 8009aba:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	f47f aeb5 	bne.w	800982e <f_write+0x76>
 8009ac4:	e000      	b.n	8009ac8 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009ac6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	7d1b      	ldrb	r3, [r3, #20]
 8009acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ad0:	b2da      	uxtb	r2, r3
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009ad6:	2300      	movs	r3, #0
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3730      	adds	r7, #48	; 0x30
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b086      	sub	sp, #24
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f107 0208 	add.w	r2, r7, #8
 8009aee:	4611      	mov	r1, r2
 8009af0:	4618      	mov	r0, r3
 8009af2:	f7ff fc19 	bl	8009328 <validate>
 8009af6:	4603      	mov	r3, r0
 8009af8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009afa:	7dfb      	ldrb	r3, [r7, #23]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d168      	bne.n	8009bd2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	7d1b      	ldrb	r3, [r3, #20]
 8009b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d062      	beq.n	8009bd2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	7d1b      	ldrb	r3, [r3, #20]
 8009b10:	b25b      	sxtb	r3, r3
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	da15      	bge.n	8009b42 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	7858      	ldrb	r0, [r3, #1]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6a1a      	ldr	r2, [r3, #32]
 8009b24:	2301      	movs	r3, #1
 8009b26:	f7fd fe9f 	bl	8007868 <disk_write>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d001      	beq.n	8009b34 <f_sync+0x54>
 8009b30:	2301      	movs	r3, #1
 8009b32:	e04f      	b.n	8009bd4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	7d1b      	ldrb	r3, [r3, #20]
 8009b38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b3c:	b2da      	uxtb	r2, r3
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009b42:	f7fd fbfd 	bl	8007340 <get_fattime>
 8009b46:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009b48:	68ba      	ldr	r2, [r7, #8]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b4e:	4619      	mov	r1, r3
 8009b50:	4610      	mov	r0, r2
 8009b52:	f7fe f977 	bl	8007e44 <move_window>
 8009b56:	4603      	mov	r3, r0
 8009b58:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009b5a:	7dfb      	ldrb	r3, [r7, #23]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d138      	bne.n	8009bd2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b64:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	330b      	adds	r3, #11
 8009b6a:	781a      	ldrb	r2, [r3, #0]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	330b      	adds	r3, #11
 8009b70:	f042 0220 	orr.w	r2, r2, #32
 8009b74:	b2d2      	uxtb	r2, r2
 8009b76:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6818      	ldr	r0, [r3, #0]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	461a      	mov	r2, r3
 8009b82:	68f9      	ldr	r1, [r7, #12]
 8009b84:	f7fe ff05 	bl	8008992 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f103 021c 	add.w	r2, r3, #28
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	68db      	ldr	r3, [r3, #12]
 8009b92:	4619      	mov	r1, r3
 8009b94:	4610      	mov	r0, r2
 8009b96:	f7fd fefb 	bl	8007990 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	3316      	adds	r3, #22
 8009b9e:	6939      	ldr	r1, [r7, #16]
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f7fd fef5 	bl	8007990 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	3312      	adds	r3, #18
 8009baa:	2100      	movs	r1, #0
 8009bac:	4618      	mov	r0, r3
 8009bae:	f7fd fed4 	bl	800795a <st_word>
					fs->wflag = 1;
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7fe f970 	bl	8007ea0 <sync_fs>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	7d1b      	ldrb	r3, [r3, #20]
 8009bc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bcc:	b2da      	uxtb	r2, r3
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3718      	adds	r7, #24
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b084      	sub	sp, #16
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f7ff ff7b 	bl	8009ae0 <f_sync>
 8009bea:	4603      	mov	r3, r0
 8009bec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009bee:	7bfb      	ldrb	r3, [r7, #15]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d118      	bne.n	8009c26 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f107 0208 	add.w	r2, r7, #8
 8009bfa:	4611      	mov	r1, r2
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f7ff fb93 	bl	8009328 <validate>
 8009c02:	4603      	mov	r3, r0
 8009c04:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009c06:	7bfb      	ldrb	r3, [r7, #15]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d10c      	bne.n	8009c26 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	691b      	ldr	r3, [r3, #16]
 8009c10:	4618      	mov	r0, r3
 8009c12:	f7fe f873 	bl	8007cfc <dec_lock>
 8009c16:	4603      	mov	r3, r0
 8009c18:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009c1a:	7bfb      	ldrb	r3, [r7, #15]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d102      	bne.n	8009c26 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2200      	movs	r2, #0
 8009c24:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3710      	adds	r7, #16
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b087      	sub	sp, #28
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	60b9      	str	r1, [r7, #8]
 8009c3a:	4613      	mov	r3, r2
 8009c3c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009c42:	2300      	movs	r3, #0
 8009c44:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009c46:	4b1f      	ldr	r3, [pc, #124]	; (8009cc4 <FATFS_LinkDriverEx+0x94>)
 8009c48:	7a5b      	ldrb	r3, [r3, #9]
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d131      	bne.n	8009cb4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009c50:	4b1c      	ldr	r3, [pc, #112]	; (8009cc4 <FATFS_LinkDriverEx+0x94>)
 8009c52:	7a5b      	ldrb	r3, [r3, #9]
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	461a      	mov	r2, r3
 8009c58:	4b1a      	ldr	r3, [pc, #104]	; (8009cc4 <FATFS_LinkDriverEx+0x94>)
 8009c5a:	2100      	movs	r1, #0
 8009c5c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009c5e:	4b19      	ldr	r3, [pc, #100]	; (8009cc4 <FATFS_LinkDriverEx+0x94>)
 8009c60:	7a5b      	ldrb	r3, [r3, #9]
 8009c62:	b2db      	uxtb	r3, r3
 8009c64:	4a17      	ldr	r2, [pc, #92]	; (8009cc4 <FATFS_LinkDriverEx+0x94>)
 8009c66:	009b      	lsls	r3, r3, #2
 8009c68:	4413      	add	r3, r2
 8009c6a:	68fa      	ldr	r2, [r7, #12]
 8009c6c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009c6e:	4b15      	ldr	r3, [pc, #84]	; (8009cc4 <FATFS_LinkDriverEx+0x94>)
 8009c70:	7a5b      	ldrb	r3, [r3, #9]
 8009c72:	b2db      	uxtb	r3, r3
 8009c74:	461a      	mov	r2, r3
 8009c76:	4b13      	ldr	r3, [pc, #76]	; (8009cc4 <FATFS_LinkDriverEx+0x94>)
 8009c78:	4413      	add	r3, r2
 8009c7a:	79fa      	ldrb	r2, [r7, #7]
 8009c7c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009c7e:	4b11      	ldr	r3, [pc, #68]	; (8009cc4 <FATFS_LinkDriverEx+0x94>)
 8009c80:	7a5b      	ldrb	r3, [r3, #9]
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	1c5a      	adds	r2, r3, #1
 8009c86:	b2d1      	uxtb	r1, r2
 8009c88:	4a0e      	ldr	r2, [pc, #56]	; (8009cc4 <FATFS_LinkDriverEx+0x94>)
 8009c8a:	7251      	strb	r1, [r2, #9]
 8009c8c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009c8e:	7dbb      	ldrb	r3, [r7, #22]
 8009c90:	3330      	adds	r3, #48	; 0x30
 8009c92:	b2da      	uxtb	r2, r3
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	223a      	movs	r2, #58	; 0x3a
 8009c9e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	3302      	adds	r3, #2
 8009ca4:	222f      	movs	r2, #47	; 0x2f
 8009ca6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	3303      	adds	r3, #3
 8009cac:	2200      	movs	r2, #0
 8009cae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	371c      	adds	r7, #28
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr
 8009cc2:	bf00      	nop
 8009cc4:	2000a45c 	.word	0x2000a45c

08009cc8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	6839      	ldr	r1, [r7, #0]
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f7ff ffaa 	bl	8009c30 <FATFS_LinkDriverEx>
 8009cdc:	4603      	mov	r3, r0
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3708      	adds	r7, #8
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
	...

08009ce8 <__libc_init_array>:
 8009ce8:	b570      	push	{r4, r5, r6, lr}
 8009cea:	4d0d      	ldr	r5, [pc, #52]	; (8009d20 <__libc_init_array+0x38>)
 8009cec:	4c0d      	ldr	r4, [pc, #52]	; (8009d24 <__libc_init_array+0x3c>)
 8009cee:	1b64      	subs	r4, r4, r5
 8009cf0:	10a4      	asrs	r4, r4, #2
 8009cf2:	2600      	movs	r6, #0
 8009cf4:	42a6      	cmp	r6, r4
 8009cf6:	d109      	bne.n	8009d0c <__libc_init_array+0x24>
 8009cf8:	4d0b      	ldr	r5, [pc, #44]	; (8009d28 <__libc_init_array+0x40>)
 8009cfa:	4c0c      	ldr	r4, [pc, #48]	; (8009d2c <__libc_init_array+0x44>)
 8009cfc:	f000 f82e 	bl	8009d5c <_init>
 8009d00:	1b64      	subs	r4, r4, r5
 8009d02:	10a4      	asrs	r4, r4, #2
 8009d04:	2600      	movs	r6, #0
 8009d06:	42a6      	cmp	r6, r4
 8009d08:	d105      	bne.n	8009d16 <__libc_init_array+0x2e>
 8009d0a:	bd70      	pop	{r4, r5, r6, pc}
 8009d0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d10:	4798      	blx	r3
 8009d12:	3601      	adds	r6, #1
 8009d14:	e7ee      	b.n	8009cf4 <__libc_init_array+0xc>
 8009d16:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d1a:	4798      	blx	r3
 8009d1c:	3601      	adds	r6, #1
 8009d1e:	e7f2      	b.n	8009d06 <__libc_init_array+0x1e>
 8009d20:	08009e74 	.word	0x08009e74
 8009d24:	08009e74 	.word	0x08009e74
 8009d28:	08009e74 	.word	0x08009e74
 8009d2c:	08009e78 	.word	0x08009e78

08009d30 <memcpy>:
 8009d30:	440a      	add	r2, r1
 8009d32:	4291      	cmp	r1, r2
 8009d34:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009d38:	d100      	bne.n	8009d3c <memcpy+0xc>
 8009d3a:	4770      	bx	lr
 8009d3c:	b510      	push	{r4, lr}
 8009d3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d46:	4291      	cmp	r1, r2
 8009d48:	d1f9      	bne.n	8009d3e <memcpy+0xe>
 8009d4a:	bd10      	pop	{r4, pc}

08009d4c <memset>:
 8009d4c:	4402      	add	r2, r0
 8009d4e:	4603      	mov	r3, r0
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d100      	bne.n	8009d56 <memset+0xa>
 8009d54:	4770      	bx	lr
 8009d56:	f803 1b01 	strb.w	r1, [r3], #1
 8009d5a:	e7f9      	b.n	8009d50 <memset+0x4>

08009d5c <_init>:
 8009d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d5e:	bf00      	nop
 8009d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d62:	bc08      	pop	{r3}
 8009d64:	469e      	mov	lr, r3
 8009d66:	4770      	bx	lr

08009d68 <_fini>:
 8009d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d6a:	bf00      	nop
 8009d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d6e:	bc08      	pop	{r3}
 8009d70:	469e      	mov	lr, r3
 8009d72:	4770      	bx	lr
