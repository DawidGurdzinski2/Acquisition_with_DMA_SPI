
Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004434  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011b8  080045cc  080045cc  000145cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005784  08005784  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  08005784  08005784  00015784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800578c  0800578c  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800578c  0800578c  0001578c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005790  08005790  00015790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08005794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  200000ac  08005840  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  08005840  00020250  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e532  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002969  00000000  00000000  0002e60e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e80  00000000  00000000  00030f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d08  00000000  00000000  00031df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181d9  00000000  00000000  00032b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ea6  00000000  00000000  0004acd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e3fb  00000000  00000000  0005cb7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eaf7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003948  00000000  00000000  000eafcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000ac 	.word	0x200000ac
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080045b4 	.word	0x080045b4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000b0 	.word	0x200000b0
 80001d4:	080045b4 	.word	0x080045b4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ILI9341_DrawHollowCircle>:
	us *= (SystemCoreClock / 1000000);
	while (us--);
}

void ILI9341_DrawHollowCircle(uint16_t X, uint16_t Y, uint16_t radius, uint16_t color)
{
 80004dc:	b590      	push	{r4, r7, lr}
 80004de:	b089      	sub	sp, #36	; 0x24
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4604      	mov	r4, r0
 80004e4:	4608      	mov	r0, r1
 80004e6:	4611      	mov	r1, r2
 80004e8:	461a      	mov	r2, r3
 80004ea:	4623      	mov	r3, r4
 80004ec:	80fb      	strh	r3, [r7, #6]
 80004ee:	4603      	mov	r3, r0
 80004f0:	80bb      	strh	r3, [r7, #4]
 80004f2:	460b      	mov	r3, r1
 80004f4:	807b      	strh	r3, [r7, #2]
 80004f6:	4613      	mov	r3, r2
 80004f8:	803b      	strh	r3, [r7, #0]
	int x = radius-1;
 80004fa:	887b      	ldrh	r3, [r7, #2]
 80004fc:	3b01      	subs	r3, #1
 80004fe:	61fb      	str	r3, [r7, #28]
	int y = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	61bb      	str	r3, [r7, #24]
	int dx = 1;
 8000504:	2301      	movs	r3, #1
 8000506:	617b      	str	r3, [r7, #20]
	int dy = 1;
 8000508:	2301      	movs	r3, #1
 800050a:	613b      	str	r3, [r7, #16]
	int err = dx - (radius << 1);
 800050c:	887b      	ldrh	r3, [r7, #2]
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	697a      	ldr	r2, [r7, #20]
 8000512:	1ad3      	subs	r3, r2, r3
 8000514:	60fb      	str	r3, [r7, #12]

	while (x >= y)
 8000516:	e08d      	b.n	8000634 <ILI9341_DrawHollowCircle+0x158>
	{
		ILI9341_DrawPixel(X + x, Y + y, color);
 8000518:	69fb      	ldr	r3, [r7, #28]
 800051a:	b29a      	uxth	r2, r3
 800051c:	88fb      	ldrh	r3, [r7, #6]
 800051e:	4413      	add	r3, r2
 8000520:	b298      	uxth	r0, r3
 8000522:	69bb      	ldr	r3, [r7, #24]
 8000524:	b29a      	uxth	r2, r3
 8000526:	88bb      	ldrh	r3, [r7, #4]
 8000528:	4413      	add	r3, r2
 800052a:	b29b      	uxth	r3, r3
 800052c:	883a      	ldrh	r2, [r7, #0]
 800052e:	4619      	mov	r1, r3
 8000530:	f000 fcd6 	bl	8000ee0 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + y, Y + x, color);
 8000534:	69bb      	ldr	r3, [r7, #24]
 8000536:	b29a      	uxth	r2, r3
 8000538:	88fb      	ldrh	r3, [r7, #6]
 800053a:	4413      	add	r3, r2
 800053c:	b298      	uxth	r0, r3
 800053e:	69fb      	ldr	r3, [r7, #28]
 8000540:	b29a      	uxth	r2, r3
 8000542:	88bb      	ldrh	r3, [r7, #4]
 8000544:	4413      	add	r3, r2
 8000546:	b29b      	uxth	r3, r3
 8000548:	883a      	ldrh	r2, [r7, #0]
 800054a:	4619      	mov	r1, r3
 800054c:	f000 fcc8 	bl	8000ee0 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - y, Y + x, color);
 8000550:	69bb      	ldr	r3, [r7, #24]
 8000552:	b29b      	uxth	r3, r3
 8000554:	88fa      	ldrh	r2, [r7, #6]
 8000556:	1ad3      	subs	r3, r2, r3
 8000558:	b298      	uxth	r0, r3
 800055a:	69fb      	ldr	r3, [r7, #28]
 800055c:	b29a      	uxth	r2, r3
 800055e:	88bb      	ldrh	r3, [r7, #4]
 8000560:	4413      	add	r3, r2
 8000562:	b29b      	uxth	r3, r3
 8000564:	883a      	ldrh	r2, [r7, #0]
 8000566:	4619      	mov	r1, r3
 8000568:	f000 fcba 	bl	8000ee0 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - x, Y + y, color);
 800056c:	69fb      	ldr	r3, [r7, #28]
 800056e:	b29b      	uxth	r3, r3
 8000570:	88fa      	ldrh	r2, [r7, #6]
 8000572:	1ad3      	subs	r3, r2, r3
 8000574:	b298      	uxth	r0, r3
 8000576:	69bb      	ldr	r3, [r7, #24]
 8000578:	b29a      	uxth	r2, r3
 800057a:	88bb      	ldrh	r3, [r7, #4]
 800057c:	4413      	add	r3, r2
 800057e:	b29b      	uxth	r3, r3
 8000580:	883a      	ldrh	r2, [r7, #0]
 8000582:	4619      	mov	r1, r3
 8000584:	f000 fcac 	bl	8000ee0 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - x, Y - y, color);
 8000588:	69fb      	ldr	r3, [r7, #28]
 800058a:	b29b      	uxth	r3, r3
 800058c:	88fa      	ldrh	r2, [r7, #6]
 800058e:	1ad3      	subs	r3, r2, r3
 8000590:	b298      	uxth	r0, r3
 8000592:	69bb      	ldr	r3, [r7, #24]
 8000594:	b29b      	uxth	r3, r3
 8000596:	88ba      	ldrh	r2, [r7, #4]
 8000598:	1ad3      	subs	r3, r2, r3
 800059a:	b29b      	uxth	r3, r3
 800059c:	883a      	ldrh	r2, [r7, #0]
 800059e:	4619      	mov	r1, r3
 80005a0:	f000 fc9e 	bl	8000ee0 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - y, Y - x, color);
 80005a4:	69bb      	ldr	r3, [r7, #24]
 80005a6:	b29b      	uxth	r3, r3
 80005a8:	88fa      	ldrh	r2, [r7, #6]
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	b298      	uxth	r0, r3
 80005ae:	69fb      	ldr	r3, [r7, #28]
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	88ba      	ldrh	r2, [r7, #4]
 80005b4:	1ad3      	subs	r3, r2, r3
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	883a      	ldrh	r2, [r7, #0]
 80005ba:	4619      	mov	r1, r3
 80005bc:	f000 fc90 	bl	8000ee0 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + y, Y - x, color);
 80005c0:	69bb      	ldr	r3, [r7, #24]
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	88fb      	ldrh	r3, [r7, #6]
 80005c6:	4413      	add	r3, r2
 80005c8:	b298      	uxth	r0, r3
 80005ca:	69fb      	ldr	r3, [r7, #28]
 80005cc:	b29b      	uxth	r3, r3
 80005ce:	88ba      	ldrh	r2, [r7, #4]
 80005d0:	1ad3      	subs	r3, r2, r3
 80005d2:	b29b      	uxth	r3, r3
 80005d4:	883a      	ldrh	r2, [r7, #0]
 80005d6:	4619      	mov	r1, r3
 80005d8:	f000 fc82 	bl	8000ee0 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + x, Y - y, color);
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	b29a      	uxth	r2, r3
 80005e0:	88fb      	ldrh	r3, [r7, #6]
 80005e2:	4413      	add	r3, r2
 80005e4:	b298      	uxth	r0, r3
 80005e6:	69bb      	ldr	r3, [r7, #24]
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	88ba      	ldrh	r2, [r7, #4]
 80005ec:	1ad3      	subs	r3, r2, r3
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	883a      	ldrh	r2, [r7, #0]
 80005f2:	4619      	mov	r1, r3
 80005f4:	f000 fc74 	bl	8000ee0 <ILI9341_DrawPixel>

		if (err <= 0)
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	dc09      	bgt.n	8000612 <ILI9341_DrawHollowCircle+0x136>
		{
			y++;
 80005fe:	69bb      	ldr	r3, [r7, #24]
 8000600:	3301      	adds	r3, #1
 8000602:	61bb      	str	r3, [r7, #24]
			err += dy;
 8000604:	68fa      	ldr	r2, [r7, #12]
 8000606:	693b      	ldr	r3, [r7, #16]
 8000608:	4413      	add	r3, r2
 800060a:	60fb      	str	r3, [r7, #12]
			dy += 2;
 800060c:	693b      	ldr	r3, [r7, #16]
 800060e:	3302      	adds	r3, #2
 8000610:	613b      	str	r3, [r7, #16]
		}

		if (err > 0)
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	2b00      	cmp	r3, #0
 8000616:	dd0d      	ble.n	8000634 <ILI9341_DrawHollowCircle+0x158>
		{
			x--;
 8000618:	69fb      	ldr	r3, [r7, #28]
 800061a:	3b01      	subs	r3, #1
 800061c:	61fb      	str	r3, [r7, #28]
			dx += 2;
 800061e:	697b      	ldr	r3, [r7, #20]
 8000620:	3302      	adds	r3, #2
 8000622:	617b      	str	r3, [r7, #20]
			err += (-radius << 1) + dx;
 8000624:	887b      	ldrh	r3, [r7, #2]
 8000626:	425b      	negs	r3, r3
 8000628:	005a      	lsls	r2, r3, #1
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	4413      	add	r3, r2
 800062e:	68fa      	ldr	r2, [r7, #12]
 8000630:	4413      	add	r3, r2
 8000632:	60fb      	str	r3, [r7, #12]
	while (x >= y)
 8000634:	69fa      	ldr	r2, [r7, #28]
 8000636:	69bb      	ldr	r3, [r7, #24]
 8000638:	429a      	cmp	r2, r3
 800063a:	f6bf af6d 	bge.w	8000518 <ILI9341_DrawHollowCircle+0x3c>
		}
	}
}
 800063e:	bf00      	nop
 8000640:	bf00      	nop
 8000642:	3724      	adds	r7, #36	; 0x24
 8000644:	46bd      	mov	sp, r7
 8000646:	bd90      	pop	{r4, r7, pc}

08000648 <ILI9341_DrawFilledRectangleCoord>:
		ILI9341_DrawPixel(X1, Y1, color);
	}
}

void ILI9341_DrawFilledRectangleCoord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t color)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b089      	sub	sp, #36	; 0x24
 800064c:	af02      	add	r7, sp, #8
 800064e:	4604      	mov	r4, r0
 8000650:	4608      	mov	r0, r1
 8000652:	4611      	mov	r1, r2
 8000654:	461a      	mov	r2, r3
 8000656:	4623      	mov	r3, r4
 8000658:	80fb      	strh	r3, [r7, #6]
 800065a:	4603      	mov	r3, r0
 800065c:	80bb      	strh	r3, [r7, #4]
 800065e:	460b      	mov	r3, r1
 8000660:	807b      	strh	r3, [r7, #2]
 8000662:	4613      	mov	r3, r2
 8000664:	803b      	strh	r3, [r7, #0]
	uint16_t xLen = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	82fb      	strh	r3, [r7, #22]
	uint16_t yLen = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	82bb      	strh	r3, [r7, #20]
	uint8_t negX = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	74fb      	strb	r3, [r7, #19]
	uint8_t negY = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	74bb      	strb	r3, [r7, #18]
	int32_t negCalc = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	60bb      	str	r3, [r7, #8]
	uint16_t X0True = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	823b      	strh	r3, [r7, #16]
	uint16_t Y0True = 0;
 800067e:	2300      	movs	r3, #0
 8000680:	81fb      	strh	r3, [r7, #14]

	negCalc = X1 - X0;
 8000682:	887a      	ldrh	r2, [r7, #2]
 8000684:	88fb      	ldrh	r3, [r7, #6]
 8000686:	1ad3      	subs	r3, r2, r3
 8000688:	60bb      	str	r3, [r7, #8]
	if(negCalc < 0) negX = 1;
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	2b00      	cmp	r3, #0
 800068e:	da01      	bge.n	8000694 <ILI9341_DrawFilledRectangleCoord+0x4c>
 8000690:	2301      	movs	r3, #1
 8000692:	74fb      	strb	r3, [r7, #19]
	negCalc = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	60bb      	str	r3, [r7, #8]

	negCalc = Y1 - Y0;
 8000698:	883a      	ldrh	r2, [r7, #0]
 800069a:	88bb      	ldrh	r3, [r7, #4]
 800069c:	1ad3      	subs	r3, r2, r3
 800069e:	60bb      	str	r3, [r7, #8]
	if(negCalc < 0) negY = 1;
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	da01      	bge.n	80006aa <ILI9341_DrawFilledRectangleCoord+0x62>
 80006a6:	2301      	movs	r3, #1
 80006a8:	74bb      	strb	r3, [r7, #18]

	if(!negX)
 80006aa:	7cfb      	ldrb	r3, [r7, #19]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d106      	bne.n	80006be <ILI9341_DrawFilledRectangleCoord+0x76>
	{
		xLen = X1 - X0;
 80006b0:	887a      	ldrh	r2, [r7, #2]
 80006b2:	88fb      	ldrh	r3, [r7, #6]
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	82fb      	strh	r3, [r7, #22]
		X0True = X0;
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	823b      	strh	r3, [r7, #16]
 80006bc:	e005      	b.n	80006ca <ILI9341_DrawFilledRectangleCoord+0x82>
	}
	else
	{
		xLen = X0 - X1;
 80006be:	88fa      	ldrh	r2, [r7, #6]
 80006c0:	887b      	ldrh	r3, [r7, #2]
 80006c2:	1ad3      	subs	r3, r2, r3
 80006c4:	82fb      	strh	r3, [r7, #22]
		X0True = X1;
 80006c6:	887b      	ldrh	r3, [r7, #2]
 80006c8:	823b      	strh	r3, [r7, #16]
	}

	if(!negY)
 80006ca:	7cbb      	ldrb	r3, [r7, #18]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d106      	bne.n	80006de <ILI9341_DrawFilledRectangleCoord+0x96>
	{
		yLen = Y1 - Y0;
 80006d0:	883a      	ldrh	r2, [r7, #0]
 80006d2:	88bb      	ldrh	r3, [r7, #4]
 80006d4:	1ad3      	subs	r3, r2, r3
 80006d6:	82bb      	strh	r3, [r7, #20]
		Y0True = Y0;
 80006d8:	88bb      	ldrh	r3, [r7, #4]
 80006da:	81fb      	strh	r3, [r7, #14]
 80006dc:	e005      	b.n	80006ea <ILI9341_DrawFilledRectangleCoord+0xa2>
	}
	else
	{
		yLen = Y0 - Y1;
 80006de:	88ba      	ldrh	r2, [r7, #4]
 80006e0:	883b      	ldrh	r3, [r7, #0]
 80006e2:	1ad3      	subs	r3, r2, r3
 80006e4:	82bb      	strh	r3, [r7, #20]
		Y0True = Y1;
 80006e6:	883b      	ldrh	r3, [r7, #0]
 80006e8:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
 80006ea:	8abc      	ldrh	r4, [r7, #20]
 80006ec:	8afa      	ldrh	r2, [r7, #22]
 80006ee:	89f9      	ldrh	r1, [r7, #14]
 80006f0:	8a38      	ldrh	r0, [r7, #16]
 80006f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80006f4:	9300      	str	r3, [sp, #0]
 80006f6:	4623      	mov	r3, r4
 80006f8:	f000 fc58 	bl	8000fac <ILI9341_DrawRectangle>
}
 80006fc:	bf00      	nop
 80006fe:	371c      	adds	r7, #28
 8000700:	46bd      	mov	sp, r7
 8000702:	bd90      	pop	{r4, r7, pc}

08000704 <ILI9341_DrawChar>:

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b08d      	sub	sp, #52	; 0x34
 8000708:	af02      	add	r7, sp, #8
 800070a:	60b9      	str	r1, [r7, #8]
 800070c:	4611      	mov	r1, r2
 800070e:	461a      	mov	r2, r3
 8000710:	4603      	mov	r3, r0
 8000712:	73fb      	strb	r3, [r7, #15]
 8000714:	460b      	mov	r3, r1
 8000716:	81bb      	strh	r3, [r7, #12]
 8000718:	4613      	mov	r3, r2
 800071a:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 800071c:	7bfb      	ldrb	r3, [r7, #15]
 800071e:	2b1e      	cmp	r3, #30
 8000720:	d961      	bls.n	80007e6 <ILI9341_DrawChar+0xe2>
 8000722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000726:	2b00      	cmp	r3, #0
 8000728:	db5d      	blt.n	80007e6 <ILI9341_DrawChar+0xe2>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	785b      	ldrb	r3, [r3, #1]
 8000734:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	789b      	ldrb	r3, [r3, #2]
 800073a:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	78db      	ldrb	r3, [r3, #3]
 8000740:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8000742:	7bfb      	ldrb	r3, [r7, #15]
 8000744:	3b20      	subs	r3, #32
 8000746:	7ffa      	ldrb	r2, [r7, #31]
 8000748:	fb02 f303 	mul.w	r3, r2, r3
 800074c:	3304      	adds	r3, #4
 800074e:	68ba      	ldr	r2, [r7, #8]
 8000750:	4413      	add	r3, r2
 8000752:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 8000754:	7fbb      	ldrb	r3, [r7, #30]
 8000756:	b29a      	uxth	r2, r3
 8000758:	7f7b      	ldrb	r3, [r7, #29]
 800075a:	b29c      	uxth	r4, r3
 800075c:	88f9      	ldrh	r1, [r7, #6]
 800075e:	89b8      	ldrh	r0, [r7, #12]
 8000760:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000762:	9300      	str	r3, [sp, #0]
 8000764:	4623      	mov	r3, r4
 8000766:	f000 fc21 	bl	8000fac <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 800076a:	2300      	movs	r3, #0
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
 800076e:	e035      	b.n	80007dc <ILI9341_DrawChar+0xd8>
	{
		for (int i=0; i < fWidth; i++)
 8000770:	2300      	movs	r3, #0
 8000772:	623b      	str	r3, [r7, #32]
 8000774:	e02b      	b.n	80007ce <ILI9341_DrawChar+0xca>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 8000776:	7f3b      	ldrb	r3, [r7, #28]
 8000778:	6a3a      	ldr	r2, [r7, #32]
 800077a:	fb03 f202 	mul.w	r2, r3, r2
 800077e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000780:	10db      	asrs	r3, r3, #3
 8000782:	f003 031f 	and.w	r3, r3, #31
 8000786:	4413      	add	r3, r2
 8000788:	3301      	adds	r3, #1
 800078a:	69ba      	ldr	r2, [r7, #24]
 800078c:	4413      	add	r3, r2
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 8000792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000794:	f003 0307 	and.w	r3, r3, #7
 8000798:	2201      	movs	r2, #1
 800079a:	fa02 f303 	lsl.w	r3, r2, r3
 800079e:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 80007a0:	7dfa      	ldrb	r2, [r7, #23]
 80007a2:	7dbb      	ldrb	r3, [r7, #22]
 80007a4:	4013      	ands	r3, r2
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d00d      	beq.n	80007c8 <ILI9341_DrawChar+0xc4>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 80007ac:	6a3b      	ldr	r3, [r7, #32]
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	89bb      	ldrh	r3, [r7, #12]
 80007b2:	4413      	add	r3, r2
 80007b4:	b298      	uxth	r0, r3
 80007b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	88fb      	ldrh	r3, [r7, #6]
 80007bc:	4413      	add	r3, r2
 80007be:	b29b      	uxth	r3, r3
 80007c0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80007c2:	4619      	mov	r1, r3
 80007c4:	f000 fb8c 	bl	8000ee0 <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 80007c8:	6a3b      	ldr	r3, [r7, #32]
 80007ca:	3301      	adds	r3, #1
 80007cc:	623b      	str	r3, [r7, #32]
 80007ce:	7fbb      	ldrb	r3, [r7, #30]
 80007d0:	6a3a      	ldr	r2, [r7, #32]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	dbcf      	blt.n	8000776 <ILI9341_DrawChar+0x72>
	for (int j=0; j < fHeight; j++)
 80007d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d8:	3301      	adds	r3, #1
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
 80007dc:	7f7b      	ldrb	r3, [r7, #29]
 80007de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007e0:	429a      	cmp	r2, r3
 80007e2:	dbc5      	blt.n	8000770 <ILI9341_DrawChar+0x6c>
 80007e4:	e000      	b.n	80007e8 <ILI9341_DrawChar+0xe4>
	if ((ch < 31) || (ch > 127)) return;
 80007e6:	bf00      	nop
			}
		}
	}
}
 80007e8:	372c      	adds	r7, #44	; 0x2c
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd90      	pop	{r4, r7, pc}

080007ee <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b08a      	sub	sp, #40	; 0x28
 80007f2:	af02      	add	r7, sp, #8
 80007f4:	60f8      	str	r0, [r7, #12]
 80007f6:	60b9      	str	r1, [r7, #8]
 80007f8:	4611      	mov	r1, r2
 80007fa:	461a      	mov	r2, r3
 80007fc:	460b      	mov	r3, r1
 80007fe:	80fb      	strh	r3, [r7, #6]
 8000800:	4613      	mov	r3, r2
 8000802:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	785b      	ldrb	r3, [r3, #1]
 800080e:	77bb      	strb	r3, [r7, #30]

	while (*str)
 8000810:	e02d      	b.n	800086e <ILI9341_DrawText+0x80>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	7818      	ldrb	r0, [r3, #0]
 8000816:	88b9      	ldrh	r1, [r7, #4]
 8000818:	88fa      	ldrh	r2, [r7, #6]
 800081a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800081c:	9301      	str	r3, [sp, #4]
 800081e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	460b      	mov	r3, r1
 8000824:	68b9      	ldr	r1, [r7, #8]
 8000826:	f7ff ff6d 	bl	8000704 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	3b20      	subs	r3, #32
 8000830:	7ffa      	ldrb	r2, [r7, #31]
 8000832:	fb02 f303 	mul.w	r3, r2, r3
 8000836:	3304      	adds	r3, #4
 8000838:	68ba      	ldr	r2, [r7, #8]
 800083a:	4413      	add	r3, r2
 800083c:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 800083e:	69bb      	ldr	r3, [r7, #24]
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 8000844:	7dfb      	ldrb	r3, [r7, #23]
 8000846:	1c9a      	adds	r2, r3, #2
 8000848:	7fbb      	ldrb	r3, [r7, #30]
 800084a:	429a      	cmp	r2, r3
 800084c:	da07      	bge.n	800085e <ILI9341_DrawText+0x70>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 800084e:	7dfb      	ldrb	r3, [r7, #23]
 8000850:	b29a      	uxth	r2, r3
 8000852:	88fb      	ldrh	r3, [r7, #6]
 8000854:	4413      	add	r3, r2
 8000856:	b29b      	uxth	r3, r3
 8000858:	3302      	adds	r3, #2
 800085a:	80fb      	strh	r3, [r7, #6]
 800085c:	e004      	b.n	8000868 <ILI9341_DrawText+0x7a>
		}
		else
		{
			X += fWidth;
 800085e:	7fbb      	ldrb	r3, [r7, #30]
 8000860:	b29a      	uxth	r2, r3
 8000862:	88fb      	ldrh	r3, [r7, #6]
 8000864:	4413      	add	r3, r2
 8000866:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	3301      	adds	r3, #1
 800086c:	60fb      	str	r3, [r7, #12]
	while (*str)
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d1cd      	bne.n	8000812 <ILI9341_DrawText+0x24>
	}
}
 8000876:	bf00      	nop
 8000878:	bf00      	nop
 800087a:	3720      	adds	r7, #32
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4a06      	ldr	r2, [pc, #24]	; (80008a4 <HAL_SPI_TxCpltCallback+0x24>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d104      	bne.n	800089a <HAL_SPI_TxCpltCallback+0x1a>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000890:	2201      	movs	r2, #1
 8000892:	2102      	movs	r1, #2
 8000894:	4804      	ldr	r0, [pc, #16]	; (80008a8 <HAL_SPI_TxCpltCallback+0x28>)
 8000896:	f002 f9ef 	bl	8002c78 <HAL_GPIO_WritePin>
  }
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	200000f4 	.word	0x200000f4
 80008a8:	40020400 	.word	0x40020400

080008ac <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80008b6:	bf00      	nop
 80008b8:	4b08      	ldr	r3, [pc, #32]	; (80008dc <ILI9341_SPI_Tx+0x30>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	689b      	ldr	r3, [r3, #8]
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	2b02      	cmp	r3, #2
 80008c4:	d1f8      	bne.n	80008b8 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 80008c6:	1dfb      	adds	r3, r7, #7
 80008c8:	2201      	movs	r2, #1
 80008ca:	4619      	mov	r1, r3
 80008cc:	4803      	ldr	r0, [pc, #12]	; (80008dc <ILI9341_SPI_Tx+0x30>)
 80008ce:	f003 f991 	bl	8003bf4 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200000f4 	.word	0x200000f4

080008e0 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	460b      	mov	r3, r1
 80008ea:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80008ec:	bf00      	nop
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <ILI9341_SPI_TxBuffer+0x30>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	689b      	ldr	r3, [r3, #8]
 80008f4:	f003 0302 	and.w	r3, r3, #2
 80008f8:	2b02      	cmp	r3, #2
 80008fa:	d1f8      	bne.n	80008ee <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 80008fc:	887b      	ldrh	r3, [r7, #2]
 80008fe:	461a      	mov	r2, r3
 8000900:	6879      	ldr	r1, [r7, #4]
 8000902:	4803      	ldr	r0, [pc, #12]	; (8000910 <ILI9341_SPI_TxBuffer+0x30>)
 8000904:	f003 f976 	bl	8003bf4 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 8000908:	bf00      	nop
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	200000f4 	.word	0x200000f4

08000914 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 800091e:	2200      	movs	r2, #0
 8000920:	2110      	movs	r1, #16
 8000922:	4808      	ldr	r0, [pc, #32]	; (8000944 <ILI9341_WriteCommand+0x30>)
 8000924:	f002 f9a8 	bl	8002c78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000928:	2200      	movs	r2, #0
 800092a:	2102      	movs	r1, #2
 800092c:	4806      	ldr	r0, [pc, #24]	; (8000948 <ILI9341_WriteCommand+0x34>)
 800092e:	f002 f9a3 	bl	8002c78 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff ffb9 	bl	80008ac <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40020000 	.word	0x40020000
 8000948:	40020400 	.word	0x40020400

0800094c <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000956:	2201      	movs	r2, #1
 8000958:	2110      	movs	r1, #16
 800095a:	4808      	ldr	r0, [pc, #32]	; (800097c <ILI9341_WriteData+0x30>)
 800095c:	f002 f98c 	bl	8002c78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000960:	2200      	movs	r2, #0
 8000962:	2102      	movs	r1, #2
 8000964:	4806      	ldr	r0, [pc, #24]	; (8000980 <ILI9341_WriteData+0x34>)
 8000966:	f002 f987 	bl	8002c78 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff ff9d 	bl	80008ac <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40020000 	.word	0x40020000
 8000980:	40020400 	.word	0x40020400

08000984 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	460b      	mov	r3, r1
 800098e:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000990:	2201      	movs	r2, #1
 8000992:	2110      	movs	r1, #16
 8000994:	4808      	ldr	r0, [pc, #32]	; (80009b8 <ILI9341_WriteBuffer+0x34>)
 8000996:	f002 f96f 	bl	8002c78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 800099a:	2200      	movs	r2, #0
 800099c:	2102      	movs	r1, #2
 800099e:	4807      	ldr	r0, [pc, #28]	; (80009bc <ILI9341_WriteBuffer+0x38>)
 80009a0:	f002 f96a 	bl	8002c78 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 80009a4:	887b      	ldrh	r3, [r7, #2]
 80009a6:	4619      	mov	r1, r3
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f7ff ff99 	bl	80008e0 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40020000 	.word	0x40020000
 80009bc:	40020400 	.word	0x40020400

080009c0 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80009c0:	b590      	push	{r4, r7, lr}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4604      	mov	r4, r0
 80009c8:	4608      	mov	r0, r1
 80009ca:	4611      	mov	r1, r2
 80009cc:	461a      	mov	r2, r3
 80009ce:	4623      	mov	r3, r4
 80009d0:	80fb      	strh	r3, [r7, #6]
 80009d2:	4603      	mov	r3, r0
 80009d4:	80bb      	strh	r3, [r7, #4]
 80009d6:	460b      	mov	r3, r1
 80009d8:	807b      	strh	r3, [r7, #2]
 80009da:	4613      	mov	r3, r2
 80009dc:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 80009de:	88fb      	ldrh	r3, [r7, #6]
 80009e0:	0a1b      	lsrs	r3, r3, #8
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 80009e8:	88fb      	ldrh	r3, [r7, #6]
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 80009ee:	887b      	ldrh	r3, [r7, #2]
 80009f0:	0a1b      	lsrs	r3, r3, #8
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 80009f8:	887b      	ldrh	r3, [r7, #2]
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 80009fe:	202a      	movs	r0, #42	; 0x2a
 8000a00:	f7ff ff88 	bl	8000914 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	2104      	movs	r1, #4
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff ffba 	bl	8000984 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 8000a10:	88bb      	ldrh	r3, [r7, #4]
 8000a12:	0a1b      	lsrs	r3, r3, #8
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 8000a1a:	88bb      	ldrh	r3, [r7, #4]
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 8000a20:	883b      	ldrh	r3, [r7, #0]
 8000a22:	0a1b      	lsrs	r3, r3, #8
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 8000a2a:	883b      	ldrh	r3, [r7, #0]
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 8000a30:	202b      	movs	r0, #43	; 0x2b
 8000a32:	f7ff ff6f 	bl	8000914 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000a36:	f107 030c 	add.w	r3, r7, #12
 8000a3a:	2104      	movs	r1, #4
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ffa1 	bl	8000984 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 8000a42:	202c      	movs	r0, #44	; 0x2c
 8000a44:	f7ff ff66 	bl	8000914 <ILI9341_WriteCommand>
}
 8000a48:	bf00      	nop
 8000a4a:	3714      	adds	r7, #20
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd90      	pop	{r4, r7, pc}

08000a50 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8000a54:	2200      	movs	r2, #0
 8000a56:	2101      	movs	r1, #1
 8000a58:	480c      	ldr	r0, [pc, #48]	; (8000a8c <ILI9341_Reset+0x3c>)
 8000a5a:	f002 f90d 	bl	8002c78 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000a5e:	200a      	movs	r0, #10
 8000a60:	f001 fac8 	bl	8001ff4 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 8000a64:	2200      	movs	r2, #0
 8000a66:	2102      	movs	r1, #2
 8000a68:	4808      	ldr	r0, [pc, #32]	; (8000a8c <ILI9341_Reset+0x3c>)
 8000a6a:	f002 f905 	bl	8002c78 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000a6e:	200a      	movs	r0, #10
 8000a70:	f001 fac0 	bl	8001ff4 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000a74:	2201      	movs	r2, #1
 8000a76:	2101      	movs	r1, #1
 8000a78:	4804      	ldr	r0, [pc, #16]	; (8000a8c <ILI9341_Reset+0x3c>)
 8000a7a:	f002 f8fd 	bl	8002c78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 8000a7e:	2201      	movs	r2, #1
 8000a80:	2102      	movs	r1, #2
 8000a82:	4802      	ldr	r0, [pc, #8]	; (8000a8c <ILI9341_Reset+0x3c>)
 8000a84:	f002 f8f8 	bl	8002c78 <HAL_GPIO_WritePin>
}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40020400 	.word	0x40020400

08000a90 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000a94:	2201      	movs	r2, #1
 8000a96:	2101      	movs	r1, #1
 8000a98:	4802      	ldr	r0, [pc, #8]	; (8000aa4 <ILI9341_Enable+0x14>)
 8000a9a:	f002 f8ed 	bl	8002c78 <HAL_GPIO_WritePin>
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40020400 	.word	0x40020400

08000aa8 <ILI9341_Init>:

void ILI9341_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8000aac:	f7ff fff0 	bl	8000a90 <ILI9341_Enable>
	ILI9341_Reset();
 8000ab0:	f7ff ffce 	bl	8000a50 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f7ff ff2d 	bl	8000914 <ILI9341_WriteCommand>
	HAL_Delay(10);
 8000aba:	200a      	movs	r0, #10
 8000abc:	f001 fa9a 	bl	8001ff4 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8000ac0:	20cb      	movs	r0, #203	; 0xcb
 8000ac2:	f7ff ff27 	bl	8000914 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 8000ac6:	2039      	movs	r0, #57	; 0x39
 8000ac8:	f7ff ff40 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 8000acc:	202c      	movs	r0, #44	; 0x2c
 8000ace:	f7ff ff3d 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f7ff ff3a 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 8000ad8:	2034      	movs	r0, #52	; 0x34
 8000ada:	f7ff ff37 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 8000ade:	2002      	movs	r0, #2
 8000ae0:	f7ff ff34 	bl	800094c <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 8000ae4:	20cf      	movs	r0, #207	; 0xcf
 8000ae6:	f7ff ff15 	bl	8000914 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000aea:	2000      	movs	r0, #0
 8000aec:	f7ff ff2e 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000af0:	20c1      	movs	r0, #193	; 0xc1
 8000af2:	f7ff ff2b 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 8000af6:	2030      	movs	r0, #48	; 0x30
 8000af8:	f7ff ff28 	bl	800094c <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 8000afc:	20e8      	movs	r0, #232	; 0xe8
 8000afe:	f7ff ff09 	bl	8000914 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 8000b02:	2085      	movs	r0, #133	; 0x85
 8000b04:	f7ff ff22 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f7ff ff1f 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 8000b0e:	2078      	movs	r0, #120	; 0x78
 8000b10:	f7ff ff1c 	bl	800094c <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8000b14:	20ea      	movs	r0, #234	; 0xea
 8000b16:	f7ff fefd 	bl	8000914 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f7ff ff16 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000b20:	2000      	movs	r0, #0
 8000b22:	f7ff ff13 	bl	800094c <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 8000b26:	20ed      	movs	r0, #237	; 0xed
 8000b28:	f7ff fef4 	bl	8000914 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8000b2c:	2064      	movs	r0, #100	; 0x64
 8000b2e:	f7ff ff0d 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000b32:	2003      	movs	r0, #3
 8000b34:	f7ff ff0a 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8000b38:	2012      	movs	r0, #18
 8000b3a:	f7ff ff07 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8000b3e:	2081      	movs	r0, #129	; 0x81
 8000b40:	f7ff ff04 	bl	800094c <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8000b44:	20f7      	movs	r0, #247	; 0xf7
 8000b46:	f7ff fee5 	bl	8000914 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 8000b4a:	2020      	movs	r0, #32
 8000b4c:	f7ff fefe 	bl	800094c <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8000b50:	20c0      	movs	r0, #192	; 0xc0
 8000b52:	f7ff fedf 	bl	8000914 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 8000b56:	2023      	movs	r0, #35	; 0x23
 8000b58:	f7ff fef8 	bl	800094c <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8000b5c:	20c1      	movs	r0, #193	; 0xc1
 8000b5e:	f7ff fed9 	bl	8000914 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8000b62:	2010      	movs	r0, #16
 8000b64:	f7ff fef2 	bl	800094c <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8000b68:	20c5      	movs	r0, #197	; 0xc5
 8000b6a:	f7ff fed3 	bl	8000914 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8000b6e:	203e      	movs	r0, #62	; 0x3e
 8000b70:	f7ff feec 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8000b74:	2028      	movs	r0, #40	; 0x28
 8000b76:	f7ff fee9 	bl	800094c <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8000b7a:	20c7      	movs	r0, #199	; 0xc7
 8000b7c:	f7ff feca 	bl	8000914 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8000b80:	2086      	movs	r0, #134	; 0x86
 8000b82:	f7ff fee3 	bl	800094c <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 8000b86:	2036      	movs	r0, #54	; 0x36
 8000b88:	f7ff fec4 	bl	8000914 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8000b8c:	2048      	movs	r0, #72	; 0x48
 8000b8e:	f7ff fedd 	bl	800094c <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8000b92:	203a      	movs	r0, #58	; 0x3a
 8000b94:	f7ff febe 	bl	8000914 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8000b98:	2055      	movs	r0, #85	; 0x55
 8000b9a:	f7ff fed7 	bl	800094c <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8000b9e:	20b1      	movs	r0, #177	; 0xb1
 8000ba0:	f7ff feb8 	bl	8000914 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f7ff fed1 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8000baa:	2018      	movs	r0, #24
 8000bac:	f7ff fece 	bl	800094c <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8000bb0:	20b6      	movs	r0, #182	; 0xb6
 8000bb2:	f7ff feaf 	bl	8000914 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 8000bb6:	2008      	movs	r0, #8
 8000bb8:	f7ff fec8 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8000bbc:	2082      	movs	r0, #130	; 0x82
 8000bbe:	f7ff fec5 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8000bc2:	2027      	movs	r0, #39	; 0x27
 8000bc4:	f7ff fec2 	bl	800094c <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8000bc8:	20f2      	movs	r0, #242	; 0xf2
 8000bca:	f7ff fea3 	bl	8000914 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f7ff febc 	bl	800094c <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8000bd4:	2026      	movs	r0, #38	; 0x26
 8000bd6:	f7ff fe9d 	bl	8000914 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 8000bda:	2001      	movs	r0, #1
 8000bdc:	f7ff feb6 	bl	800094c <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8000be0:	20e0      	movs	r0, #224	; 0xe0
 8000be2:	f7ff fe97 	bl	8000914 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 8000be6:	200f      	movs	r0, #15
 8000be8:	f7ff feb0 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000bec:	2031      	movs	r0, #49	; 0x31
 8000bee:	f7ff fead 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8000bf2:	202b      	movs	r0, #43	; 0x2b
 8000bf4:	f7ff feaa 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000bf8:	200c      	movs	r0, #12
 8000bfa:	f7ff fea7 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000bfe:	200e      	movs	r0, #14
 8000c00:	f7ff fea4 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000c04:	2008      	movs	r0, #8
 8000c06:	f7ff fea1 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 8000c0a:	204e      	movs	r0, #78	; 0x4e
 8000c0c:	f7ff fe9e 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8000c10:	20f1      	movs	r0, #241	; 0xf1
 8000c12:	f7ff fe9b 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 8000c16:	2037      	movs	r0, #55	; 0x37
 8000c18:	f7ff fe98 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000c1c:	2007      	movs	r0, #7
 8000c1e:	f7ff fe95 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8000c22:	2010      	movs	r0, #16
 8000c24:	f7ff fe92 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000c28:	2003      	movs	r0, #3
 8000c2a:	f7ff fe8f 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000c2e:	200e      	movs	r0, #14
 8000c30:	f7ff fe8c 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8000c34:	2009      	movs	r0, #9
 8000c36:	f7ff fe89 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f7ff fe86 	bl	800094c <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8000c40:	20e1      	movs	r0, #225	; 0xe1
 8000c42:	f7ff fe67 	bl	8000914 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000c46:	2000      	movs	r0, #0
 8000c48:	f7ff fe80 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000c4c:	200e      	movs	r0, #14
 8000c4e:	f7ff fe7d 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8000c52:	2014      	movs	r0, #20
 8000c54:	f7ff fe7a 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000c58:	2003      	movs	r0, #3
 8000c5a:	f7ff fe77 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8000c5e:	2011      	movs	r0, #17
 8000c60:	f7ff fe74 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000c64:	2007      	movs	r0, #7
 8000c66:	f7ff fe71 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000c6a:	2031      	movs	r0, #49	; 0x31
 8000c6c:	f7ff fe6e 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000c70:	20c1      	movs	r0, #193	; 0xc1
 8000c72:	f7ff fe6b 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 8000c76:	2048      	movs	r0, #72	; 0x48
 8000c78:	f7ff fe68 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000c7c:	2008      	movs	r0, #8
 8000c7e:	f7ff fe65 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000c82:	200f      	movs	r0, #15
 8000c84:	f7ff fe62 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000c88:	200c      	movs	r0, #12
 8000c8a:	f7ff fe5f 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000c8e:	2031      	movs	r0, #49	; 0x31
 8000c90:	f7ff fe5c 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8000c94:	2036      	movs	r0, #54	; 0x36
 8000c96:	f7ff fe59 	bl	800094c <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000c9a:	200f      	movs	r0, #15
 8000c9c:	f7ff fe56 	bl	800094c <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8000ca0:	2011      	movs	r0, #17
 8000ca2:	f7ff fe37 	bl	8000914 <ILI9341_WriteCommand>
	HAL_Delay(100);
 8000ca6:	2064      	movs	r0, #100	; 0x64
 8000ca8:	f001 f9a4 	bl	8001ff4 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8000cac:	2029      	movs	r0, #41	; 0x29
 8000cae:	f7ff fe31 	bl	8000914 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_2);
 8000cb2:	2002      	movs	r0, #2
 8000cb4:	f000 f802 	bl	8000cbc <ILI9341_SetRotation>
}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 8000cc6:	2036      	movs	r0, #54	; 0x36
 8000cc8:	f7ff fe24 	bl	8000914 <ILI9341_WriteCommand>
	HAL_Delay(1);
 8000ccc:	2001      	movs	r0, #1
 8000cce:	f001 f991 	bl	8001ff4 <HAL_Delay>

	switch(rotation)
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	2b03      	cmp	r3, #3
 8000cd6:	d837      	bhi.n	8000d48 <ILI9341_SetRotation+0x8c>
 8000cd8:	a201      	add	r2, pc, #4	; (adr r2, 8000ce0 <ILI9341_SetRotation+0x24>)
 8000cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cde:	bf00      	nop
 8000ce0:	08000cf1 	.word	0x08000cf1
 8000ce4:	08000d07 	.word	0x08000d07
 8000ce8:	08000d1d 	.word	0x08000d1d
 8000cec:	08000d33 	.word	0x08000d33
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 8000cf0:	2048      	movs	r0, #72	; 0x48
 8000cf2:	f7ff fe2b 	bl	800094c <ILI9341_WriteData>
		LCD_WIDTH = 240;
 8000cf6:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <ILI9341_SetRotation+0x98>)
 8000cf8:	22f0      	movs	r2, #240	; 0xf0
 8000cfa:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000cfc:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <ILI9341_SetRotation+0x9c>)
 8000cfe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000d02:	801a      	strh	r2, [r3, #0]
		break;
 8000d04:	e021      	b.n	8000d4a <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 8000d06:	2028      	movs	r0, #40	; 0x28
 8000d08:	f7ff fe20 	bl	800094c <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000d0c:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <ILI9341_SetRotation+0x98>)
 8000d0e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000d12:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000d14:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <ILI9341_SetRotation+0x9c>)
 8000d16:	22f0      	movs	r2, #240	; 0xf0
 8000d18:	801a      	strh	r2, [r3, #0]
		break;
 8000d1a:	e016      	b.n	8000d4a <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 8000d1c:	2088      	movs	r0, #136	; 0x88
 8000d1e:	f7ff fe15 	bl	800094c <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8000d22:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <ILI9341_SetRotation+0x98>)
 8000d24:	22f0      	movs	r2, #240	; 0xf0
 8000d26:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000d28:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <ILI9341_SetRotation+0x9c>)
 8000d2a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000d2e:	801a      	strh	r2, [r3, #0]
		break;
 8000d30:	e00b      	b.n	8000d4a <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 8000d32:	20e8      	movs	r0, #232	; 0xe8
 8000d34:	f7ff fe0a 	bl	800094c <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <ILI9341_SetRotation+0x98>)
 8000d3a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000d3e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000d40:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <ILI9341_SetRotation+0x9c>)
 8000d42:	22f0      	movs	r2, #240	; 0xf0
 8000d44:	801a      	strh	r2, [r3, #0]
		break;
 8000d46:	e000      	b.n	8000d4a <ILI9341_SetRotation+0x8e>
	default:
		break;
 8000d48:	bf00      	nop
	}
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000002 	.word	0x20000002
 8000d58:	20000000 	.word	0x20000000

08000d5c <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8000d5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d60:	b08d      	sub	sp, #52	; 0x34
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	4603      	mov	r3, r0
 8000d66:	6039      	str	r1, [r7, #0]
 8000d68:	80fb      	strh	r3, [r7, #6]
 8000d6a:	466b      	mov	r3, sp
 8000d6c:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24

	if((size*2) < BURST_MAX_SIZE)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d7a:	d202      	bcs.n	8000d82 <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8000d80:	e002      	b.n	8000d88 <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8000d82:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	2110      	movs	r1, #16
 8000d8c:	483e      	ldr	r0, [pc, #248]	; (8000e88 <ILI9341_DrawColorBurst+0x12c>)
 8000d8e:	f001 ff73 	bl	8002c78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2102      	movs	r1, #2
 8000d96:	483d      	ldr	r0, [pc, #244]	; (8000e8c <ILI9341_DrawColorBurst+0x130>)
 8000d98:	f001 ff6e 	bl	8002c78 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8000d9c:	88fb      	ldrh	r3, [r7, #6]
 8000d9e:	0a1b      	lsrs	r3, r3, #8
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t BurstBuffer[BufferSize];
 8000da6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000da8:	460b      	mov	r3, r1
 8000daa:	3b01      	subs	r3, #1
 8000dac:	61fb      	str	r3, [r7, #28]
 8000dae:	2300      	movs	r3, #0
 8000db0:	4688      	mov	r8, r1
 8000db2:	4699      	mov	r9, r3
 8000db4:	f04f 0200 	mov.w	r2, #0
 8000db8:	f04f 0300 	mov.w	r3, #0
 8000dbc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000dc0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000dc4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000dc8:	2300      	movs	r3, #0
 8000dca:	460c      	mov	r4, r1
 8000dcc:	461d      	mov	r5, r3
 8000dce:	f04f 0200 	mov.w	r2, #0
 8000dd2:	f04f 0300 	mov.w	r3, #0
 8000dd6:	00eb      	lsls	r3, r5, #3
 8000dd8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000ddc:	00e2      	lsls	r2, r4, #3
 8000dde:	1dcb      	adds	r3, r1, #7
 8000de0:	08db      	lsrs	r3, r3, #3
 8000de2:	00db      	lsls	r3, r3, #3
 8000de4:	ebad 0d03 	sub.w	sp, sp, r3
 8000de8:	466b      	mov	r3, sp
 8000dea:	3300      	adds	r3, #0
 8000dec:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000dee:	2300      	movs	r3, #0
 8000df0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000df2:	e00e      	b.n	8000e12 <ILI9341_DrawColorBurst+0xb6>
	{
		BurstBuffer[j] = chifted;
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000df8:	4413      	add	r3, r2
 8000dfa:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000dfe:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8000e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e02:	3301      	adds	r3, #1
 8000e04:	88fa      	ldrh	r2, [r7, #6]
 8000e06:	b2d1      	uxtb	r1, r2
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e0e:	3302      	adds	r3, #2
 8000e10:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d3ec      	bcc.n	8000df4 <ILI9341_DrawColorBurst+0x98>
	}

	uint32_t SendingSize = size * 2;
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8000e20:	697a      	ldr	r2, [r7, #20]
 8000e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e28:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e2e:	fbb3 f2f2 	udiv	r2, r3, r2
 8000e32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000e34:	fb01 f202 	mul.w	r2, r1, r2
 8000e38:	1a9b      	subs	r3, r3, r2
 8000e3a:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d010      	beq.n	8000e64 <ILI9341_DrawColorBurst+0x108>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000e42:	2300      	movs	r3, #0
 8000e44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e46:	e009      	b.n	8000e5c <ILI9341_DrawColorBurst+0x100>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8000e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	230a      	movs	r3, #10
 8000e4e:	69b9      	ldr	r1, [r7, #24]
 8000e50:	480f      	ldr	r0, [pc, #60]	; (8000e90 <ILI9341_DrawColorBurst+0x134>)
 8000e52:	f002 fbf0 	bl	8003636 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e58:	3301      	adds	r3, #1
 8000e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d3f1      	bcc.n	8000e48 <ILI9341_DrawColorBurst+0xec>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	230a      	movs	r3, #10
 8000e6a:	69b9      	ldr	r1, [r7, #24]
 8000e6c:	4808      	ldr	r0, [pc, #32]	; (8000e90 <ILI9341_DrawColorBurst+0x134>)
 8000e6e:	f002 fbe2 	bl	8003636 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000e72:	2201      	movs	r2, #1
 8000e74:	2102      	movs	r1, #2
 8000e76:	4805      	ldr	r0, [pc, #20]	; (8000e8c <ILI9341_DrawColorBurst+0x130>)
 8000e78:	f001 fefe 	bl	8002c78 <HAL_GPIO_WritePin>
 8000e7c:	46b5      	mov	sp, r6
}
 8000e7e:	bf00      	nop
 8000e80:	3734      	adds	r7, #52	; 0x34
 8000e82:	46bd      	mov	sp, r7
 8000e84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e88:	40020000 	.word	0x40020000
 8000e8c:	40020400 	.word	0x40020400
 8000e90:	200000f4 	.word	0x200000f4

08000e94 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <ILI9341_FillScreen+0x44>)
 8000ea0:	881b      	ldrh	r3, [r3, #0]
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <ILI9341_FillScreen+0x48>)
 8000ea6:	881b      	ldrh	r3, [r3, #0]
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	2100      	movs	r1, #0
 8000eac:	2000      	movs	r0, #0
 8000eae:	f7ff fd87 	bl	80009c0 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <ILI9341_FillScreen+0x44>)
 8000eb4:	881b      	ldrh	r3, [r3, #0]
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b08      	ldr	r3, [pc, #32]	; (8000edc <ILI9341_FillScreen+0x48>)
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	fb02 f303 	mul.w	r3, r2, r3
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	4611      	mov	r1, r2
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff ff46 	bl	8000d5c <ILI9341_DrawColorBurst>
}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000002 	.word	0x20000002
 8000edc:	20000000 	.word	0x20000000

08000ee0 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	80fb      	strh	r3, [r7, #6]
 8000eea:	460b      	mov	r3, r1
 8000eec:	80bb      	strh	r3, [r7, #4]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000ef2:	4b2c      	ldr	r3, [pc, #176]	; (8000fa4 <ILI9341_DrawPixel+0xc4>)
 8000ef4:	881b      	ldrh	r3, [r3, #0]
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	88fa      	ldrh	r2, [r7, #6]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d24d      	bcs.n	8000f9a <ILI9341_DrawPixel+0xba>
 8000efe:	4b2a      	ldr	r3, [pc, #168]	; (8000fa8 <ILI9341_DrawPixel+0xc8>)
 8000f00:	881b      	ldrh	r3, [r3, #0]
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	88ba      	ldrh	r2, [r7, #4]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d247      	bcs.n	8000f9a <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	0a1b      	lsrs	r3, r3, #8
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	753b      	strb	r3, [r7, #20]
 8000f14:	88fb      	ldrh	r3, [r7, #6]
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	757b      	strb	r3, [r7, #21]
 8000f1a:	88fb      	ldrh	r3, [r7, #6]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	121b      	asrs	r3, r3, #8
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	75bb      	strb	r3, [r7, #22]
 8000f24:	88fb      	ldrh	r3, [r7, #6]
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	3301      	adds	r3, #1
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8000f2e:	88bb      	ldrh	r3, [r7, #4]
 8000f30:	0a1b      	lsrs	r3, r3, #8
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	743b      	strb	r3, [r7, #16]
 8000f38:	88bb      	ldrh	r3, [r7, #4]
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	747b      	strb	r3, [r7, #17]
 8000f3e:	88bb      	ldrh	r3, [r7, #4]
 8000f40:	3301      	adds	r3, #1
 8000f42:	121b      	asrs	r3, r3, #8
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	74bb      	strb	r3, [r7, #18]
 8000f48:	88bb      	ldrh	r3, [r7, #4]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 8000f52:	887b      	ldrh	r3, [r7, #2]
 8000f54:	0a1b      	lsrs	r3, r3, #8
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	733b      	strb	r3, [r7, #12]
 8000f5c:	887b      	ldrh	r3, [r7, #2]
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8000f62:	202a      	movs	r0, #42	; 0x2a
 8000f64:	f7ff fcd6 	bl	8000914 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	2104      	movs	r1, #4
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff fd08 	bl	8000984 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8000f74:	202b      	movs	r0, #43	; 0x2b
 8000f76:	f7ff fccd 	bl	8000914 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 8000f7a:	f107 0310 	add.w	r3, r7, #16
 8000f7e:	2104      	movs	r1, #4
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fcff 	bl	8000984 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 8000f86:	202c      	movs	r0, #44	; 0x2c
 8000f88:	f7ff fcc4 	bl	8000914 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	2102      	movs	r1, #2
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fcf6 	bl	8000984 <ILI9341_WriteBuffer>
 8000f98:	e000      	b.n	8000f9c <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000f9a:	bf00      	nop
}
 8000f9c:	3718      	adds	r7, #24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000002 	.word	0x20000002
 8000fa8:	20000000 	.word	0x20000000

08000fac <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8000fac:	b590      	push	{r4, r7, lr}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	4608      	mov	r0, r1
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4623      	mov	r3, r4
 8000fbc:	80fb      	strh	r3, [r7, #6]
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	80bb      	strh	r3, [r7, #4]
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	807b      	strh	r3, [r7, #2]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000fca:	4b24      	ldr	r3, [pc, #144]	; (800105c <ILI9341_DrawRectangle+0xb0>)
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	88fa      	ldrh	r2, [r7, #6]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d23d      	bcs.n	8001052 <ILI9341_DrawRectangle+0xa6>
 8000fd6:	4b22      	ldr	r3, [pc, #136]	; (8001060 <ILI9341_DrawRectangle+0xb4>)
 8000fd8:	881b      	ldrh	r3, [r3, #0]
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	88ba      	ldrh	r2, [r7, #4]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d237      	bcs.n	8001052 <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 8000fe2:	88fa      	ldrh	r2, [r7, #6]
 8000fe4:	887b      	ldrh	r3, [r7, #2]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	4a1c      	ldr	r2, [pc, #112]	; (800105c <ILI9341_DrawRectangle+0xb0>)
 8000fea:	8812      	ldrh	r2, [r2, #0]
 8000fec:	b292      	uxth	r2, r2
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	dd05      	ble.n	8000ffe <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	; (800105c <ILI9341_DrawRectangle+0xb0>)
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	88fb      	ldrh	r3, [r7, #6]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 8000ffe:	88ba      	ldrh	r2, [r7, #4]
 8001000:	883b      	ldrh	r3, [r7, #0]
 8001002:	4413      	add	r3, r2
 8001004:	4a16      	ldr	r2, [pc, #88]	; (8001060 <ILI9341_DrawRectangle+0xb4>)
 8001006:	8812      	ldrh	r2, [r2, #0]
 8001008:	b292      	uxth	r2, r2
 800100a:	4293      	cmp	r3, r2
 800100c:	dd05      	ble.n	800101a <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 800100e:	4b14      	ldr	r3, [pc, #80]	; (8001060 <ILI9341_DrawRectangle+0xb4>)
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	b29a      	uxth	r2, r3
 8001014:	88bb      	ldrh	r3, [r7, #4]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 800101a:	88fa      	ldrh	r2, [r7, #6]
 800101c:	887b      	ldrh	r3, [r7, #2]
 800101e:	4413      	add	r3, r2
 8001020:	b29b      	uxth	r3, r3
 8001022:	3b01      	subs	r3, #1
 8001024:	b29c      	uxth	r4, r3
 8001026:	88ba      	ldrh	r2, [r7, #4]
 8001028:	883b      	ldrh	r3, [r7, #0]
 800102a:	4413      	add	r3, r2
 800102c:	b29b      	uxth	r3, r3
 800102e:	3b01      	subs	r3, #1
 8001030:	b29b      	uxth	r3, r3
 8001032:	88b9      	ldrh	r1, [r7, #4]
 8001034:	88f8      	ldrh	r0, [r7, #6]
 8001036:	4622      	mov	r2, r4
 8001038:	f7ff fcc2 	bl	80009c0 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 800103c:	883b      	ldrh	r3, [r7, #0]
 800103e:	887a      	ldrh	r2, [r7, #2]
 8001040:	fb02 f303 	mul.w	r3, r2, r3
 8001044:	461a      	mov	r2, r3
 8001046:	8b3b      	ldrh	r3, [r7, #24]
 8001048:	4611      	mov	r1, r2
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fe86 	bl	8000d5c <ILI9341_DrawColorBurst>
 8001050:	e000      	b.n	8001054 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001052:	bf00      	nop
}
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	bd90      	pop	{r4, r7, pc}
 800105a:	bf00      	nop
 800105c:	20000002 	.word	0x20000002
 8001060:	20000000 	.word	0x20000000

08001064 <XPT2046_TouchSelect>:
}

#endif /* SOFTWARE_SPI */

static void XPT2046_TouchSelect()
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_RESET);
 8001068:	2200      	movs	r2, #0
 800106a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800106e:	4802      	ldr	r0, [pc, #8]	; (8001078 <XPT2046_TouchSelect+0x14>)
 8001070:	f001 fe02 	bl	8002c78 <HAL_GPIO_WritePin>
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40020000 	.word	0x40020000

0800107c <XPT2046_TouchUnselect>:

static void XPT2046_TouchUnselect()
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_SET);
 8001080:	2201      	movs	r2, #1
 8001082:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001086:	4802      	ldr	r0, [pc, #8]	; (8001090 <XPT2046_TouchUnselect+0x14>)
 8001088:	f001 fdf6 	bl	8002c78 <HAL_GPIO_WritePin>
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40020000 	.word	0x40020000

08001094 <XPT2046_TouchPressed>:

bool XPT2046_TouchPressed(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(XPT2046_IRQ_GPIO_Port, XPT2046_IRQ_Pin) == GPIO_PIN_RESET;
 8001098:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800109c:	4805      	ldr	r0, [pc, #20]	; (80010b4 <XPT2046_TouchPressed+0x20>)
 800109e:	f001 fdd3 	bl	8002c48 <HAL_GPIO_ReadPin>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	bf0c      	ite	eq
 80010a8:	2301      	moveq	r3, #1
 80010aa:	2300      	movne	r3, #0
 80010ac:	b2db      	uxtb	r3, r3
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40020000 	.word	0x40020000

080010b8 <XPT2046_TouchGetCoordinates>:

bool XPT2046_TouchGetCoordinates(uint16_t* x, uint16_t* y)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08c      	sub	sp, #48	; 0x30
 80010bc:	af02      	add	r7, sp, #8
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
    static const uint8_t cmd_read_y[] = { READ_Y };
    static const uint8_t zeroes_tx[] = { 0x00, 0x00 };

#endif /* SOFTWARE_SPI */

    XPT2046_TouchSelect();
 80010c2:	f7ff ffcf 	bl	8001064 <XPT2046_TouchSelect>

    uint32_t avg_x = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t avg_y = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	623b      	str	r3, [r7, #32]
    uint8_t nsamples = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	77fb      	strb	r3, [r7, #31]

    for(uint8_t i = 0; i < 16; i++)
 80010d2:	2300      	movs	r3, #0
 80010d4:	77bb      	strb	r3, [r7, #30]
 80010d6:	e03f      	b.n	8001158 <XPT2046_TouchGetCoordinates+0xa0>
    {
        if(!XPT2046_TouchPressed())
 80010d8:	f7ff ffdc 	bl	8001094 <XPT2046_TouchPressed>
 80010dc:	4603      	mov	r3, r0
 80010de:	f083 0301 	eor.w	r3, r3, #1
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d13b      	bne.n	8001160 <XPT2046_TouchGetCoordinates+0xa8>
            break;

        nsamples++;
 80010e8:	7ffb      	ldrb	r3, [r7, #31]
 80010ea:	3301      	adds	r3, #1
 80010ec:	77fb      	strb	r3, [r7, #31]
	   x_raw[0] = spi_read_byte();
	   x_raw[1] = spi_read_byte();

#else

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010f2:	2201      	movs	r2, #1
 80010f4:	4945      	ldr	r1, [pc, #276]	; (800120c <XPT2046_TouchGetCoordinates+0x154>)
 80010f6:	4846      	ldr	r0, [pc, #280]	; (8001210 <XPT2046_TouchGetCoordinates+0x158>)
 80010f8:	f002 fa9d 	bl	8003636 <HAL_SPI_Transmit>
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
 80010fc:	f107 0210 	add.w	r2, r7, #16
 8001100:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	2302      	movs	r3, #2
 8001108:	4942      	ldr	r1, [pc, #264]	; (8001214 <XPT2046_TouchGetCoordinates+0x15c>)
 800110a:	4841      	ldr	r0, [pc, #260]	; (8001210 <XPT2046_TouchGetCoordinates+0x158>)
 800110c:	f002 fbcf 	bl	80038ae <HAL_SPI_TransmitReceive>

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
 8001110:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001114:	2201      	movs	r2, #1
 8001116:	4940      	ldr	r1, [pc, #256]	; (8001218 <XPT2046_TouchGetCoordinates+0x160>)
 8001118:	483d      	ldr	r0, [pc, #244]	; (8001210 <XPT2046_TouchGetCoordinates+0x158>)
 800111a:	f002 fa8c 	bl	8003636 <HAL_SPI_Transmit>
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
 800111e:	f107 020c 	add.w	r2, r7, #12
 8001122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	2302      	movs	r3, #2
 800112a:	493a      	ldr	r1, [pc, #232]	; (8001214 <XPT2046_TouchGetCoordinates+0x15c>)
 800112c:	4838      	ldr	r0, [pc, #224]	; (8001210 <XPT2046_TouchGetCoordinates+0x158>)
 800112e:	f002 fbbe 	bl	80038ae <HAL_SPI_TransmitReceive>

#endif /* SOFTWARE_SPI */

        avg_x += (((uint16_t)x_raw[0]) << 8) | ((uint16_t)x_raw[1]);
 8001132:	7b3b      	ldrb	r3, [r7, #12]
 8001134:	021b      	lsls	r3, r3, #8
 8001136:	7b7a      	ldrb	r2, [r7, #13]
 8001138:	4313      	orrs	r3, r2
 800113a:	461a      	mov	r2, r3
 800113c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113e:	4413      	add	r3, r2
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
        avg_y += (((uint16_t)y_raw[0]) << 8) | ((uint16_t)y_raw[1]);
 8001142:	7c3b      	ldrb	r3, [r7, #16]
 8001144:	021b      	lsls	r3, r3, #8
 8001146:	7c7a      	ldrb	r2, [r7, #17]
 8001148:	4313      	orrs	r3, r2
 800114a:	461a      	mov	r2, r3
 800114c:	6a3b      	ldr	r3, [r7, #32]
 800114e:	4413      	add	r3, r2
 8001150:	623b      	str	r3, [r7, #32]
    for(uint8_t i = 0; i < 16; i++)
 8001152:	7fbb      	ldrb	r3, [r7, #30]
 8001154:	3301      	adds	r3, #1
 8001156:	77bb      	strb	r3, [r7, #30]
 8001158:	7fbb      	ldrb	r3, [r7, #30]
 800115a:	2b0f      	cmp	r3, #15
 800115c:	d9bc      	bls.n	80010d8 <XPT2046_TouchGetCoordinates+0x20>
 800115e:	e000      	b.n	8001162 <XPT2046_TouchGetCoordinates+0xaa>
            break;
 8001160:	bf00      	nop
    }

    XPT2046_TouchUnselect();
 8001162:	f7ff ff8b 	bl	800107c <XPT2046_TouchUnselect>

    if(nsamples < 16)
 8001166:	7ffb      	ldrb	r3, [r7, #31]
 8001168:	2b0f      	cmp	r3, #15
 800116a:	d801      	bhi.n	8001170 <XPT2046_TouchGetCoordinates+0xb8>
        return false;
 800116c:	2300      	movs	r3, #0
 800116e:	e049      	b.n	8001204 <XPT2046_TouchGetCoordinates+0x14c>

    uint32_t raw_x = (avg_x / 16);
 8001170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001172:	091b      	lsrs	r3, r3, #4
 8001174:	61bb      	str	r3, [r7, #24]
    if(raw_x < XPT2046_MIN_RAW_X) raw_x = XPT2046_MIN_RAW_X;
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	f640 5247 	movw	r2, #3399	; 0xd47
 800117c:	4293      	cmp	r3, r2
 800117e:	d802      	bhi.n	8001186 <XPT2046_TouchGetCoordinates+0xce>
 8001180:	f640 5348 	movw	r3, #3400	; 0xd48
 8001184:	61bb      	str	r3, [r7, #24]
    if(raw_x > XPT2046_MAX_RAW_X) raw_x = XPT2046_MAX_RAW_X;
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	f247 1248 	movw	r2, #29000	; 0x7148
 800118c:	4293      	cmp	r3, r2
 800118e:	d902      	bls.n	8001196 <XPT2046_TouchGetCoordinates+0xde>
 8001190:	f247 1348 	movw	r3, #29000	; 0x7148
 8001194:	61bb      	str	r3, [r7, #24]

    uint32_t raw_y = (avg_y / 16);
 8001196:	6a3b      	ldr	r3, [r7, #32]
 8001198:	091b      	lsrs	r3, r3, #4
 800119a:	617b      	str	r3, [r7, #20]
    if(raw_y < XPT2046_MIN_RAW_Y) raw_y = XPT2046_MIN_RAW_Y;
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	f640 42e3 	movw	r2, #3299	; 0xce3
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d802      	bhi.n	80011ac <XPT2046_TouchGetCoordinates+0xf4>
 80011a6:	f640 43e4 	movw	r3, #3300	; 0xce4
 80011aa:	617b      	str	r3, [r7, #20]
    if(raw_y > XPT2046_MAX_RAW_Y) raw_y = XPT2046_MAX_RAW_Y;
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	f247 5230 	movw	r2, #30000	; 0x7530
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d902      	bls.n	80011bc <XPT2046_TouchGetCoordinates+0x104>
 80011b6:	f247 5330 	movw	r3, #30000	; 0x7530
 80011ba:	617b      	str	r3, [r7, #20]
	*y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
#elif (ORIENTATION == 1)
	*x = (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
	*y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
#elif (ORIENTATION == 2)
    *x = (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4613      	mov	r3, r2
 80011c0:	011b      	lsls	r3, r3, #4
 80011c2:	1a9b      	subs	r3, r3, r2
 80011c4:	011b      	lsls	r3, r3, #4
 80011c6:	f5a3 2347 	sub.w	r3, r3, #815104	; 0xc7000
 80011ca:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 80011ce:	4a13      	ldr	r2, [pc, #76]	; (800121c <XPT2046_TouchGetCoordinates+0x164>)
 80011d0:	fba2 2303 	umull	r2, r3, r2, r3
 80011d4:	0b5b      	lsrs	r3, r3, #13
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	801a      	strh	r2, [r3, #0]
    *y = XPT2046_SCALE_Y - (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
 80011dc:	697a      	ldr	r2, [r7, #20]
 80011de:	4613      	mov	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	019b      	lsls	r3, r3, #6
 80011e6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80011ea:	f5a3 53e8 	sub.w	r3, r3, #7424	; 0x1d00
 80011ee:	4a0c      	ldr	r2, [pc, #48]	; (8001220 <XPT2046_TouchGetCoordinates+0x168>)
 80011f0:	fba2 2303 	umull	r2, r3, r2, r3
 80011f4:	0b5b      	lsrs	r3, r3, #13
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	801a      	strh	r2, [r3, #0]
#elif (ORIENTATION == 3)
    *x = XPT2046_SCALE_X - (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
    *y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
#endif

    return true;
 8001202:	2301      	movs	r3, #1
}
 8001204:	4618      	mov	r0, r3
 8001206:	3728      	adds	r7, #40	; 0x28
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	0800461c 	.word	0x0800461c
 8001210:	2000014c 	.word	0x2000014c
 8001214:	08004620 	.word	0x08004620
 8001218:	08004624 	.word	0x08004624
 800121c:	51eb851f 	.word	0x51eb851f
 8001220:	4e8b8659 	.word	0x4e8b8659

08001224 <screen_tap_press>:





void screen_tap_press(void){
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
	if(key_tap_func) (*key_tap_func)();
 8001228:	4b04      	ldr	r3, [pc, #16]	; (800123c <screen_tap_press+0x18>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d002      	beq.n	8001236 <screen_tap_press+0x12>
 8001230:	4b02      	ldr	r3, [pc, #8]	; (800123c <screen_tap_press+0x18>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4798      	blx	r3
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000004 	.word	0x20000004

08001240 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <MX_DMA_Init+0x3c>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a0b      	ldr	r2, [pc, #44]	; (800127c <MX_DMA_Init+0x3c>)
 8001250:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <MX_DMA_Init+0x3c>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2100      	movs	r1, #0
 8001266:	203a      	movs	r0, #58	; 0x3a
 8001268:	f000 ffc3 	bl	80021f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800126c:	203a      	movs	r0, #58	; 0x3a
 800126e:	f000 ffdc 	bl	800222a <HAL_NVIC_EnableIRQ>

}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40023800 	.word	0x40023800

08001280 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
 8001294:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	4b4d      	ldr	r3, [pc, #308]	; (80013d0 <MX_GPIO_Init+0x150>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a4c      	ldr	r2, [pc, #304]	; (80013d0 <MX_GPIO_Init+0x150>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b4a      	ldr	r3, [pc, #296]	; (80013d0 <MX_GPIO_Init+0x150>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	4b46      	ldr	r3, [pc, #280]	; (80013d0 <MX_GPIO_Init+0x150>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a45      	ldr	r2, [pc, #276]	; (80013d0 <MX_GPIO_Init+0x150>)
 80012bc:	f043 0302 	orr.w	r3, r3, #2
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b43      	ldr	r3, [pc, #268]	; (80013d0 <MX_GPIO_Init+0x150>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2110      	movs	r1, #16
 80012d2:	4840      	ldr	r0, [pc, #256]	; (80013d4 <MX_GPIO_Init+0x154>)
 80012d4:	f001 fcd0 	bl	8002c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_CS_Pin|ACV_Pin, GPIO_PIN_RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	f240 2103 	movw	r1, #515	; 0x203
 80012de:	483e      	ldr	r0, [pc, #248]	; (80013d8 <MX_GPIO_Init+0x158>)
 80012e0:	f001 fcca 	bl	8002c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_LED_Pin|RST_Pin, GPIO_PIN_SET);
 80012e4:	2201      	movs	r2, #1
 80012e6:	f44f 7182 	mov.w	r1, #260	; 0x104
 80012ea:	483b      	ldr	r0, [pc, #236]	; (80013d8 <MX_GPIO_Init+0x158>)
 80012ec:	f001 fcc4 	bl	8002c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, GPIO_PIN_SET);
 80012f0:	2201      	movs	r2, #1
 80012f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012f6:	4837      	ldr	r0, [pc, #220]	; (80013d4 <MX_GPIO_Init+0x154>)
 80012f8:	f001 fcbe 	bl	8002c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_RST_Pin;
 80012fc:	2301      	movs	r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001300:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001304:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SD_RST_GPIO_Port, &GPIO_InitStruct);
 800130a:	f107 030c 	add.w	r3, r7, #12
 800130e:	4619      	mov	r1, r3
 8001310:	4830      	ldr	r0, [pc, #192]	; (80013d4 <MX_GPIO_Init+0x154>)
 8001312:	f001 fb15 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8001316:	2310      	movs	r3, #16
 8001318:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131a:	2301      	movs	r3, #1
 800131c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001322:	2303      	movs	r3, #3
 8001324:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8001326:	f107 030c 	add.w	r3, r7, #12
 800132a:	4619      	mov	r1, r3
 800132c:	4829      	ldr	r0, [pc, #164]	; (80013d4 <MX_GPIO_Init+0x154>)
 800132e:	f001 fb07 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_CS_Pin;
 8001332:	2303      	movs	r3, #3
 8001334:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001336:	2301      	movs	r3, #1
 8001338:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133e:	2303      	movs	r3, #3
 8001340:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001342:	f107 030c 	add.w	r3, r7, #12
 8001346:	4619      	mov	r1, r3
 8001348:	4823      	ldr	r0, [pc, #140]	; (80013d8 <MX_GPIO_Init+0x158>)
 800134a:	f001 faf9 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_LED_Pin|RST_Pin|ACV_Pin;
 800134e:	f44f 7341 	mov.w	r3, #772	; 0x304
 8001352:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001354:	2301      	movs	r3, #1
 8001356:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135c:	2300      	movs	r3, #0
 800135e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	4619      	mov	r1, r3
 8001366:	481c      	ldr	r0, [pc, #112]	; (80013d8 <MX_GPIO_Init+0x158>)
 8001368:	f001 faea 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_CS_Pin;
 800136c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001370:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001372:	2301      	movs	r3, #1
 8001374:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800137a:	2302      	movs	r3, #2
 800137c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(T_CS_GPIO_Port, &GPIO_InitStruct);
 800137e:	f107 030c 	add.w	r3, r7, #12
 8001382:	4619      	mov	r1, r3
 8001384:	4813      	ldr	r0, [pc, #76]	; (80013d4 <MX_GPIO_Init+0x154>)
 8001386:	f001 fadb 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 800138a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800138e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001390:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001394:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001396:	2301      	movs	r3, #1
 8001398:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 800139a:	f107 030c 	add.w	r3, r7, #12
 800139e:	4619      	mov	r1, r3
 80013a0:	480c      	ldr	r0, [pc, #48]	; (80013d4 <MX_GPIO_Init+0x154>)
 80013a2:	f001 facd 	bl	8002940 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2100      	movs	r1, #0
 80013aa:	2006      	movs	r0, #6
 80013ac:	f000 ff21 	bl	80021f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013b0:	2006      	movs	r0, #6
 80013b2:	f000 ff3a 	bl	800222a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2100      	movs	r1, #0
 80013ba:	2028      	movs	r0, #40	; 0x28
 80013bc:	f000 ff19 	bl	80021f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013c0:	2028      	movs	r0, #40	; 0x28
 80013c2:	f000 ff32 	bl	800222a <HAL_NVIC_EnableIRQ>

}
 80013c6:	bf00      	nop
 80013c8:	3720      	adds	r7, #32
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40020000 	.word	0x40020000
 80013d8:	40020400 	.word	0x40020400

080013dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013e2:	f000 fd95 	bl	8001f10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e6:	f000 f857 	bl	8001498 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ea:	f7ff ff49 	bl	8001280 <MX_GPIO_Init>
  MX_DMA_Init();
 80013ee:	f7ff ff27 	bl	8001240 <MX_DMA_Init>
  MX_SPI1_Init();
 80013f2:	f000 fb2d 	bl	8001a50 <MX_SPI1_Init>
  MX_SPI4_Init();
 80013f6:	f000 fb61 	bl	8001abc <MX_SPI4_Init>
  MX_TIM2_Init();
 80013fa:	f000 fcf3 	bl	8001de4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();
 80013fe:	f7ff fb53 	bl	8000aa8 <ILI9341_Init>
  ILI9341_SetRotation( SCREEN_VERTICAL_2);
 8001402:	2002      	movs	r0, #2
 8001404:	f7ff fc5a 	bl	8000cbc <ILI9341_SetRotation>
  ILI9341_FillScreen(RED);
 8001408:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800140c:	f7ff fd42 	bl	8000e94 <ILI9341_FillScreen>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(pressed){
 8001410:	4b19      	ldr	r3, [pc, #100]	; (8001478 <main+0x9c>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d01c      	beq.n	8001454 <main+0x78>
	  	 time1=TIM2->CNT;
 800141a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800141e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001420:	4a16      	ldr	r2, [pc, #88]	; (800147c <main+0xa0>)
 8001422:	6013      	str	r3, [r2, #0]
	    	ILI9341_DrawHollowCircle(X,Y, 10, RED);
 8001424:	4b16      	ldr	r3, [pc, #88]	; (8001480 <main+0xa4>)
 8001426:	881b      	ldrh	r3, [r3, #0]
 8001428:	b298      	uxth	r0, r3
 800142a:	4b16      	ldr	r3, [pc, #88]	; (8001484 <main+0xa8>)
 800142c:	881b      	ldrh	r3, [r3, #0]
 800142e:	b299      	uxth	r1, r3
 8001430:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001434:	220a      	movs	r2, #10
 8001436:	f7ff f851 	bl	80004dc <ILI9341_DrawHollowCircle>
	  	 screen_tap_press();
 800143a:	f7ff fef3 	bl	8001224 <screen_tap_press>
	  	  time2=TIM2->CNT-time1;
 800143e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001442:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001444:	4b0d      	ldr	r3, [pc, #52]	; (800147c <main+0xa0>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	4a0f      	ldr	r2, [pc, #60]	; (8001488 <main+0xac>)
 800144c:	6013      	str	r3, [r2, #0]
	  	  pressed=0;
 800144e:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <main+0x9c>)
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]

	  }
	  if(RSTinfo==1){
 8001454:	4b0d      	ldr	r3, [pc, #52]	; (800148c <main+0xb0>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b01      	cmp	r3, #1
 800145c:	d1d8      	bne.n	8001410 <main+0x34>
		  ILI9341_DrawText("RESET SD CARD", FONT4, 0, 0, ORANGE, WHITE);
 800145e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001462:	9301      	str	r3, [sp, #4]
 8001464:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	2300      	movs	r3, #0
 800146c:	2200      	movs	r2, #0
 800146e:	4908      	ldr	r1, [pc, #32]	; (8001490 <main+0xb4>)
 8001470:	4808      	ldr	r0, [pc, #32]	; (8001494 <main+0xb8>)
 8001472:	f7ff f9bc 	bl	80007ee <ILI9341_DrawText>
	  if(pressed){
 8001476:	e7cb      	b.n	8001410 <main+0x34>
 8001478:	200000c8 	.word	0x200000c8
 800147c:	200000d0 	.word	0x200000d0
 8001480:	200000ca 	.word	0x200000ca
 8001484:	200000cc 	.word	0x200000cc
 8001488:	200000d4 	.word	0x200000d4
 800148c:	200000cf 	.word	0x200000cf
 8001490:	08004628 	.word	0x08004628
 8001494:	080045cc 	.word	0x080045cc

08001498 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b094      	sub	sp, #80	; 0x50
 800149c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800149e:	f107 0320 	add.w	r3, r7, #32
 80014a2:	2230      	movs	r2, #48	; 0x30
 80014a4:	2100      	movs	r1, #0
 80014a6:	4618      	mov	r0, r3
 80014a8:	f003 f87c 	bl	80045a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014bc:	2300      	movs	r3, #0
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	4b27      	ldr	r3, [pc, #156]	; (8001560 <SystemClock_Config+0xc8>)
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	4a26      	ldr	r2, [pc, #152]	; (8001560 <SystemClock_Config+0xc8>)
 80014c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ca:	6413      	str	r3, [r2, #64]	; 0x40
 80014cc:	4b24      	ldr	r3, [pc, #144]	; (8001560 <SystemClock_Config+0xc8>)
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014d8:	2300      	movs	r3, #0
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	4b21      	ldr	r3, [pc, #132]	; (8001564 <SystemClock_Config+0xcc>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a20      	ldr	r2, [pc, #128]	; (8001564 <SystemClock_Config+0xcc>)
 80014e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014e6:	6013      	str	r3, [r2, #0]
 80014e8:	4b1e      	ldr	r3, [pc, #120]	; (8001564 <SystemClock_Config+0xcc>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014f4:	2302      	movs	r3, #2
 80014f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014f8:	2301      	movs	r3, #1
 80014fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014fc:	2310      	movs	r3, #16
 80014fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001500:	2302      	movs	r3, #2
 8001502:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001504:	2300      	movs	r3, #0
 8001506:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001508:	2308      	movs	r3, #8
 800150a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800150c:	2364      	movs	r3, #100	; 0x64
 800150e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001510:	2302      	movs	r3, #2
 8001512:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001514:	2304      	movs	r3, #4
 8001516:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001518:	f107 0320 	add.w	r3, r7, #32
 800151c:	4618      	mov	r0, r3
 800151e:	f001 fbdd 	bl	8002cdc <HAL_RCC_OscConfig>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001528:	f000 f848 	bl	80015bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800152c:	230f      	movs	r3, #15
 800152e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001530:	2302      	movs	r3, #2
 8001532:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001538:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800153c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800153e:	2300      	movs	r3, #0
 8001540:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001542:	f107 030c 	add.w	r3, r7, #12
 8001546:	2103      	movs	r1, #3
 8001548:	4618      	mov	r0, r3
 800154a:	f001 fe3f 	bl	80031cc <HAL_RCC_ClockConfig>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001554:	f000 f832 	bl	80015bc <Error_Handler>
  }
}
 8001558:	bf00      	nop
 800155a:	3750      	adds	r7, #80	; 0x50
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40023800 	.word	0x40023800
 8001564:	40007000 	.word	0x40007000

08001568 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==T_IRQ_Pin){
 8001572:	88fb      	ldrh	r3, [r7, #6]
 8001574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001578:	d10e      	bne.n	8001598 <HAL_GPIO_EXTI_Callback+0x30>
		if(XPT2046_TouchPressed() ){
 800157a:	f7ff fd8b 	bl	8001094 <XPT2046_TouchPressed>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d009      	beq.n	8001598 <HAL_GPIO_EXTI_Callback+0x30>
			if(XPT2046_TouchGetCoordinates((uint16_t*)&X, (uint16_t*)&Y)){
 8001584:	4909      	ldr	r1, [pc, #36]	; (80015ac <HAL_GPIO_EXTI_Callback+0x44>)
 8001586:	480a      	ldr	r0, [pc, #40]	; (80015b0 <HAL_GPIO_EXTI_Callback+0x48>)
 8001588:	f7ff fd96 	bl	80010b8 <XPT2046_TouchGetCoordinates>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d002      	beq.n	8001598 <HAL_GPIO_EXTI_Callback+0x30>
				pressed=1;
 8001592:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001594:	2201      	movs	r2, #1
 8001596:	701a      	strb	r2, [r3, #0]

			}
		}
	}
	if(GPIO_Pin==SD_RST_Pin){
 8001598:	88fb      	ldrh	r3, [r7, #6]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d102      	bne.n	80015a4 <HAL_GPIO_EXTI_Callback+0x3c>
		RSTinfo=1;
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_GPIO_EXTI_Callback+0x50>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	701a      	strb	r2, [r3, #0]

	}
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	200000cc 	.word	0x200000cc
 80015b0:	200000ca 	.word	0x200000ca
 80015b4:	200000c8 	.word	0x200000c8
 80015b8:	200000cf 	.word	0x200000cf

080015bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c0:	b672      	cpsid	i
}
 80015c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <Error_Handler+0x8>
	...

080015c8 <reset_CP_position>:
uint8_t StructXfunc=0;
uint8_t StructYfunc=0;

extern volatile uint16_t X,Y;

void reset_CP_position(){
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
	while(currentPointer->up){
 80015cc:	e004      	b.n	80015d8 <reset_CP_position+0x10>
		currentPointer=currentPointer->up;
 80015ce:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <reset_CP_position+0x3c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	4a0b      	ldr	r2, [pc, #44]	; (8001604 <reset_CP_position+0x3c>)
 80015d6:	6013      	str	r3, [r2, #0]
	while(currentPointer->up){
 80015d8:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <reset_CP_position+0x3c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f5      	bne.n	80015ce <reset_CP_position+0x6>
	}
	while(currentPointer->left){
 80015e2:	e004      	b.n	80015ee <reset_CP_position+0x26>
		currentPointer=currentPointer->left;
 80015e4:	4b07      	ldr	r3, [pc, #28]	; (8001604 <reset_CP_position+0x3c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	4a06      	ldr	r2, [pc, #24]	; (8001604 <reset_CP_position+0x3c>)
 80015ec:	6013      	str	r3, [r2, #0]
	while(currentPointer->left){
 80015ee:	4b05      	ldr	r3, [pc, #20]	; (8001604 <reset_CP_position+0x3c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1f5      	bne.n	80015e4 <reset_CP_position+0x1c>
	}

}
 80015f8:	bf00      	nop
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	20000098 	.word	0x20000098

08001608 <refresh_structarray>:

void refresh_structarray(){
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
	reset_CP_position();
 800160e:	f7ff ffdb 	bl	80015c8 <reset_CP_position>
	menu_t * temp=currentPointer;
 8001612:	4b1c      	ldr	r3, [pc, #112]	; (8001684 <refresh_structarray+0x7c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	607b      	str	r3, [r7, #4]
	for(uint8_t j=0;j<MENU_HEIGHT;j++ ){
 8001618:	2300      	movs	r3, #0
 800161a:	70fb      	strb	r3, [r7, #3]
 800161c:	e029      	b.n	8001672 <refresh_structarray+0x6a>
		for(uint8_t i=0;i<MENU_WIDTH;i++){
 800161e:	2300      	movs	r3, #0
 8001620:	70bb      	strb	r3, [r7, #2]
 8001622:	e011      	b.n	8001648 <refresh_structarray+0x40>
			structarray[MENU_WIDTH*j+i]=temp;
 8001624:	78fb      	ldrb	r3, [r7, #3]
 8001626:	005a      	lsls	r2, r3, #1
 8001628:	78bb      	ldrb	r3, [r7, #2]
 800162a:	4413      	add	r3, r2
 800162c:	4916      	ldr	r1, [pc, #88]	; (8001688 <refresh_structarray+0x80>)
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(temp->right)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d002      	beq.n	8001642 <refresh_structarray+0x3a>
				temp=temp->right;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	607b      	str	r3, [r7, #4]
		for(uint8_t i=0;i<MENU_WIDTH;i++){
 8001642:	78bb      	ldrb	r3, [r7, #2]
 8001644:	3301      	adds	r3, #1
 8001646:	70bb      	strb	r3, [r7, #2]
 8001648:	78bb      	ldrb	r3, [r7, #2]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d9ea      	bls.n	8001624 <refresh_structarray+0x1c>
		}
		while(temp->left){
 800164e:	e002      	b.n	8001656 <refresh_structarray+0x4e>
			temp=temp->left;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	607b      	str	r3, [r7, #4]
		while(temp->left){
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1f8      	bne.n	8001650 <refresh_structarray+0x48>
		}
		if(temp->down)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d002      	beq.n	800166c <refresh_structarray+0x64>
			temp=temp->down;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	607b      	str	r3, [r7, #4]
	for(uint8_t j=0;j<MENU_HEIGHT;j++ ){
 800166c:	78fb      	ldrb	r3, [r7, #3]
 800166e:	3301      	adds	r3, #1
 8001670:	70fb      	strb	r3, [r7, #3]
 8001672:	78fb      	ldrb	r3, [r7, #3]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d9d2      	bls.n	800161e <refresh_structarray+0x16>
	}
}
 8001678:	bf00      	nop
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000098 	.word	0x20000098
 8001688:	200000d8 	.word	0x200000d8

0800168c <refreshStructPos>:

void refreshStructPos(){
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
	if(currentlevel==1){
 8001690:	4b03      	ldr	r3, [pc, #12]	; (80016a0 <refreshStructPos+0x14>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d101      	bne.n	800169c <refreshStructPos+0x10>
		refreshStructPosLVL1();
 8001698:	f000 f804 	bl	80016a4 <refreshStructPosLVL1>
	}

}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	2000009c 	.word	0x2000009c

080016a4 <refreshStructPosLVL1>:

void refreshStructPosLVL1(){
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
	for(uint8_t j=0;j<MENU_HEIGHT;j++){
 80016aa:	2300      	movs	r3, #0
 80016ac:	71fb      	strb	r3, [r7, #7]
 80016ae:	e019      	b.n	80016e4 <refreshStructPosLVL1+0x40>
		if(Y_OFFSET+STRUCT_HEIGHT*j<SCREEN_HEIGHT){
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	228c      	movs	r2, #140	; 0x8c
 80016b4:	fb02 f303 	mul.w	r3, r2, r3
 80016b8:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 80016bc:	da0f      	bge.n	80016de <refreshStructPosLVL1+0x3a>
			StrPosYLVL1[j]=Y_OFFSET+STRUCT_HEIGHT*j;
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	461a      	mov	r2, r3
 80016c4:	0092      	lsls	r2, r2, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	461a      	mov	r2, r3
 80016ca:	00d2      	lsls	r2, r2, #3
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	3228      	adds	r2, #40	; 0x28
 80016d6:	b291      	uxth	r1, r2
 80016d8:	4a15      	ldr	r2, [pc, #84]	; (8001730 <refreshStructPosLVL1+0x8c>)
 80016da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t j=0;j<MENU_HEIGHT;j++){
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	3301      	adds	r3, #1
 80016e2:	71fb      	strb	r3, [r7, #7]
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d9e2      	bls.n	80016b0 <refreshStructPosLVL1+0xc>
		}
	}
	for(uint8_t i=0;i<MENU_WIDTH;i++){
 80016ea:	2300      	movs	r3, #0
 80016ec:	71bb      	strb	r3, [r7, #6]
 80016ee:	e014      	b.n	800171a <refreshStructPosLVL1+0x76>
		if(X_OFFSET+STRUCT_WIDTH*i<SCREEN_WIDTH){
 80016f0:	79ba      	ldrb	r2, [r7, #6]
 80016f2:	4613      	mov	r3, r2
 80016f4:	011b      	lsls	r3, r3, #4
 80016f6:	1a9b      	subs	r3, r3, r2
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	2bef      	cmp	r3, #239	; 0xef
 80016fc:	dc0a      	bgt.n	8001714 <refreshStructPosLVL1+0x70>
			StrPosXLVL1[i]=X_OFFSET+STRUCT_WIDTH*i;
 80016fe:	79bb      	ldrb	r3, [r7, #6]
 8001700:	b29a      	uxth	r2, r3
 8001702:	79bb      	ldrb	r3, [r7, #6]
 8001704:	4611      	mov	r1, r2
 8001706:	0109      	lsls	r1, r1, #4
 8001708:	1a8a      	subs	r2, r1, r2
 800170a:	00d2      	lsls	r2, r2, #3
 800170c:	b291      	uxth	r1, r2
 800170e:	4a09      	ldr	r2, [pc, #36]	; (8001734 <refreshStructPosLVL1+0x90>)
 8001710:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0;i<MENU_WIDTH;i++){
 8001714:	79bb      	ldrb	r3, [r7, #6]
 8001716:	3301      	adds	r3, #1
 8001718:	71bb      	strb	r3, [r7, #6]
 800171a:	79bb      	ldrb	r3, [r7, #6]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d9e7      	bls.n	80016f0 <refreshStructPosLVL1+0x4c>
		}
	}
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	200000e8 	.word	0x200000e8
 8001734:	200000ec 	.word	0x200000ec

08001738 <checkTapArea>:
		}
	}

}

void checkTapArea(){
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
	if(X<StrPosXLVL1[1]){
 800173c:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <checkTapArea+0x6c>)
 800173e:	885a      	ldrh	r2, [r3, #2]
 8001740:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <checkTapArea+0x70>)
 8001742:	881b      	ldrh	r3, [r3, #0]
 8001744:	b29b      	uxth	r3, r3
 8001746:	429a      	cmp	r2, r3
 8001748:	d903      	bls.n	8001752 <checkTapArea+0x1a>
		StructXfunc=1;
 800174a:	4b18      	ldr	r3, [pc, #96]	; (80017ac <checkTapArea+0x74>)
 800174c:	2201      	movs	r2, #1
 800174e:	701a      	strb	r2, [r3, #0]
 8001750:	e002      	b.n	8001758 <checkTapArea+0x20>
	}
	else{
		StructXfunc=2;
 8001752:	4b16      	ldr	r3, [pc, #88]	; (80017ac <checkTapArea+0x74>)
 8001754:	2202      	movs	r2, #2
 8001756:	701a      	strb	r2, [r3, #0]
	}

	if(Y>StrPosYLVL1[0] && Y<StrPosYLVL1[1]){
 8001758:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <checkTapArea+0x78>)
 800175a:	881a      	ldrh	r2, [r3, #0]
 800175c:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <checkTapArea+0x7c>)
 800175e:	881b      	ldrh	r3, [r3, #0]
 8001760:	b29b      	uxth	r3, r3
 8001762:	429a      	cmp	r2, r3
 8001764:	d20a      	bcs.n	800177c <checkTapArea+0x44>
 8001766:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <checkTapArea+0x78>)
 8001768:	885a      	ldrh	r2, [r3, #2]
 800176a:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <checkTapArea+0x7c>)
 800176c:	881b      	ldrh	r3, [r3, #0]
 800176e:	b29b      	uxth	r3, r3
 8001770:	429a      	cmp	r2, r3
 8001772:	d903      	bls.n	800177c <checkTapArea+0x44>
		StructYfunc=1;
 8001774:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <checkTapArea+0x80>)
 8001776:	2201      	movs	r2, #1
 8001778:	701a      	strb	r2, [r3, #0]
	}
	else{
		StructYfunc=0;
	}

}
 800177a:	e00d      	b.n	8001798 <checkTapArea+0x60>
	else if(Y>StrPosYLVL1[1]){
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <checkTapArea+0x78>)
 800177e:	885a      	ldrh	r2, [r3, #2]
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <checkTapArea+0x7c>)
 8001782:	881b      	ldrh	r3, [r3, #0]
 8001784:	b29b      	uxth	r3, r3
 8001786:	429a      	cmp	r2, r3
 8001788:	d203      	bcs.n	8001792 <checkTapArea+0x5a>
		StructYfunc=2;
 800178a:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <checkTapArea+0x80>)
 800178c:	2202      	movs	r2, #2
 800178e:	701a      	strb	r2, [r3, #0]
}
 8001790:	e002      	b.n	8001798 <checkTapArea+0x60>
		StructYfunc=0;
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <checkTapArea+0x80>)
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	200000ec 	.word	0x200000ec
 80017a8:	200000ca 	.word	0x200000ca
 80017ac:	200000f0 	.word	0x200000f0
 80017b0:	200000e8 	.word	0x200000e8
 80017b4:	200000cc 	.word	0x200000cc
 80017b8:	200000f1 	.word	0x200000f1

080017bc <menu_enter>:


void menu_enter(void) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
	if(!currentPointer->menu_function && currentPointer->child)
 80017c0:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <menu_enter+0x7c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d116      	bne.n	80017f8 <menu_enter+0x3c>
 80017ca:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <menu_enter+0x7c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	695b      	ldr	r3, [r3, #20]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d011      	beq.n	80017f8 <menu_enter+0x3c>
	{
		currentPointer=currentPointer->child;
 80017d4:	4b18      	ldr	r3, [pc, #96]	; (8001838 <menu_enter+0x7c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	4a17      	ldr	r2, [pc, #92]	; (8001838 <menu_enter+0x7c>)
 80017dc:	6013      	str	r3, [r2, #0]
		currentlevel++;
 80017de:	4b17      	ldr	r3, [pc, #92]	; (800183c <menu_enter+0x80>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	3301      	adds	r3, #1
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <menu_enter+0x80>)
 80017e8:	701a      	strb	r2, [r3, #0]
		refresh_structarray();
 80017ea:	f7ff ff0d 	bl	8001608 <refresh_structarray>
		refreshStructPos();
 80017ee:	f7ff ff4d 	bl	800168c <refreshStructPos>
		refreshStructPos();
 80017f2:	f7ff ff4b 	bl	800168c <refreshStructPos>
	  	}

	}


}
 80017f6:	e01d      	b.n	8001834 <menu_enter+0x78>
	else if(currentPointer->menu_function)
 80017f8:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <menu_enter+0x7c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6a1b      	ldr	r3, [r3, #32]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d018      	beq.n	8001834 <menu_enter+0x78>
	{	checkTapArea();
 8001802:	f7ff ff99 	bl	8001738 <checkTapArea>
	  	if(0!=StructXfunc && 0!= StructYfunc){
 8001806:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <menu_enter+0x84>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d012      	beq.n	8001834 <menu_enter+0x78>
 800180e:	4b0d      	ldr	r3, [pc, #52]	; (8001844 <menu_enter+0x88>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00e      	beq.n	8001834 <menu_enter+0x78>
	  		structarray[MENU_WIDTH*(StructYfunc-1)+StructXfunc-1]->menu_function();
 8001816:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <menu_enter+0x88>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	3b01      	subs	r3, #1
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	4a08      	ldr	r2, [pc, #32]	; (8001840 <menu_enter+0x84>)
 8001820:	7812      	ldrb	r2, [r2, #0]
 8001822:	4413      	add	r3, r2
 8001824:	3b01      	subs	r3, #1
 8001826:	4a08      	ldr	r2, [pc, #32]	; (8001848 <menu_enter+0x8c>)
 8001828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	4798      	blx	r3
	  		refresh_taskbar();
 8001830:	f000 f87c 	bl	800192c <refresh_taskbar>
}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000098 	.word	0x20000098
 800183c:	2000009c 	.word	0x2000009c
 8001840:	200000f0 	.word	0x200000f0
 8001844:	200000f1 	.word	0x200000f1
 8001848:	200000d8 	.word	0x200000d8

0800184c <print_S1>:
#include "ILI9341_GFX.h"
#include "ILI9341_STM32_Driver.h"


extern uint8_t ACV;
 void print_S1(uint16_t X0, uint16_t X1, uint16_t Y0,uint16_t Y1){
 800184c:	b590      	push	{r4, r7, lr}
 800184e:	b085      	sub	sp, #20
 8001850:	af02      	add	r7, sp, #8
 8001852:	4604      	mov	r4, r0
 8001854:	4608      	mov	r0, r1
 8001856:	4611      	mov	r1, r2
 8001858:	461a      	mov	r2, r3
 800185a:	4623      	mov	r3, r4
 800185c:	80fb      	strh	r3, [r7, #6]
 800185e:	4603      	mov	r3, r0
 8001860:	80bb      	strh	r3, [r7, #4]
 8001862:	460b      	mov	r3, r1
 8001864:	807b      	strh	r3, [r7, #2]
 8001866:	4613      	mov	r3, r2
 8001868:	803b      	strh	r3, [r7, #0]

	 ILI9341_DrawFilledRectangleCoord(X0, Y0, X1, Y1, RED);
 800186a:	883b      	ldrh	r3, [r7, #0]
 800186c:	88ba      	ldrh	r2, [r7, #4]
 800186e:	8879      	ldrh	r1, [r7, #2]
 8001870:	88f8      	ldrh	r0, [r7, #6]
 8001872:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8001876:	9400      	str	r4, [sp, #0]
 8001878:	f7fe fee6 	bl	8000648 <ILI9341_DrawFilledRectangleCoord>


 }
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	bd90      	pop	{r4, r7, pc}

08001884 <print_S2>:
 void print_S2(uint16_t X0, uint16_t X1, uint16_t Y0,uint16_t Y1){
 8001884:	b590      	push	{r4, r7, lr}
 8001886:	b085      	sub	sp, #20
 8001888:	af02      	add	r7, sp, #8
 800188a:	4604      	mov	r4, r0
 800188c:	4608      	mov	r0, r1
 800188e:	4611      	mov	r1, r2
 8001890:	461a      	mov	r2, r3
 8001892:	4623      	mov	r3, r4
 8001894:	80fb      	strh	r3, [r7, #6]
 8001896:	4603      	mov	r3, r0
 8001898:	80bb      	strh	r3, [r7, #4]
 800189a:	460b      	mov	r3, r1
 800189c:	807b      	strh	r3, [r7, #2]
 800189e:	4613      	mov	r3, r2
 80018a0:	803b      	strh	r3, [r7, #0]

	 ILI9341_DrawFilledRectangleCoord(X0, Y0, X1, Y1, GREEN);
 80018a2:	883b      	ldrh	r3, [r7, #0]
 80018a4:	88ba      	ldrh	r2, [r7, #4]
 80018a6:	8879      	ldrh	r1, [r7, #2]
 80018a8:	88f8      	ldrh	r0, [r7, #6]
 80018aa:	f44f 64fc 	mov.w	r4, #2016	; 0x7e0
 80018ae:	9400      	str	r4, [sp, #0]
 80018b0:	f7fe feca 	bl	8000648 <ILI9341_DrawFilledRectangleCoord>

 }
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd90      	pop	{r4, r7, pc}

080018bc <print_S3>:
 void print_S3(uint16_t X0, uint16_t X1, uint16_t Y0,uint16_t Y1){
 80018bc:	b590      	push	{r4, r7, lr}
 80018be:	b085      	sub	sp, #20
 80018c0:	af02      	add	r7, sp, #8
 80018c2:	4604      	mov	r4, r0
 80018c4:	4608      	mov	r0, r1
 80018c6:	4611      	mov	r1, r2
 80018c8:	461a      	mov	r2, r3
 80018ca:	4623      	mov	r3, r4
 80018cc:	80fb      	strh	r3, [r7, #6]
 80018ce:	4603      	mov	r3, r0
 80018d0:	80bb      	strh	r3, [r7, #4]
 80018d2:	460b      	mov	r3, r1
 80018d4:	807b      	strh	r3, [r7, #2]
 80018d6:	4613      	mov	r3, r2
 80018d8:	803b      	strh	r3, [r7, #0]

	 ILI9341_DrawFilledRectangleCoord(X0, Y0, X1, Y1, BLUE);
 80018da:	883b      	ldrh	r3, [r7, #0]
 80018dc:	88ba      	ldrh	r2, [r7, #4]
 80018de:	8879      	ldrh	r1, [r7, #2]
 80018e0:	88f8      	ldrh	r0, [r7, #6]
 80018e2:	241f      	movs	r4, #31
 80018e4:	9400      	str	r4, [sp, #0]
 80018e6:	f7fe feaf 	bl	8000648 <ILI9341_DrawFilledRectangleCoord>

 }
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd90      	pop	{r4, r7, pc}

080018f2 <print_S4>:
 void print_S4(uint16_t X0, uint16_t X1, uint16_t Y0,uint16_t Y1){
 80018f2:	b590      	push	{r4, r7, lr}
 80018f4:	b085      	sub	sp, #20
 80018f6:	af02      	add	r7, sp, #8
 80018f8:	4604      	mov	r4, r0
 80018fa:	4608      	mov	r0, r1
 80018fc:	4611      	mov	r1, r2
 80018fe:	461a      	mov	r2, r3
 8001900:	4623      	mov	r3, r4
 8001902:	80fb      	strh	r3, [r7, #6]
 8001904:	4603      	mov	r3, r0
 8001906:	80bb      	strh	r3, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	807b      	strh	r3, [r7, #2]
 800190c:	4613      	mov	r3, r2
 800190e:	803b      	strh	r3, [r7, #0]

	 ILI9341_DrawFilledRectangleCoord(X0, Y0, X1, Y1, YELLOW);
 8001910:	883b      	ldrh	r3, [r7, #0]
 8001912:	88ba      	ldrh	r2, [r7, #4]
 8001914:	8879      	ldrh	r1, [r7, #2]
 8001916:	88f8      	ldrh	r0, [r7, #6]
 8001918:	f64f 74e0 	movw	r4, #65504	; 0xffe0
 800191c:	9400      	str	r4, [sp, #0]
 800191e:	f7fe fe93 	bl	8000648 <ILI9341_DrawFilledRectangleCoord>

 }
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	bd90      	pop	{r4, r7, pc}
	...

0800192c <refresh_taskbar>:

 void refresh_taskbar(void){
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af02      	add	r7, sp, #8
	 ILI9341_DrawFilledRectangleCoord(0, 0, 240, 39, BLACK);
 8001932:	2300      	movs	r3, #0
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	2327      	movs	r3, #39	; 0x27
 8001938:	22f0      	movs	r2, #240	; 0xf0
 800193a:	2100      	movs	r1, #0
 800193c:	2000      	movs	r0, #0
 800193e:	f7fe fe83 	bl	8000648 <ILI9341_DrawFilledRectangleCoord>
	 ILI9341_DrawText("ACQUISITION:",FONT4, 10, 10, WHITE, BLACK);
 8001942:	2300      	movs	r3, #0
 8001944:	9301      	str	r3, [sp, #4]
 8001946:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	230a      	movs	r3, #10
 800194e:	220a      	movs	r2, #10
 8001950:	4910      	ldr	r1, [pc, #64]	; (8001994 <refresh_taskbar+0x68>)
 8001952:	4811      	ldr	r0, [pc, #68]	; (8001998 <refresh_taskbar+0x6c>)
 8001954:	f7fe ff4b 	bl	80007ee <ILI9341_DrawText>
	if(ACV){
 8001958:	4b10      	ldr	r3, [pc, #64]	; (800199c <refresh_taskbar+0x70>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d00b      	beq.n	8001978 <refresh_taskbar+0x4c>
		ILI9341_DrawText("ON",FONT4, 130, 10, GREEN, BLACK);
 8001960:	2300      	movs	r3, #0
 8001962:	9301      	str	r3, [sp, #4]
 8001964:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	230a      	movs	r3, #10
 800196c:	2282      	movs	r2, #130	; 0x82
 800196e:	4909      	ldr	r1, [pc, #36]	; (8001994 <refresh_taskbar+0x68>)
 8001970:	480b      	ldr	r0, [pc, #44]	; (80019a0 <refresh_taskbar+0x74>)
 8001972:	f7fe ff3c 	bl	80007ee <ILI9341_DrawText>

	//	ILI9341_DrawText(str, font, X, Y, color, bgcolor);



 }
 8001976:	e00a      	b.n	800198e <refresh_taskbar+0x62>
 		ILI9341_DrawText("OFF",FONT4, 130, 10, RED, BLACK);
 8001978:	2300      	movs	r3, #0
 800197a:	9301      	str	r3, [sp, #4]
 800197c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	230a      	movs	r3, #10
 8001984:	2282      	movs	r2, #130	; 0x82
 8001986:	4903      	ldr	r1, [pc, #12]	; (8001994 <refresh_taskbar+0x68>)
 8001988:	4806      	ldr	r0, [pc, #24]	; (80019a4 <refresh_taskbar+0x78>)
 800198a:	f7fe ff30 	bl	80007ee <ILI9341_DrawText>
 }
 800198e:	bf00      	nop
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	08004628 	.word	0x08004628
 8001998:	08004604 	.word	0x08004604
 800199c:	200000ce 	.word	0x200000ce
 80019a0:	08004614 	.word	0x08004614
 80019a4:	08004618 	.word	0x08004618

080019a8 <ACVISITION_ON>:
extern void (*key_tap_func)(void);

extern uint8_t ACV;
extern volatile uint8_t RSTinfo;

 void ACVISITION_ON(void){
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
	 ACV=1;
 80019ac:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <ACVISITION_ON+0x1c>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	701a      	strb	r2, [r3, #0]
	 HAL_GPIO_WritePin(ACV_GPIO_Port, ACV_Pin, GPIO_PIN_SET);
 80019b2:	2201      	movs	r2, #1
 80019b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019b8:	4803      	ldr	r0, [pc, #12]	; (80019c8 <ACVISITION_ON+0x20>)
 80019ba:	f001 f95d 	bl	8002c78 <HAL_GPIO_WritePin>
 }
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	200000ce 	.word	0x200000ce
 80019c8:	40020400 	.word	0x40020400

080019cc <ACVISITION_OFF>:
void ACVISITION_OFF(void){
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
	ACV=0;
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <ACVISITION_OFF+0x1c>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(ACV_GPIO_Port, ACV_Pin, GPIO_PIN_RESET);
 80019d6:	2200      	movs	r2, #0
 80019d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019dc:	4803      	ldr	r0, [pc, #12]	; (80019ec <ACVISITION_OFF+0x20>)
 80019de:	f001 f94b 	bl	8002c78 <HAL_GPIO_WritePin>
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	200000ce 	.word	0x200000ce
 80019ec:	40020400 	.word	0x40020400

080019f0 <RSTACV>:
 void RSTACV(void){
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(RST_GPIO_Port,RST_Pin, GPIO_PIN_RESET);
 80019f4:	2200      	movs	r2, #0
 80019f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019fa:	480e      	ldr	r0, [pc, #56]	; (8001a34 <RSTACV+0x44>)
 80019fc:	f001 f93c 	bl	8002c78 <HAL_GPIO_WritePin>
	 RSTinfo=0;
 8001a00:	4b0d      	ldr	r3, [pc, #52]	; (8001a38 <RSTACV+0x48>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	701a      	strb	r2, [r3, #0]
	 ACV=0;
 8001a06:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <RSTACV+0x4c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]
	 HAL_Delay(1);
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	f000 faf1 	bl	8001ff4 <HAL_Delay>
	 HAL_GPIO_WritePin(ACV_GPIO_Port, ACV_Pin, GPIO_PIN_RESET);
 8001a12:	2200      	movs	r2, #0
 8001a14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a18:	4806      	ldr	r0, [pc, #24]	; (8001a34 <RSTACV+0x44>)
 8001a1a:	f001 f92d 	bl	8002c78 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(RST_GPIO_Port,RST_Pin, GPIO_PIN_SET);
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a24:	4803      	ldr	r0, [pc, #12]	; (8001a34 <RSTACV+0x44>)
 8001a26:	f001 f927 	bl	8002c78 <HAL_GPIO_WritePin>
	 refresh_taskbar();
 8001a2a:	f7ff ff7f 	bl	800192c <refresh_taskbar>
 }
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40020400 	.word	0x40020400
 8001a38:	200000cf 	.word	0x200000cf
 8001a3c:	200000ce 	.word	0x200000ce

08001a40 <PRINT>:
void PRINT(void){
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0

}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
	...

08001a50 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi4;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001a54:	4b17      	ldr	r3, [pc, #92]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a56:	4a18      	ldr	r2, [pc, #96]	; (8001ab8 <MX_SPI1_Init+0x68>)
 8001a58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a5a:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a62:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a68:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a6e:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a74:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a80:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001a82:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a84:	2208      	movs	r2, #8
 8001a86:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a88:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a8e:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a94:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001a9c:	220a      	movs	r2, #10
 8001a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001aa0:	4804      	ldr	r0, [pc, #16]	; (8001ab4 <MX_SPI1_Init+0x64>)
 8001aa2:	f001 fd3f 	bl	8003524 <HAL_SPI_Init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001aac:	f7ff fd86 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	200000f4 	.word	0x200000f4
 8001ab8:	40013000 	.word	0x40013000

08001abc <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001ac0:	4b17      	ldr	r3, [pc, #92]	; (8001b20 <MX_SPI4_Init+0x64>)
 8001ac2:	4a18      	ldr	r2, [pc, #96]	; (8001b24 <MX_SPI4_Init+0x68>)
 8001ac4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001ac6:	4b16      	ldr	r3, [pc, #88]	; (8001b20 <MX_SPI4_Init+0x64>)
 8001ac8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001acc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001ace:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <MX_SPI4_Init+0x64>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ad4:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <MX_SPI4_Init+0x64>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ada:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <MX_SPI4_Init+0x64>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ae0:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <MX_SPI4_Init+0x64>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <MX_SPI4_Init+0x64>)
 8001ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aec:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001aee:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <MX_SPI4_Init+0x64>)
 8001af0:	2238      	movs	r2, #56	; 0x38
 8001af2:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001af4:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <MX_SPI4_Init+0x64>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <MX_SPI4_Init+0x64>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b00:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <MX_SPI4_Init+0x64>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <MX_SPI4_Init+0x64>)
 8001b08:	220a      	movs	r2, #10
 8001b0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001b0c:	4804      	ldr	r0, [pc, #16]	; (8001b20 <MX_SPI4_Init+0x64>)
 8001b0e:	f001 fd09 	bl	8003524 <HAL_SPI_Init>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001b18:	f7ff fd50 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	2000014c 	.word	0x2000014c
 8001b24:	40013400 	.word	0x40013400

08001b28 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08c      	sub	sp, #48	; 0x30
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b30:	f107 031c 	add.w	r3, r7, #28
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
 8001b3e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a61      	ldr	r2, [pc, #388]	; (8001ccc <HAL_SPI_MspInit+0x1a4>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d15a      	bne.n	8001c00 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61bb      	str	r3, [r7, #24]
 8001b4e:	4b60      	ldr	r3, [pc, #384]	; (8001cd0 <HAL_SPI_MspInit+0x1a8>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b52:	4a5f      	ldr	r2, [pc, #380]	; (8001cd0 <HAL_SPI_MspInit+0x1a8>)
 8001b54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b58:	6453      	str	r3, [r2, #68]	; 0x44
 8001b5a:	4b5d      	ldr	r3, [pc, #372]	; (8001cd0 <HAL_SPI_MspInit+0x1a8>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b62:	61bb      	str	r3, [r7, #24]
 8001b64:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	4b59      	ldr	r3, [pc, #356]	; (8001cd0 <HAL_SPI_MspInit+0x1a8>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	4a58      	ldr	r2, [pc, #352]	; (8001cd0 <HAL_SPI_MspInit+0x1a8>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6313      	str	r3, [r2, #48]	; 0x30
 8001b76:	4b56      	ldr	r3, [pc, #344]	; (8001cd0 <HAL_SPI_MspInit+0x1a8>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b82:	23e0      	movs	r3, #224	; 0xe0
 8001b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b86:	2302      	movs	r3, #2
 8001b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b92:	2305      	movs	r3, #5
 8001b94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b96:	f107 031c 	add.w	r3, r7, #28
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	484d      	ldr	r0, [pc, #308]	; (8001cd4 <HAL_SPI_MspInit+0x1ac>)
 8001b9e:	f000 fecf 	bl	8002940 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8001ba2:	4b4d      	ldr	r3, [pc, #308]	; (8001cd8 <HAL_SPI_MspInit+0x1b0>)
 8001ba4:	4a4d      	ldr	r2, [pc, #308]	; (8001cdc <HAL_SPI_MspInit+0x1b4>)
 8001ba6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8001ba8:	4b4b      	ldr	r3, [pc, #300]	; (8001cd8 <HAL_SPI_MspInit+0x1b0>)
 8001baa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001bae:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bb0:	4b49      	ldr	r3, [pc, #292]	; (8001cd8 <HAL_SPI_MspInit+0x1b0>)
 8001bb2:	2240      	movs	r2, #64	; 0x40
 8001bb4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bb6:	4b48      	ldr	r3, [pc, #288]	; (8001cd8 <HAL_SPI_MspInit+0x1b0>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bbc:	4b46      	ldr	r3, [pc, #280]	; (8001cd8 <HAL_SPI_MspInit+0x1b0>)
 8001bbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bc2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bc4:	4b44      	ldr	r3, [pc, #272]	; (8001cd8 <HAL_SPI_MspInit+0x1b0>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bca:	4b43      	ldr	r3, [pc, #268]	; (8001cd8 <HAL_SPI_MspInit+0x1b0>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001bd0:	4b41      	ldr	r3, [pc, #260]	; (8001cd8 <HAL_SPI_MspInit+0x1b0>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bd6:	4b40      	ldr	r3, [pc, #256]	; (8001cd8 <HAL_SPI_MspInit+0x1b0>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bdc:	4b3e      	ldr	r3, [pc, #248]	; (8001cd8 <HAL_SPI_MspInit+0x1b0>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001be2:	483d      	ldr	r0, [pc, #244]	; (8001cd8 <HAL_SPI_MspInit+0x1b0>)
 8001be4:	f000 fb3c 	bl	8002260 <HAL_DMA_Init>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8001bee:	f7ff fce5 	bl	80015bc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a38      	ldr	r2, [pc, #224]	; (8001cd8 <HAL_SPI_MspInit+0x1b0>)
 8001bf6:	649a      	str	r2, [r3, #72]	; 0x48
 8001bf8:	4a37      	ldr	r2, [pc, #220]	; (8001cd8 <HAL_SPI_MspInit+0x1b0>)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001bfe:	e060      	b.n	8001cc2 <HAL_SPI_MspInit+0x19a>
  else if(spiHandle->Instance==SPI4)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a36      	ldr	r2, [pc, #216]	; (8001ce0 <HAL_SPI_MspInit+0x1b8>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d15b      	bne.n	8001cc2 <HAL_SPI_MspInit+0x19a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	4b30      	ldr	r3, [pc, #192]	; (8001cd0 <HAL_SPI_MspInit+0x1a8>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	4a2f      	ldr	r2, [pc, #188]	; (8001cd0 <HAL_SPI_MspInit+0x1a8>)
 8001c14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c18:	6453      	str	r3, [r2, #68]	; 0x44
 8001c1a:	4b2d      	ldr	r3, [pc, #180]	; (8001cd0 <HAL_SPI_MspInit+0x1a8>)
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	4b29      	ldr	r3, [pc, #164]	; (8001cd0 <HAL_SPI_MspInit+0x1a8>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a28      	ldr	r2, [pc, #160]	; (8001cd0 <HAL_SPI_MspInit+0x1a8>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b26      	ldr	r3, [pc, #152]	; (8001cd0 <HAL_SPI_MspInit+0x1a8>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	4b22      	ldr	r3, [pc, #136]	; (8001cd0 <HAL_SPI_MspInit+0x1a8>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a21      	ldr	r2, [pc, #132]	; (8001cd0 <HAL_SPI_MspInit+0x1a8>)
 8001c4c:	f043 0302 	orr.w	r3, r3, #2
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b1f      	ldr	r3, [pc, #124]	; (8001cd0 <HAL_SPI_MspInit+0x1a8>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c62:	2302      	movs	r3, #2
 8001c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001c6e:	2305      	movs	r3, #5
 8001c70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c72:	f107 031c 	add.w	r3, r7, #28
 8001c76:	4619      	mov	r1, r3
 8001c78:	4816      	ldr	r0, [pc, #88]	; (8001cd4 <HAL_SPI_MspInit+0x1ac>)
 8001c7a:	f000 fe61 	bl	8002940 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c84:	2302      	movs	r3, #2
 8001c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8001c90:	2306      	movs	r3, #6
 8001c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c94:	f107 031c 	add.w	r3, r7, #28
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4812      	ldr	r0, [pc, #72]	; (8001ce4 <HAL_SPI_MspInit+0x1bc>)
 8001c9c:	f000 fe50 	bl	8002940 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ca0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8001cb2:	2306      	movs	r3, #6
 8001cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb6:	f107 031c 	add.w	r3, r7, #28
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4805      	ldr	r0, [pc, #20]	; (8001cd4 <HAL_SPI_MspInit+0x1ac>)
 8001cbe:	f000 fe3f 	bl	8002940 <HAL_GPIO_Init>
}
 8001cc2:	bf00      	nop
 8001cc4:	3730      	adds	r7, #48	; 0x30
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40013000 	.word	0x40013000
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40020000 	.word	0x40020000
 8001cd8:	200001a4 	.word	0x200001a4
 8001cdc:	40026440 	.word	0x40026440
 8001ce0:	40013400 	.word	0x40013400
 8001ce4:	40020400 	.word	0x40020400

08001ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	607b      	str	r3, [r7, #4]
 8001cf2:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <HAL_MspInit+0x4c>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf6:	4a0f      	ldr	r2, [pc, #60]	; (8001d34 <HAL_MspInit+0x4c>)
 8001cf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cfe:	4b0d      	ldr	r3, [pc, #52]	; (8001d34 <HAL_MspInit+0x4c>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d06:	607b      	str	r3, [r7, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	603b      	str	r3, [r7, #0]
 8001d0e:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <HAL_MspInit+0x4c>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	4a08      	ldr	r2, [pc, #32]	; (8001d34 <HAL_MspInit+0x4c>)
 8001d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d18:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_MspInit+0x4c>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d22:	603b      	str	r3, [r7, #0]
 8001d24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40023800 	.word	0x40023800

08001d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d3c:	e7fe      	b.n	8001d3c <NMI_Handler+0x4>

08001d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d42:	e7fe      	b.n	8001d42 <HardFault_Handler+0x4>

08001d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d48:	e7fe      	b.n	8001d48 <MemManage_Handler+0x4>

08001d4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d4e:	e7fe      	b.n	8001d4e <BusFault_Handler+0x4>

08001d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d54:	e7fe      	b.n	8001d54 <UsageFault_Handler+0x4>

08001d56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d56:	b480      	push	{r7}
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d84:	f000 f916 	bl	8001fb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SD_RST_Pin);
 8001d90:	2001      	movs	r0, #1
 8001d92:	f000 ff8b 	bl	8002cac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(T_IRQ_Pin);
 8001d9e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001da2:	f000 ff83 	bl	8002cac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
	...

08001dac <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001db0:	4802      	ldr	r0, [pc, #8]	; (8001dbc <DMA2_Stream2_IRQHandler+0x10>)
 8001db2:	f000 fb5b 	bl	800246c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	200001a4 	.word	0x200001a4

08001dc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dc4:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <SystemInit+0x20>)
 8001dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dca:	4a05      	ldr	r2, [pc, #20]	; (8001de0 <SystemInit+0x20>)
 8001dcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dea:	f107 0308 	add.w	r3, r7, #8
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]
 8001df4:	609a      	str	r2, [r3, #8]
 8001df6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df8:	463b      	mov	r3, r7
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e00:	4b1d      	ldr	r3, [pc, #116]	; (8001e78 <MX_TIM2_Init+0x94>)
 8001e02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8001e08:	4b1b      	ldr	r3, [pc, #108]	; (8001e78 <MX_TIM2_Init+0x94>)
 8001e0a:	2263      	movs	r2, #99	; 0x63
 8001e0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e0e:	4b1a      	ldr	r3, [pc, #104]	; (8001e78 <MX_TIM2_Init+0x94>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001e14:	4b18      	ldr	r3, [pc, #96]	; (8001e78 <MX_TIM2_Init+0x94>)
 8001e16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e1c:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <MX_TIM2_Init+0x94>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e22:	4b15      	ldr	r3, [pc, #84]	; (8001e78 <MX_TIM2_Init+0x94>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e28:	4813      	ldr	r0, [pc, #76]	; (8001e78 <MX_TIM2_Init+0x94>)
 8001e2a:	f002 f8f9 	bl	8004020 <HAL_TIM_Base_Init>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001e34:	f7ff fbc2 	bl	80015bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e3e:	f107 0308 	add.w	r3, r7, #8
 8001e42:	4619      	mov	r1, r3
 8001e44:	480c      	ldr	r0, [pc, #48]	; (8001e78 <MX_TIM2_Init+0x94>)
 8001e46:	f002 f93a 	bl	80040be <HAL_TIM_ConfigClockSource>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001e50:	f7ff fbb4 	bl	80015bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e54:	2300      	movs	r3, #0
 8001e56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e5c:	463b      	mov	r3, r7
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4805      	ldr	r0, [pc, #20]	; (8001e78 <MX_TIM2_Init+0x94>)
 8001e62:	f002 fb0d 	bl	8004480 <HAL_TIMEx_MasterConfigSynchronization>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001e6c:	f7ff fba6 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e70:	bf00      	nop
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20000204 	.word	0x20000204

08001e7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e8c:	d10d      	bne.n	8001eaa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <HAL_TIM_Base_MspInit+0x3c>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	4a08      	ldr	r2, [pc, #32]	; (8001eb8 <HAL_TIM_Base_MspInit+0x3c>)
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <HAL_TIM_Base_MspInit+0x3c>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001eaa:	bf00      	nop
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	40023800 	.word	0x40023800

08001ebc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ebc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ef4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ec0:	480d      	ldr	r0, [pc, #52]	; (8001ef8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ec2:	490e      	ldr	r1, [pc, #56]	; (8001efc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ec4:	4a0e      	ldr	r2, [pc, #56]	; (8001f00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ec6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ec8:	e002      	b.n	8001ed0 <LoopCopyDataInit>

08001eca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ecc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ece:	3304      	adds	r3, #4

08001ed0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ed0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ed2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ed4:	d3f9      	bcc.n	8001eca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ed6:	4a0b      	ldr	r2, [pc, #44]	; (8001f04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ed8:	4c0b      	ldr	r4, [pc, #44]	; (8001f08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001eda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001edc:	e001      	b.n	8001ee2 <LoopFillZerobss>

08001ede <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ede:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ee0:	3204      	adds	r2, #4

08001ee2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ee2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ee4:	d3fb      	bcc.n	8001ede <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ee6:	f7ff ff6b 	bl	8001dc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eea:	f002 fb37 	bl	800455c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eee:	f7ff fa75 	bl	80013dc <main>
  bx  lr    
 8001ef2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ef4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001efc:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8001f00:	08005794 	.word	0x08005794
  ldr r2, =_sbss
 8001f04:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8001f08:	20000250 	.word	0x20000250

08001f0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f0c:	e7fe      	b.n	8001f0c <ADC_IRQHandler>
	...

08001f10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f14:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <HAL_Init+0x40>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a0d      	ldr	r2, [pc, #52]	; (8001f50 <HAL_Init+0x40>)
 8001f1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f20:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <HAL_Init+0x40>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a0a      	ldr	r2, [pc, #40]	; (8001f50 <HAL_Init+0x40>)
 8001f26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f2c:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <HAL_Init+0x40>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a07      	ldr	r2, [pc, #28]	; (8001f50 <HAL_Init+0x40>)
 8001f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f38:	2003      	movs	r0, #3
 8001f3a:	f000 f94f 	bl	80021dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f3e:	200f      	movs	r0, #15
 8001f40:	f000 f808 	bl	8001f54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f44:	f7ff fed0 	bl	8001ce8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40023c00 	.word	0x40023c00

08001f54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f5c:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <HAL_InitTick+0x54>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4b12      	ldr	r3, [pc, #72]	; (8001fac <HAL_InitTick+0x58>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	4619      	mov	r1, r3
 8001f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f72:	4618      	mov	r0, r3
 8001f74:	f000 f967 	bl	8002246 <HAL_SYSTICK_Config>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e00e      	b.n	8001fa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b0f      	cmp	r3, #15
 8001f86:	d80a      	bhi.n	8001f9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f90:	f000 f92f 	bl	80021f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f94:	4a06      	ldr	r2, [pc, #24]	; (8001fb0 <HAL_InitTick+0x5c>)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	e000      	b.n	8001fa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	200000a0 	.word	0x200000a0
 8001fac:	200000a8 	.word	0x200000a8
 8001fb0:	200000a4 	.word	0x200000a4

08001fb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fb8:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <HAL_IncTick+0x20>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <HAL_IncTick+0x24>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	4a04      	ldr	r2, [pc, #16]	; (8001fd8 <HAL_IncTick+0x24>)
 8001fc6:	6013      	str	r3, [r2, #0]
}
 8001fc8:	bf00      	nop
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	200000a8 	.word	0x200000a8
 8001fd8:	2000024c 	.word	0x2000024c

08001fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  return uwTick;
 8001fe0:	4b03      	ldr	r3, [pc, #12]	; (8001ff0 <HAL_GetTick+0x14>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	2000024c 	.word	0x2000024c

08001ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ffc:	f7ff ffee 	bl	8001fdc <HAL_GetTick>
 8002000:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800200c:	d005      	beq.n	800201a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800200e:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <HAL_Delay+0x44>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	461a      	mov	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4413      	add	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800201a:	bf00      	nop
 800201c:	f7ff ffde 	bl	8001fdc <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	429a      	cmp	r2, r3
 800202a:	d8f7      	bhi.n	800201c <HAL_Delay+0x28>
  {
  }
}
 800202c:	bf00      	nop
 800202e:	bf00      	nop
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	200000a8 	.word	0x200000a8

0800203c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800204c:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <__NVIC_SetPriorityGrouping+0x44>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002058:	4013      	ands	r3, r2
 800205a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002064:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800206c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800206e:	4a04      	ldr	r2, [pc, #16]	; (8002080 <__NVIC_SetPriorityGrouping+0x44>)
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	60d3      	str	r3, [r2, #12]
}
 8002074:	bf00      	nop
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002088:	4b04      	ldr	r3, [pc, #16]	; (800209c <__NVIC_GetPriorityGrouping+0x18>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	0a1b      	lsrs	r3, r3, #8
 800208e:	f003 0307 	and.w	r3, r3, #7
}
 8002092:	4618      	mov	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	e000ed00 	.word	0xe000ed00

080020a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	db0b      	blt.n	80020ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020b2:	79fb      	ldrb	r3, [r7, #7]
 80020b4:	f003 021f 	and.w	r2, r3, #31
 80020b8:	4907      	ldr	r1, [pc, #28]	; (80020d8 <__NVIC_EnableIRQ+0x38>)
 80020ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020be:	095b      	lsrs	r3, r3, #5
 80020c0:	2001      	movs	r0, #1
 80020c2:	fa00 f202 	lsl.w	r2, r0, r2
 80020c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	e000e100 	.word	0xe000e100

080020dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	6039      	str	r1, [r7, #0]
 80020e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	db0a      	blt.n	8002106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	490c      	ldr	r1, [pc, #48]	; (8002128 <__NVIC_SetPriority+0x4c>)
 80020f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fa:	0112      	lsls	r2, r2, #4
 80020fc:	b2d2      	uxtb	r2, r2
 80020fe:	440b      	add	r3, r1
 8002100:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002104:	e00a      	b.n	800211c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	b2da      	uxtb	r2, r3
 800210a:	4908      	ldr	r1, [pc, #32]	; (800212c <__NVIC_SetPriority+0x50>)
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	3b04      	subs	r3, #4
 8002114:	0112      	lsls	r2, r2, #4
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	440b      	add	r3, r1
 800211a:	761a      	strb	r2, [r3, #24]
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	e000e100 	.word	0xe000e100
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002130:	b480      	push	{r7}
 8002132:	b089      	sub	sp, #36	; 0x24
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	f1c3 0307 	rsb	r3, r3, #7
 800214a:	2b04      	cmp	r3, #4
 800214c:	bf28      	it	cs
 800214e:	2304      	movcs	r3, #4
 8002150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	3304      	adds	r3, #4
 8002156:	2b06      	cmp	r3, #6
 8002158:	d902      	bls.n	8002160 <NVIC_EncodePriority+0x30>
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3b03      	subs	r3, #3
 800215e:	e000      	b.n	8002162 <NVIC_EncodePriority+0x32>
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002164:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43da      	mvns	r2, r3
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	401a      	ands	r2, r3
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002178:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	fa01 f303 	lsl.w	r3, r1, r3
 8002182:	43d9      	mvns	r1, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002188:	4313      	orrs	r3, r2
         );
}
 800218a:	4618      	mov	r0, r3
 800218c:	3724      	adds	r7, #36	; 0x24
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
	...

08002198 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3b01      	subs	r3, #1
 80021a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021a8:	d301      	bcc.n	80021ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021aa:	2301      	movs	r3, #1
 80021ac:	e00f      	b.n	80021ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ae:	4a0a      	ldr	r2, [pc, #40]	; (80021d8 <SysTick_Config+0x40>)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3b01      	subs	r3, #1
 80021b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021b6:	210f      	movs	r1, #15
 80021b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021bc:	f7ff ff8e 	bl	80020dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021c0:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <SysTick_Config+0x40>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021c6:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <SysTick_Config+0x40>)
 80021c8:	2207      	movs	r2, #7
 80021ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	e000e010 	.word	0xe000e010

080021dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7ff ff29 	bl	800203c <__NVIC_SetPriorityGrouping>
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b086      	sub	sp, #24
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	4603      	mov	r3, r0
 80021fa:	60b9      	str	r1, [r7, #8]
 80021fc:	607a      	str	r2, [r7, #4]
 80021fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002204:	f7ff ff3e 	bl	8002084 <__NVIC_GetPriorityGrouping>
 8002208:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	68b9      	ldr	r1, [r7, #8]
 800220e:	6978      	ldr	r0, [r7, #20]
 8002210:	f7ff ff8e 	bl	8002130 <NVIC_EncodePriority>
 8002214:	4602      	mov	r2, r0
 8002216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800221a:	4611      	mov	r1, r2
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff ff5d 	bl	80020dc <__NVIC_SetPriority>
}
 8002222:	bf00      	nop
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b082      	sub	sp, #8
 800222e:	af00      	add	r7, sp, #0
 8002230:	4603      	mov	r3, r0
 8002232:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff ff31 	bl	80020a0 <__NVIC_EnableIRQ>
}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b082      	sub	sp, #8
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7ff ffa2 	bl	8002198 <SysTick_Config>
 8002254:	4603      	mov	r3, r0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
	...

08002260 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800226c:	f7ff feb6 	bl	8001fdc <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e099      	b.n	80023b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2202      	movs	r2, #2
 8002280:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0201 	bic.w	r2, r2, #1
 800229a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800229c:	e00f      	b.n	80022be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800229e:	f7ff fe9d 	bl	8001fdc <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b05      	cmp	r3, #5
 80022aa:	d908      	bls.n	80022be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2220      	movs	r2, #32
 80022b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2203      	movs	r2, #3
 80022b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e078      	b.n	80023b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1e8      	bne.n	800229e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	4b38      	ldr	r3, [pc, #224]	; (80023b8 <HAL_DMA_Init+0x158>)
 80022d8:	4013      	ands	r3, r2
 80022da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002302:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	4313      	orrs	r3, r2
 800230e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002314:	2b04      	cmp	r3, #4
 8002316:	d107      	bne.n	8002328 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002320:	4313      	orrs	r3, r2
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	4313      	orrs	r3, r2
 8002326:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f023 0307 	bic.w	r3, r3, #7
 800233e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	4313      	orrs	r3, r2
 8002348:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234e:	2b04      	cmp	r3, #4
 8002350:	d117      	bne.n	8002382 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	4313      	orrs	r3, r2
 800235a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00e      	beq.n	8002382 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 fa6f 	bl	8002848 <DMA_CheckFifoParam>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d008      	beq.n	8002382 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2240      	movs	r2, #64	; 0x40
 8002374:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800237e:	2301      	movs	r3, #1
 8002380:	e016      	b.n	80023b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 fa26 	bl	80027dc <DMA_CalcBaseAndBitshift>
 8002390:	4603      	mov	r3, r0
 8002392:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002398:	223f      	movs	r2, #63	; 0x3f
 800239a:	409a      	lsls	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	f010803f 	.word	0xf010803f

080023bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
 80023c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023ca:	2300      	movs	r3, #0
 80023cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d101      	bne.n	80023e2 <HAL_DMA_Start_IT+0x26>
 80023de:	2302      	movs	r3, #2
 80023e0:	e040      	b.n	8002464 <HAL_DMA_Start_IT+0xa8>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d12f      	bne.n	8002456 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2202      	movs	r2, #2
 80023fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	68b9      	ldr	r1, [r7, #8]
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f000 f9b8 	bl	8002780 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002414:	223f      	movs	r2, #63	; 0x3f
 8002416:	409a      	lsls	r2, r3
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f042 0216 	orr.w	r2, r2, #22
 800242a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	2b00      	cmp	r3, #0
 8002432:	d007      	beq.n	8002444 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f042 0208 	orr.w	r2, r2, #8
 8002442:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0201 	orr.w	r2, r2, #1
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	e005      	b.n	8002462 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800245e:	2302      	movs	r3, #2
 8002460:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002462:	7dfb      	ldrb	r3, [r7, #23]
}
 8002464:	4618      	mov	r0, r3
 8002466:	3718      	adds	r7, #24
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002474:	2300      	movs	r3, #0
 8002476:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002478:	4b8e      	ldr	r3, [pc, #568]	; (80026b4 <HAL_DMA_IRQHandler+0x248>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a8e      	ldr	r2, [pc, #568]	; (80026b8 <HAL_DMA_IRQHandler+0x24c>)
 800247e:	fba2 2303 	umull	r2, r3, r2, r3
 8002482:	0a9b      	lsrs	r3, r3, #10
 8002484:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002496:	2208      	movs	r2, #8
 8002498:	409a      	lsls	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4013      	ands	r3, r2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d01a      	beq.n	80024d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d013      	beq.n	80024d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0204 	bic.w	r2, r2, #4
 80024be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c4:	2208      	movs	r2, #8
 80024c6:	409a      	lsls	r2, r3
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d0:	f043 0201 	orr.w	r2, r3, #1
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024dc:	2201      	movs	r2, #1
 80024de:	409a      	lsls	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4013      	ands	r3, r2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d012      	beq.n	800250e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00b      	beq.n	800250e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024fa:	2201      	movs	r2, #1
 80024fc:	409a      	lsls	r2, r3
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002506:	f043 0202 	orr.w	r2, r3, #2
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002512:	2204      	movs	r2, #4
 8002514:	409a      	lsls	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	4013      	ands	r3, r2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d012      	beq.n	8002544 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00b      	beq.n	8002544 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002530:	2204      	movs	r2, #4
 8002532:	409a      	lsls	r2, r3
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253c:	f043 0204 	orr.w	r2, r3, #4
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002548:	2210      	movs	r2, #16
 800254a:	409a      	lsls	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4013      	ands	r3, r2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d043      	beq.n	80025dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	2b00      	cmp	r3, #0
 8002560:	d03c      	beq.n	80025dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002566:	2210      	movs	r2, #16
 8002568:	409a      	lsls	r2, r3
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d018      	beq.n	80025ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d108      	bne.n	800259c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	2b00      	cmp	r3, #0
 8002590:	d024      	beq.n	80025dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	4798      	blx	r3
 800259a:	e01f      	b.n	80025dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d01b      	beq.n	80025dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	4798      	blx	r3
 80025ac:	e016      	b.n	80025dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d107      	bne.n	80025cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 0208 	bic.w	r2, r2, #8
 80025ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e0:	2220      	movs	r2, #32
 80025e2:	409a      	lsls	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4013      	ands	r3, r2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 808f 	beq.w	800270c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0310 	and.w	r3, r3, #16
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 8087 	beq.w	800270c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002602:	2220      	movs	r2, #32
 8002604:	409a      	lsls	r2, r3
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b05      	cmp	r3, #5
 8002614:	d136      	bne.n	8002684 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0216 	bic.w	r2, r2, #22
 8002624:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695a      	ldr	r2, [r3, #20]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002634:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	2b00      	cmp	r3, #0
 800263c:	d103      	bne.n	8002646 <HAL_DMA_IRQHandler+0x1da>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002642:	2b00      	cmp	r3, #0
 8002644:	d007      	beq.n	8002656 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 0208 	bic.w	r2, r2, #8
 8002654:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265a:	223f      	movs	r2, #63	; 0x3f
 800265c:	409a      	lsls	r2, r3
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002676:	2b00      	cmp	r3, #0
 8002678:	d07e      	beq.n	8002778 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	4798      	blx	r3
        }
        return;
 8002682:	e079      	b.n	8002778 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d01d      	beq.n	80026ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10d      	bne.n	80026bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d031      	beq.n	800270c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	4798      	blx	r3
 80026b0:	e02c      	b.n	800270c <HAL_DMA_IRQHandler+0x2a0>
 80026b2:	bf00      	nop
 80026b4:	200000a0 	.word	0x200000a0
 80026b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d023      	beq.n	800270c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	4798      	blx	r3
 80026cc:	e01e      	b.n	800270c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10f      	bne.n	80026fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0210 	bic.w	r2, r2, #16
 80026ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002710:	2b00      	cmp	r3, #0
 8002712:	d032      	beq.n	800277a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b00      	cmp	r3, #0
 800271e:	d022      	beq.n	8002766 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2205      	movs	r2, #5
 8002724:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0201 	bic.w	r2, r2, #1
 8002736:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	3301      	adds	r3, #1
 800273c:	60bb      	str	r3, [r7, #8]
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	429a      	cmp	r2, r3
 8002742:	d307      	bcc.n	8002754 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f2      	bne.n	8002738 <HAL_DMA_IRQHandler+0x2cc>
 8002752:	e000      	b.n	8002756 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002754:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800276a:	2b00      	cmp	r3, #0
 800276c:	d005      	beq.n	800277a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	4798      	blx	r3
 8002776:	e000      	b.n	800277a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002778:	bf00      	nop
    }
  }
}
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
 800278c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800279c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	2b40      	cmp	r3, #64	; 0x40
 80027ac:	d108      	bne.n	80027c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68ba      	ldr	r2, [r7, #8]
 80027bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80027be:	e007      	b.n	80027d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	60da      	str	r2, [r3, #12]
}
 80027d0:	bf00      	nop
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	3b10      	subs	r3, #16
 80027ec:	4a14      	ldr	r2, [pc, #80]	; (8002840 <DMA_CalcBaseAndBitshift+0x64>)
 80027ee:	fba2 2303 	umull	r2, r3, r2, r3
 80027f2:	091b      	lsrs	r3, r3, #4
 80027f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027f6:	4a13      	ldr	r2, [pc, #76]	; (8002844 <DMA_CalcBaseAndBitshift+0x68>)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4413      	add	r3, r2
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	461a      	mov	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2b03      	cmp	r3, #3
 8002808:	d909      	bls.n	800281e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002812:	f023 0303 	bic.w	r3, r3, #3
 8002816:	1d1a      	adds	r2, r3, #4
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	659a      	str	r2, [r3, #88]	; 0x58
 800281c:	e007      	b.n	800282e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002826:	f023 0303 	bic.w	r3, r3, #3
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002832:	4618      	mov	r0, r3
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	aaaaaaab 	.word	0xaaaaaaab
 8002844:	0800577c 	.word	0x0800577c

08002848 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002850:	2300      	movs	r3, #0
 8002852:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002858:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d11f      	bne.n	80028a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	2b03      	cmp	r3, #3
 8002866:	d856      	bhi.n	8002916 <DMA_CheckFifoParam+0xce>
 8002868:	a201      	add	r2, pc, #4	; (adr r2, 8002870 <DMA_CheckFifoParam+0x28>)
 800286a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800286e:	bf00      	nop
 8002870:	08002881 	.word	0x08002881
 8002874:	08002893 	.word	0x08002893
 8002878:	08002881 	.word	0x08002881
 800287c:	08002917 	.word	0x08002917
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002884:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d046      	beq.n	800291a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002890:	e043      	b.n	800291a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002896:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800289a:	d140      	bne.n	800291e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028a0:	e03d      	b.n	800291e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028aa:	d121      	bne.n	80028f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	2b03      	cmp	r3, #3
 80028b0:	d837      	bhi.n	8002922 <DMA_CheckFifoParam+0xda>
 80028b2:	a201      	add	r2, pc, #4	; (adr r2, 80028b8 <DMA_CheckFifoParam+0x70>)
 80028b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b8:	080028c9 	.word	0x080028c9
 80028bc:	080028cf 	.word	0x080028cf
 80028c0:	080028c9 	.word	0x080028c9
 80028c4:	080028e1 	.word	0x080028e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	73fb      	strb	r3, [r7, #15]
      break;
 80028cc:	e030      	b.n	8002930 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d025      	beq.n	8002926 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028de:	e022      	b.n	8002926 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028e8:	d11f      	bne.n	800292a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028ee:	e01c      	b.n	800292a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d903      	bls.n	80028fe <DMA_CheckFifoParam+0xb6>
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	2b03      	cmp	r3, #3
 80028fa:	d003      	beq.n	8002904 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80028fc:	e018      	b.n	8002930 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	73fb      	strb	r3, [r7, #15]
      break;
 8002902:	e015      	b.n	8002930 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002908:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00e      	beq.n	800292e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	73fb      	strb	r3, [r7, #15]
      break;
 8002914:	e00b      	b.n	800292e <DMA_CheckFifoParam+0xe6>
      break;
 8002916:	bf00      	nop
 8002918:	e00a      	b.n	8002930 <DMA_CheckFifoParam+0xe8>
      break;
 800291a:	bf00      	nop
 800291c:	e008      	b.n	8002930 <DMA_CheckFifoParam+0xe8>
      break;
 800291e:	bf00      	nop
 8002920:	e006      	b.n	8002930 <DMA_CheckFifoParam+0xe8>
      break;
 8002922:	bf00      	nop
 8002924:	e004      	b.n	8002930 <DMA_CheckFifoParam+0xe8>
      break;
 8002926:	bf00      	nop
 8002928:	e002      	b.n	8002930 <DMA_CheckFifoParam+0xe8>
      break;   
 800292a:	bf00      	nop
 800292c:	e000      	b.n	8002930 <DMA_CheckFifoParam+0xe8>
      break;
 800292e:	bf00      	nop
    }
  } 
  
  return status; 
 8002930:	7bfb      	ldrb	r3, [r7, #15]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3714      	adds	r7, #20
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop

08002940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002940:	b480      	push	{r7}
 8002942:	b089      	sub	sp, #36	; 0x24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800294e:	2300      	movs	r3, #0
 8002950:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002952:	2300      	movs	r3, #0
 8002954:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002956:	2300      	movs	r3, #0
 8002958:	61fb      	str	r3, [r7, #28]
 800295a:	e159      	b.n	8002c10 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800295c:	2201      	movs	r2, #1
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	4013      	ands	r3, r2
 800296e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	429a      	cmp	r2, r3
 8002976:	f040 8148 	bne.w	8002c0a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f003 0303 	and.w	r3, r3, #3
 8002982:	2b01      	cmp	r3, #1
 8002984:	d005      	beq.n	8002992 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800298e:	2b02      	cmp	r3, #2
 8002990:	d130      	bne.n	80029f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	2203      	movs	r2, #3
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43db      	mvns	r3, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4013      	ands	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029c8:	2201      	movs	r2, #1
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	43db      	mvns	r3, r3
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4013      	ands	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	091b      	lsrs	r3, r3, #4
 80029de:	f003 0201 	and.w	r2, r3, #1
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	2b03      	cmp	r3, #3
 80029fe:	d017      	beq.n	8002a30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	2203      	movs	r2, #3
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d123      	bne.n	8002a84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	08da      	lsrs	r2, r3, #3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3208      	adds	r2, #8
 8002a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	220f      	movs	r2, #15
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	691a      	ldr	r2, [r3, #16]
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	08da      	lsrs	r2, r3, #3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3208      	adds	r2, #8
 8002a7e:	69b9      	ldr	r1, [r7, #24]
 8002a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	2203      	movs	r2, #3
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f003 0203 	and.w	r2, r3, #3
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 80a2 	beq.w	8002c0a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	4b57      	ldr	r3, [pc, #348]	; (8002c28 <HAL_GPIO_Init+0x2e8>)
 8002acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ace:	4a56      	ldr	r2, [pc, #344]	; (8002c28 <HAL_GPIO_Init+0x2e8>)
 8002ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ad6:	4b54      	ldr	r3, [pc, #336]	; (8002c28 <HAL_GPIO_Init+0x2e8>)
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ae2:	4a52      	ldr	r2, [pc, #328]	; (8002c2c <HAL_GPIO_Init+0x2ec>)
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	089b      	lsrs	r3, r3, #2
 8002ae8:	3302      	adds	r3, #2
 8002aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	220f      	movs	r2, #15
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	43db      	mvns	r3, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4013      	ands	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a49      	ldr	r2, [pc, #292]	; (8002c30 <HAL_GPIO_Init+0x2f0>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d019      	beq.n	8002b42 <HAL_GPIO_Init+0x202>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a48      	ldr	r2, [pc, #288]	; (8002c34 <HAL_GPIO_Init+0x2f4>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d013      	beq.n	8002b3e <HAL_GPIO_Init+0x1fe>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a47      	ldr	r2, [pc, #284]	; (8002c38 <HAL_GPIO_Init+0x2f8>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d00d      	beq.n	8002b3a <HAL_GPIO_Init+0x1fa>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a46      	ldr	r2, [pc, #280]	; (8002c3c <HAL_GPIO_Init+0x2fc>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d007      	beq.n	8002b36 <HAL_GPIO_Init+0x1f6>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a45      	ldr	r2, [pc, #276]	; (8002c40 <HAL_GPIO_Init+0x300>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d101      	bne.n	8002b32 <HAL_GPIO_Init+0x1f2>
 8002b2e:	2304      	movs	r3, #4
 8002b30:	e008      	b.n	8002b44 <HAL_GPIO_Init+0x204>
 8002b32:	2307      	movs	r3, #7
 8002b34:	e006      	b.n	8002b44 <HAL_GPIO_Init+0x204>
 8002b36:	2303      	movs	r3, #3
 8002b38:	e004      	b.n	8002b44 <HAL_GPIO_Init+0x204>
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	e002      	b.n	8002b44 <HAL_GPIO_Init+0x204>
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e000      	b.n	8002b44 <HAL_GPIO_Init+0x204>
 8002b42:	2300      	movs	r3, #0
 8002b44:	69fa      	ldr	r2, [r7, #28]
 8002b46:	f002 0203 	and.w	r2, r2, #3
 8002b4a:	0092      	lsls	r2, r2, #2
 8002b4c:	4093      	lsls	r3, r2
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b54:	4935      	ldr	r1, [pc, #212]	; (8002c2c <HAL_GPIO_Init+0x2ec>)
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	089b      	lsrs	r3, r3, #2
 8002b5a:	3302      	adds	r3, #2
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b62:	4b38      	ldr	r3, [pc, #224]	; (8002c44 <HAL_GPIO_Init+0x304>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	43db      	mvns	r3, r3
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b86:	4a2f      	ldr	r2, [pc, #188]	; (8002c44 <HAL_GPIO_Init+0x304>)
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b8c:	4b2d      	ldr	r3, [pc, #180]	; (8002c44 <HAL_GPIO_Init+0x304>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	43db      	mvns	r3, r3
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d003      	beq.n	8002bb0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bb0:	4a24      	ldr	r2, [pc, #144]	; (8002c44 <HAL_GPIO_Init+0x304>)
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bb6:	4b23      	ldr	r3, [pc, #140]	; (8002c44 <HAL_GPIO_Init+0x304>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bda:	4a1a      	ldr	r2, [pc, #104]	; (8002c44 <HAL_GPIO_Init+0x304>)
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002be0:	4b18      	ldr	r3, [pc, #96]	; (8002c44 <HAL_GPIO_Init+0x304>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	43db      	mvns	r3, r3
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4013      	ands	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c04:	4a0f      	ldr	r2, [pc, #60]	; (8002c44 <HAL_GPIO_Init+0x304>)
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	61fb      	str	r3, [r7, #28]
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	2b0f      	cmp	r3, #15
 8002c14:	f67f aea2 	bls.w	800295c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c18:	bf00      	nop
 8002c1a:	bf00      	nop
 8002c1c:	3724      	adds	r7, #36	; 0x24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	40013800 	.word	0x40013800
 8002c30:	40020000 	.word	0x40020000
 8002c34:	40020400 	.word	0x40020400
 8002c38:	40020800 	.word	0x40020800
 8002c3c:	40020c00 	.word	0x40020c00
 8002c40:	40021000 	.word	0x40021000
 8002c44:	40013c00 	.word	0x40013c00

08002c48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	460b      	mov	r3, r1
 8002c52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691a      	ldr	r2, [r3, #16]
 8002c58:	887b      	ldrh	r3, [r7, #2]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c60:	2301      	movs	r3, #1
 8002c62:	73fb      	strb	r3, [r7, #15]
 8002c64:	e001      	b.n	8002c6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c66:	2300      	movs	r3, #0
 8002c68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	460b      	mov	r3, r1
 8002c82:	807b      	strh	r3, [r7, #2]
 8002c84:	4613      	mov	r3, r2
 8002c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c88:	787b      	ldrb	r3, [r7, #1]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c8e:	887a      	ldrh	r2, [r7, #2]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c94:	e003      	b.n	8002c9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c96:	887b      	ldrh	r3, [r7, #2]
 8002c98:	041a      	lsls	r2, r3, #16
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	619a      	str	r2, [r3, #24]
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
	...

08002cac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002cb6:	4b08      	ldr	r3, [pc, #32]	; (8002cd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cb8:	695a      	ldr	r2, [r3, #20]
 8002cba:	88fb      	ldrh	r3, [r7, #6]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d006      	beq.n	8002cd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cc2:	4a05      	ldr	r2, [pc, #20]	; (8002cd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cc4:	88fb      	ldrh	r3, [r7, #6]
 8002cc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cc8:	88fb      	ldrh	r3, [r7, #6]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fe fc4c 	bl	8001568 <HAL_GPIO_EXTI_Callback>
  }
}
 8002cd0:	bf00      	nop
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40013c00 	.word	0x40013c00

08002cdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e267      	b.n	80031be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d075      	beq.n	8002de6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cfa:	4b88      	ldr	r3, [pc, #544]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 030c 	and.w	r3, r3, #12
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d00c      	beq.n	8002d20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d06:	4b85      	ldr	r3, [pc, #532]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d0e:	2b08      	cmp	r3, #8
 8002d10:	d112      	bne.n	8002d38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d12:	4b82      	ldr	r3, [pc, #520]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d1e:	d10b      	bne.n	8002d38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d20:	4b7e      	ldr	r3, [pc, #504]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d05b      	beq.n	8002de4 <HAL_RCC_OscConfig+0x108>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d157      	bne.n	8002de4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e242      	b.n	80031be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d40:	d106      	bne.n	8002d50 <HAL_RCC_OscConfig+0x74>
 8002d42:	4b76      	ldr	r3, [pc, #472]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a75      	ldr	r2, [pc, #468]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d4c:	6013      	str	r3, [r2, #0]
 8002d4e:	e01d      	b.n	8002d8c <HAL_RCC_OscConfig+0xb0>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d58:	d10c      	bne.n	8002d74 <HAL_RCC_OscConfig+0x98>
 8002d5a:	4b70      	ldr	r3, [pc, #448]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a6f      	ldr	r2, [pc, #444]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d64:	6013      	str	r3, [r2, #0]
 8002d66:	4b6d      	ldr	r3, [pc, #436]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a6c      	ldr	r2, [pc, #432]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	e00b      	b.n	8002d8c <HAL_RCC_OscConfig+0xb0>
 8002d74:	4b69      	ldr	r3, [pc, #420]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a68      	ldr	r2, [pc, #416]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d7e:	6013      	str	r3, [r2, #0]
 8002d80:	4b66      	ldr	r3, [pc, #408]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a65      	ldr	r2, [pc, #404]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002d86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d013      	beq.n	8002dbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d94:	f7ff f922 	bl	8001fdc <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d9c:	f7ff f91e 	bl	8001fdc <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b64      	cmp	r3, #100	; 0x64
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e207      	b.n	80031be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dae:	4b5b      	ldr	r3, [pc, #364]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0f0      	beq.n	8002d9c <HAL_RCC_OscConfig+0xc0>
 8002dba:	e014      	b.n	8002de6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbc:	f7ff f90e 	bl	8001fdc <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dc4:	f7ff f90a 	bl	8001fdc <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b64      	cmp	r3, #100	; 0x64
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e1f3      	b.n	80031be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dd6:	4b51      	ldr	r3, [pc, #324]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f0      	bne.n	8002dc4 <HAL_RCC_OscConfig+0xe8>
 8002de2:	e000      	b.n	8002de6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d063      	beq.n	8002eba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002df2:	4b4a      	ldr	r3, [pc, #296]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 030c 	and.w	r3, r3, #12
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00b      	beq.n	8002e16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dfe:	4b47      	ldr	r3, [pc, #284]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e06:	2b08      	cmp	r3, #8
 8002e08:	d11c      	bne.n	8002e44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e0a:	4b44      	ldr	r3, [pc, #272]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d116      	bne.n	8002e44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e16:	4b41      	ldr	r3, [pc, #260]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d005      	beq.n	8002e2e <HAL_RCC_OscConfig+0x152>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d001      	beq.n	8002e2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e1c7      	b.n	80031be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e2e:	4b3b      	ldr	r3, [pc, #236]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	4937      	ldr	r1, [pc, #220]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e42:	e03a      	b.n	8002eba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d020      	beq.n	8002e8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e4c:	4b34      	ldr	r3, [pc, #208]	; (8002f20 <HAL_RCC_OscConfig+0x244>)
 8002e4e:	2201      	movs	r2, #1
 8002e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e52:	f7ff f8c3 	bl	8001fdc <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e5a:	f7ff f8bf 	bl	8001fdc <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e1a8      	b.n	80031be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e6c:	4b2b      	ldr	r3, [pc, #172]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0f0      	beq.n	8002e5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e78:	4b28      	ldr	r3, [pc, #160]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	4925      	ldr	r1, [pc, #148]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	600b      	str	r3, [r1, #0]
 8002e8c:	e015      	b.n	8002eba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e8e:	4b24      	ldr	r3, [pc, #144]	; (8002f20 <HAL_RCC_OscConfig+0x244>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e94:	f7ff f8a2 	bl	8001fdc <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e9c:	f7ff f89e 	bl	8001fdc <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e187      	b.n	80031be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eae:	4b1b      	ldr	r3, [pc, #108]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1f0      	bne.n	8002e9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0308 	and.w	r3, r3, #8
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d036      	beq.n	8002f34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d016      	beq.n	8002efc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ece:	4b15      	ldr	r3, [pc, #84]	; (8002f24 <HAL_RCC_OscConfig+0x248>)
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed4:	f7ff f882 	bl	8001fdc <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002edc:	f7ff f87e 	bl	8001fdc <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e167      	b.n	80031be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eee:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <HAL_RCC_OscConfig+0x240>)
 8002ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0f0      	beq.n	8002edc <HAL_RCC_OscConfig+0x200>
 8002efa:	e01b      	b.n	8002f34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002efc:	4b09      	ldr	r3, [pc, #36]	; (8002f24 <HAL_RCC_OscConfig+0x248>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f02:	f7ff f86b 	bl	8001fdc <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f08:	e00e      	b.n	8002f28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f0a:	f7ff f867 	bl	8001fdc <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d907      	bls.n	8002f28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e150      	b.n	80031be <HAL_RCC_OscConfig+0x4e2>
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	42470000 	.word	0x42470000
 8002f24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f28:	4b88      	ldr	r3, [pc, #544]	; (800314c <HAL_RCC_OscConfig+0x470>)
 8002f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1ea      	bne.n	8002f0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f000 8097 	beq.w	8003070 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f42:	2300      	movs	r3, #0
 8002f44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f46:	4b81      	ldr	r3, [pc, #516]	; (800314c <HAL_RCC_OscConfig+0x470>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10f      	bne.n	8002f72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f52:	2300      	movs	r3, #0
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	4b7d      	ldr	r3, [pc, #500]	; (800314c <HAL_RCC_OscConfig+0x470>)
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	4a7c      	ldr	r2, [pc, #496]	; (800314c <HAL_RCC_OscConfig+0x470>)
 8002f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f60:	6413      	str	r3, [r2, #64]	; 0x40
 8002f62:	4b7a      	ldr	r3, [pc, #488]	; (800314c <HAL_RCC_OscConfig+0x470>)
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6a:	60bb      	str	r3, [r7, #8]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f72:	4b77      	ldr	r3, [pc, #476]	; (8003150 <HAL_RCC_OscConfig+0x474>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d118      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f7e:	4b74      	ldr	r3, [pc, #464]	; (8003150 <HAL_RCC_OscConfig+0x474>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a73      	ldr	r2, [pc, #460]	; (8003150 <HAL_RCC_OscConfig+0x474>)
 8002f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f8a:	f7ff f827 	bl	8001fdc <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f90:	e008      	b.n	8002fa4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f92:	f7ff f823 	bl	8001fdc <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e10c      	b.n	80031be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa4:	4b6a      	ldr	r3, [pc, #424]	; (8003150 <HAL_RCC_OscConfig+0x474>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d0f0      	beq.n	8002f92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d106      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x2ea>
 8002fb8:	4b64      	ldr	r3, [pc, #400]	; (800314c <HAL_RCC_OscConfig+0x470>)
 8002fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbc:	4a63      	ldr	r2, [pc, #396]	; (800314c <HAL_RCC_OscConfig+0x470>)
 8002fbe:	f043 0301 	orr.w	r3, r3, #1
 8002fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc4:	e01c      	b.n	8003000 <HAL_RCC_OscConfig+0x324>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	2b05      	cmp	r3, #5
 8002fcc:	d10c      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x30c>
 8002fce:	4b5f      	ldr	r3, [pc, #380]	; (800314c <HAL_RCC_OscConfig+0x470>)
 8002fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd2:	4a5e      	ldr	r2, [pc, #376]	; (800314c <HAL_RCC_OscConfig+0x470>)
 8002fd4:	f043 0304 	orr.w	r3, r3, #4
 8002fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8002fda:	4b5c      	ldr	r3, [pc, #368]	; (800314c <HAL_RCC_OscConfig+0x470>)
 8002fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fde:	4a5b      	ldr	r2, [pc, #364]	; (800314c <HAL_RCC_OscConfig+0x470>)
 8002fe0:	f043 0301 	orr.w	r3, r3, #1
 8002fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fe6:	e00b      	b.n	8003000 <HAL_RCC_OscConfig+0x324>
 8002fe8:	4b58      	ldr	r3, [pc, #352]	; (800314c <HAL_RCC_OscConfig+0x470>)
 8002fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fec:	4a57      	ldr	r2, [pc, #348]	; (800314c <HAL_RCC_OscConfig+0x470>)
 8002fee:	f023 0301 	bic.w	r3, r3, #1
 8002ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff4:	4b55      	ldr	r3, [pc, #340]	; (800314c <HAL_RCC_OscConfig+0x470>)
 8002ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff8:	4a54      	ldr	r2, [pc, #336]	; (800314c <HAL_RCC_OscConfig+0x470>)
 8002ffa:	f023 0304 	bic.w	r3, r3, #4
 8002ffe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d015      	beq.n	8003034 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003008:	f7fe ffe8 	bl	8001fdc <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800300e:	e00a      	b.n	8003026 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003010:	f7fe ffe4 	bl	8001fdc <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	f241 3288 	movw	r2, #5000	; 0x1388
 800301e:	4293      	cmp	r3, r2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e0cb      	b.n	80031be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003026:	4b49      	ldr	r3, [pc, #292]	; (800314c <HAL_RCC_OscConfig+0x470>)
 8003028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d0ee      	beq.n	8003010 <HAL_RCC_OscConfig+0x334>
 8003032:	e014      	b.n	800305e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003034:	f7fe ffd2 	bl	8001fdc <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800303a:	e00a      	b.n	8003052 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800303c:	f7fe ffce 	bl	8001fdc <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	f241 3288 	movw	r2, #5000	; 0x1388
 800304a:	4293      	cmp	r3, r2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e0b5      	b.n	80031be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003052:	4b3e      	ldr	r3, [pc, #248]	; (800314c <HAL_RCC_OscConfig+0x470>)
 8003054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1ee      	bne.n	800303c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800305e:	7dfb      	ldrb	r3, [r7, #23]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d105      	bne.n	8003070 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003064:	4b39      	ldr	r3, [pc, #228]	; (800314c <HAL_RCC_OscConfig+0x470>)
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	4a38      	ldr	r2, [pc, #224]	; (800314c <HAL_RCC_OscConfig+0x470>)
 800306a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800306e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 80a1 	beq.w	80031bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800307a:	4b34      	ldr	r3, [pc, #208]	; (800314c <HAL_RCC_OscConfig+0x470>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 030c 	and.w	r3, r3, #12
 8003082:	2b08      	cmp	r3, #8
 8003084:	d05c      	beq.n	8003140 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	2b02      	cmp	r3, #2
 800308c:	d141      	bne.n	8003112 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800308e:	4b31      	ldr	r3, [pc, #196]	; (8003154 <HAL_RCC_OscConfig+0x478>)
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003094:	f7fe ffa2 	bl	8001fdc <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800309c:	f7fe ff9e 	bl	8001fdc <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e087      	b.n	80031be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ae:	4b27      	ldr	r3, [pc, #156]	; (800314c <HAL_RCC_OscConfig+0x470>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f0      	bne.n	800309c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69da      	ldr	r2, [r3, #28]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c8:	019b      	lsls	r3, r3, #6
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d0:	085b      	lsrs	r3, r3, #1
 80030d2:	3b01      	subs	r3, #1
 80030d4:	041b      	lsls	r3, r3, #16
 80030d6:	431a      	orrs	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030dc:	061b      	lsls	r3, r3, #24
 80030de:	491b      	ldr	r1, [pc, #108]	; (800314c <HAL_RCC_OscConfig+0x470>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030e4:	4b1b      	ldr	r3, [pc, #108]	; (8003154 <HAL_RCC_OscConfig+0x478>)
 80030e6:	2201      	movs	r2, #1
 80030e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ea:	f7fe ff77 	bl	8001fdc <HAL_GetTick>
 80030ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f0:	e008      	b.n	8003104 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f2:	f7fe ff73 	bl	8001fdc <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e05c      	b.n	80031be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003104:	4b11      	ldr	r3, [pc, #68]	; (800314c <HAL_RCC_OscConfig+0x470>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d0f0      	beq.n	80030f2 <HAL_RCC_OscConfig+0x416>
 8003110:	e054      	b.n	80031bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003112:	4b10      	ldr	r3, [pc, #64]	; (8003154 <HAL_RCC_OscConfig+0x478>)
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003118:	f7fe ff60 	bl	8001fdc <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003120:	f7fe ff5c 	bl	8001fdc <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e045      	b.n	80031be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003132:	4b06      	ldr	r3, [pc, #24]	; (800314c <HAL_RCC_OscConfig+0x470>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f0      	bne.n	8003120 <HAL_RCC_OscConfig+0x444>
 800313e:	e03d      	b.n	80031bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d107      	bne.n	8003158 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e038      	b.n	80031be <HAL_RCC_OscConfig+0x4e2>
 800314c:	40023800 	.word	0x40023800
 8003150:	40007000 	.word	0x40007000
 8003154:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003158:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <HAL_RCC_OscConfig+0x4ec>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d028      	beq.n	80031b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003170:	429a      	cmp	r2, r3
 8003172:	d121      	bne.n	80031b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800317e:	429a      	cmp	r2, r3
 8003180:	d11a      	bne.n	80031b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003188:	4013      	ands	r3, r2
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800318e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003190:	4293      	cmp	r3, r2
 8003192:	d111      	bne.n	80031b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319e:	085b      	lsrs	r3, r3, #1
 80031a0:	3b01      	subs	r3, #1
 80031a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d107      	bne.n	80031b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d001      	beq.n	80031bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e000      	b.n	80031be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3718      	adds	r7, #24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	40023800 	.word	0x40023800

080031cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e0cc      	b.n	800337a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031e0:	4b68      	ldr	r3, [pc, #416]	; (8003384 <HAL_RCC_ClockConfig+0x1b8>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d90c      	bls.n	8003208 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ee:	4b65      	ldr	r3, [pc, #404]	; (8003384 <HAL_RCC_ClockConfig+0x1b8>)
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f6:	4b63      	ldr	r3, [pc, #396]	; (8003384 <HAL_RCC_ClockConfig+0x1b8>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	429a      	cmp	r2, r3
 8003202:	d001      	beq.n	8003208 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e0b8      	b.n	800337a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d020      	beq.n	8003256 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b00      	cmp	r3, #0
 800321e:	d005      	beq.n	800322c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003220:	4b59      	ldr	r3, [pc, #356]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	4a58      	ldr	r2, [pc, #352]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 8003226:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800322a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0308 	and.w	r3, r3, #8
 8003234:	2b00      	cmp	r3, #0
 8003236:	d005      	beq.n	8003244 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003238:	4b53      	ldr	r3, [pc, #332]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	4a52      	ldr	r2, [pc, #328]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 800323e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003242:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003244:	4b50      	ldr	r3, [pc, #320]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	494d      	ldr	r1, [pc, #308]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	4313      	orrs	r3, r2
 8003254:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d044      	beq.n	80032ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d107      	bne.n	800327a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326a:	4b47      	ldr	r3, [pc, #284]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d119      	bne.n	80032aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e07f      	b.n	800337a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2b02      	cmp	r3, #2
 8003280:	d003      	beq.n	800328a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003286:	2b03      	cmp	r3, #3
 8003288:	d107      	bne.n	800329a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800328a:	4b3f      	ldr	r3, [pc, #252]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d109      	bne.n	80032aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e06f      	b.n	800337a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800329a:	4b3b      	ldr	r3, [pc, #236]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e067      	b.n	800337a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032aa:	4b37      	ldr	r3, [pc, #220]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f023 0203 	bic.w	r2, r3, #3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	4934      	ldr	r1, [pc, #208]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032bc:	f7fe fe8e 	bl	8001fdc <HAL_GetTick>
 80032c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c2:	e00a      	b.n	80032da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c4:	f7fe fe8a 	bl	8001fdc <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e04f      	b.n	800337a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032da:	4b2b      	ldr	r3, [pc, #172]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 020c 	and.w	r2, r3, #12
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d1eb      	bne.n	80032c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032ec:	4b25      	ldr	r3, [pc, #148]	; (8003384 <HAL_RCC_ClockConfig+0x1b8>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d20c      	bcs.n	8003314 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032fa:	4b22      	ldr	r3, [pc, #136]	; (8003384 <HAL_RCC_ClockConfig+0x1b8>)
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003302:	4b20      	ldr	r3, [pc, #128]	; (8003384 <HAL_RCC_ClockConfig+0x1b8>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	429a      	cmp	r2, r3
 800330e:	d001      	beq.n	8003314 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e032      	b.n	800337a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	d008      	beq.n	8003332 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003320:	4b19      	ldr	r3, [pc, #100]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	4916      	ldr	r1, [pc, #88]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 800332e:	4313      	orrs	r3, r2
 8003330:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0308 	and.w	r3, r3, #8
 800333a:	2b00      	cmp	r3, #0
 800333c:	d009      	beq.n	8003352 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800333e:	4b12      	ldr	r3, [pc, #72]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	490e      	ldr	r1, [pc, #56]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	4313      	orrs	r3, r2
 8003350:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003352:	f000 f821 	bl	8003398 <HAL_RCC_GetSysClockFreq>
 8003356:	4602      	mov	r2, r0
 8003358:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	091b      	lsrs	r3, r3, #4
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	490a      	ldr	r1, [pc, #40]	; (800338c <HAL_RCC_ClockConfig+0x1c0>)
 8003364:	5ccb      	ldrb	r3, [r1, r3]
 8003366:	fa22 f303 	lsr.w	r3, r2, r3
 800336a:	4a09      	ldr	r2, [pc, #36]	; (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 800336c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800336e:	4b09      	ldr	r3, [pc, #36]	; (8003394 <HAL_RCC_ClockConfig+0x1c8>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f7fe fdee 	bl	8001f54 <HAL_InitTick>

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	40023c00 	.word	0x40023c00
 8003388:	40023800 	.word	0x40023800
 800338c:	0800576c 	.word	0x0800576c
 8003390:	200000a0 	.word	0x200000a0
 8003394:	200000a4 	.word	0x200000a4

08003398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800339c:	b090      	sub	sp, #64	; 0x40
 800339e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033a0:	2300      	movs	r3, #0
 80033a2:	637b      	str	r3, [r7, #52]	; 0x34
 80033a4:	2300      	movs	r3, #0
 80033a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033a8:	2300      	movs	r3, #0
 80033aa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80033ac:	2300      	movs	r3, #0
 80033ae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033b0:	4b59      	ldr	r3, [pc, #356]	; (8003518 <HAL_RCC_GetSysClockFreq+0x180>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 030c 	and.w	r3, r3, #12
 80033b8:	2b08      	cmp	r3, #8
 80033ba:	d00d      	beq.n	80033d8 <HAL_RCC_GetSysClockFreq+0x40>
 80033bc:	2b08      	cmp	r3, #8
 80033be:	f200 80a1 	bhi.w	8003504 <HAL_RCC_GetSysClockFreq+0x16c>
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d002      	beq.n	80033cc <HAL_RCC_GetSysClockFreq+0x34>
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d003      	beq.n	80033d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80033ca:	e09b      	b.n	8003504 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033cc:	4b53      	ldr	r3, [pc, #332]	; (800351c <HAL_RCC_GetSysClockFreq+0x184>)
 80033ce:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80033d0:	e09b      	b.n	800350a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033d2:	4b53      	ldr	r3, [pc, #332]	; (8003520 <HAL_RCC_GetSysClockFreq+0x188>)
 80033d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033d6:	e098      	b.n	800350a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033d8:	4b4f      	ldr	r3, [pc, #316]	; (8003518 <HAL_RCC_GetSysClockFreq+0x180>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033e0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033e2:	4b4d      	ldr	r3, [pc, #308]	; (8003518 <HAL_RCC_GetSysClockFreq+0x180>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d028      	beq.n	8003440 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ee:	4b4a      	ldr	r3, [pc, #296]	; (8003518 <HAL_RCC_GetSysClockFreq+0x180>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	099b      	lsrs	r3, r3, #6
 80033f4:	2200      	movs	r2, #0
 80033f6:	623b      	str	r3, [r7, #32]
 80033f8:	627a      	str	r2, [r7, #36]	; 0x24
 80033fa:	6a3b      	ldr	r3, [r7, #32]
 80033fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003400:	2100      	movs	r1, #0
 8003402:	4b47      	ldr	r3, [pc, #284]	; (8003520 <HAL_RCC_GetSysClockFreq+0x188>)
 8003404:	fb03 f201 	mul.w	r2, r3, r1
 8003408:	2300      	movs	r3, #0
 800340a:	fb00 f303 	mul.w	r3, r0, r3
 800340e:	4413      	add	r3, r2
 8003410:	4a43      	ldr	r2, [pc, #268]	; (8003520 <HAL_RCC_GetSysClockFreq+0x188>)
 8003412:	fba0 1202 	umull	r1, r2, r0, r2
 8003416:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003418:	460a      	mov	r2, r1
 800341a:	62ba      	str	r2, [r7, #40]	; 0x28
 800341c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800341e:	4413      	add	r3, r2
 8003420:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003424:	2200      	movs	r2, #0
 8003426:	61bb      	str	r3, [r7, #24]
 8003428:	61fa      	str	r2, [r7, #28]
 800342a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800342e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003432:	f7fc fed1 	bl	80001d8 <__aeabi_uldivmod>
 8003436:	4602      	mov	r2, r0
 8003438:	460b      	mov	r3, r1
 800343a:	4613      	mov	r3, r2
 800343c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800343e:	e053      	b.n	80034e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003440:	4b35      	ldr	r3, [pc, #212]	; (8003518 <HAL_RCC_GetSysClockFreq+0x180>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	099b      	lsrs	r3, r3, #6
 8003446:	2200      	movs	r2, #0
 8003448:	613b      	str	r3, [r7, #16]
 800344a:	617a      	str	r2, [r7, #20]
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003452:	f04f 0b00 	mov.w	fp, #0
 8003456:	4652      	mov	r2, sl
 8003458:	465b      	mov	r3, fp
 800345a:	f04f 0000 	mov.w	r0, #0
 800345e:	f04f 0100 	mov.w	r1, #0
 8003462:	0159      	lsls	r1, r3, #5
 8003464:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003468:	0150      	lsls	r0, r2, #5
 800346a:	4602      	mov	r2, r0
 800346c:	460b      	mov	r3, r1
 800346e:	ebb2 080a 	subs.w	r8, r2, sl
 8003472:	eb63 090b 	sbc.w	r9, r3, fp
 8003476:	f04f 0200 	mov.w	r2, #0
 800347a:	f04f 0300 	mov.w	r3, #0
 800347e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003482:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003486:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800348a:	ebb2 0408 	subs.w	r4, r2, r8
 800348e:	eb63 0509 	sbc.w	r5, r3, r9
 8003492:	f04f 0200 	mov.w	r2, #0
 8003496:	f04f 0300 	mov.w	r3, #0
 800349a:	00eb      	lsls	r3, r5, #3
 800349c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034a0:	00e2      	lsls	r2, r4, #3
 80034a2:	4614      	mov	r4, r2
 80034a4:	461d      	mov	r5, r3
 80034a6:	eb14 030a 	adds.w	r3, r4, sl
 80034aa:	603b      	str	r3, [r7, #0]
 80034ac:	eb45 030b 	adc.w	r3, r5, fp
 80034b0:	607b      	str	r3, [r7, #4]
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	f04f 0300 	mov.w	r3, #0
 80034ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034be:	4629      	mov	r1, r5
 80034c0:	028b      	lsls	r3, r1, #10
 80034c2:	4621      	mov	r1, r4
 80034c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034c8:	4621      	mov	r1, r4
 80034ca:	028a      	lsls	r2, r1, #10
 80034cc:	4610      	mov	r0, r2
 80034ce:	4619      	mov	r1, r3
 80034d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034d2:	2200      	movs	r2, #0
 80034d4:	60bb      	str	r3, [r7, #8]
 80034d6:	60fa      	str	r2, [r7, #12]
 80034d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034dc:	f7fc fe7c 	bl	80001d8 <__aeabi_uldivmod>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	4613      	mov	r3, r2
 80034e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034e8:	4b0b      	ldr	r3, [pc, #44]	; (8003518 <HAL_RCC_GetSysClockFreq+0x180>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	0c1b      	lsrs	r3, r3, #16
 80034ee:	f003 0303 	and.w	r3, r3, #3
 80034f2:	3301      	adds	r3, #1
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80034f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003500:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003502:	e002      	b.n	800350a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003504:	4b05      	ldr	r3, [pc, #20]	; (800351c <HAL_RCC_GetSysClockFreq+0x184>)
 8003506:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003508:	bf00      	nop
    }
  }
  return sysclockfreq;
 800350a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800350c:	4618      	mov	r0, r3
 800350e:	3740      	adds	r7, #64	; 0x40
 8003510:	46bd      	mov	sp, r7
 8003512:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003516:	bf00      	nop
 8003518:	40023800 	.word	0x40023800
 800351c:	00f42400 	.word	0x00f42400
 8003520:	017d7840 	.word	0x017d7840

08003524 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e07b      	b.n	800362e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	2b00      	cmp	r3, #0
 800353c:	d108      	bne.n	8003550 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003546:	d009      	beq.n	800355c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	61da      	str	r2, [r3, #28]
 800354e:	e005      	b.n	800355c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d106      	bne.n	800357c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f7fe fad6 	bl	8001b28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2202      	movs	r2, #2
 8003580:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003592:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80035a4:	431a      	orrs	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	431a      	orrs	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	431a      	orrs	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035cc:	431a      	orrs	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e0:	ea42 0103 	orr.w	r1, r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	0c1b      	lsrs	r3, r3, #16
 80035fa:	f003 0104 	and.w	r1, r3, #4
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003602:	f003 0210 	and.w	r2, r3, #16
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	430a      	orrs	r2, r1
 800360c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	69da      	ldr	r2, [r3, #28]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800361c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b088      	sub	sp, #32
 800363a:	af00      	add	r7, sp, #0
 800363c:	60f8      	str	r0, [r7, #12]
 800363e:	60b9      	str	r1, [r7, #8]
 8003640:	603b      	str	r3, [r7, #0]
 8003642:	4613      	mov	r3, r2
 8003644:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003646:	2300      	movs	r3, #0
 8003648:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003650:	2b01      	cmp	r3, #1
 8003652:	d101      	bne.n	8003658 <HAL_SPI_Transmit+0x22>
 8003654:	2302      	movs	r3, #2
 8003656:	e126      	b.n	80038a6 <HAL_SPI_Transmit+0x270>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003660:	f7fe fcbc 	bl	8001fdc <HAL_GetTick>
 8003664:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003666:	88fb      	ldrh	r3, [r7, #6]
 8003668:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b01      	cmp	r3, #1
 8003674:	d002      	beq.n	800367c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003676:	2302      	movs	r3, #2
 8003678:	77fb      	strb	r3, [r7, #31]
    goto error;
 800367a:	e10b      	b.n	8003894 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d002      	beq.n	8003688 <HAL_SPI_Transmit+0x52>
 8003682:	88fb      	ldrh	r3, [r7, #6]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d102      	bne.n	800368e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800368c:	e102      	b.n	8003894 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2203      	movs	r2, #3
 8003692:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	88fa      	ldrh	r2, [r7, #6]
 80036a6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	88fa      	ldrh	r2, [r7, #6]
 80036ac:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036d4:	d10f      	bne.n	80036f6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003700:	2b40      	cmp	r3, #64	; 0x40
 8003702:	d007      	beq.n	8003714 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003712:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800371c:	d14b      	bne.n	80037b6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <HAL_SPI_Transmit+0xf6>
 8003726:	8afb      	ldrh	r3, [r7, #22]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d13e      	bne.n	80037aa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003730:	881a      	ldrh	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373c:	1c9a      	adds	r2, r3, #2
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003746:	b29b      	uxth	r3, r3
 8003748:	3b01      	subs	r3, #1
 800374a:	b29a      	uxth	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003750:	e02b      	b.n	80037aa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b02      	cmp	r3, #2
 800375e:	d112      	bne.n	8003786 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003764:	881a      	ldrh	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003770:	1c9a      	adds	r2, r3, #2
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800377a:	b29b      	uxth	r3, r3
 800377c:	3b01      	subs	r3, #1
 800377e:	b29a      	uxth	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	86da      	strh	r2, [r3, #54]	; 0x36
 8003784:	e011      	b.n	80037aa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003786:	f7fe fc29 	bl	8001fdc <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	429a      	cmp	r2, r3
 8003794:	d803      	bhi.n	800379e <HAL_SPI_Transmit+0x168>
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800379c:	d102      	bne.n	80037a4 <HAL_SPI_Transmit+0x16e>
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d102      	bne.n	80037aa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80037a8:	e074      	b.n	8003894 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1ce      	bne.n	8003752 <HAL_SPI_Transmit+0x11c>
 80037b4:	e04c      	b.n	8003850 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d002      	beq.n	80037c4 <HAL_SPI_Transmit+0x18e>
 80037be:	8afb      	ldrh	r3, [r7, #22]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d140      	bne.n	8003846 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	330c      	adds	r3, #12
 80037ce:	7812      	ldrb	r2, [r2, #0]
 80037d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d6:	1c5a      	adds	r2, r3, #1
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	3b01      	subs	r3, #1
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80037ea:	e02c      	b.n	8003846 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d113      	bne.n	8003822 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	330c      	adds	r3, #12
 8003804:	7812      	ldrb	r2, [r2, #0]
 8003806:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380c:	1c5a      	adds	r2, r3, #1
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003816:	b29b      	uxth	r3, r3
 8003818:	3b01      	subs	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003820:	e011      	b.n	8003846 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003822:	f7fe fbdb 	bl	8001fdc <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	429a      	cmp	r2, r3
 8003830:	d803      	bhi.n	800383a <HAL_SPI_Transmit+0x204>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003838:	d102      	bne.n	8003840 <HAL_SPI_Transmit+0x20a>
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d102      	bne.n	8003846 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003844:	e026      	b.n	8003894 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800384a:	b29b      	uxth	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1cd      	bne.n	80037ec <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	6839      	ldr	r1, [r7, #0]
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f000 fba1 	bl	8003f9c <SPI_EndRxTxTransaction>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d002      	beq.n	8003866 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2220      	movs	r2, #32
 8003864:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10a      	bne.n	8003884 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800386e:	2300      	movs	r3, #0
 8003870:	613b      	str	r3, [r7, #16]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	613b      	str	r3, [r7, #16]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	613b      	str	r3, [r7, #16]
 8003882:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003888:	2b00      	cmp	r3, #0
 800388a:	d002      	beq.n	8003892 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	77fb      	strb	r3, [r7, #31]
 8003890:	e000      	b.n	8003894 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003892:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80038a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3720      	adds	r7, #32
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b08c      	sub	sp, #48	; 0x30
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	60f8      	str	r0, [r7, #12]
 80038b6:	60b9      	str	r1, [r7, #8]
 80038b8:	607a      	str	r2, [r7, #4]
 80038ba:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80038bc:	2301      	movs	r3, #1
 80038be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80038c0:	2300      	movs	r3, #0
 80038c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d101      	bne.n	80038d4 <HAL_SPI_TransmitReceive+0x26>
 80038d0:	2302      	movs	r3, #2
 80038d2:	e18a      	b.n	8003bea <HAL_SPI_TransmitReceive+0x33c>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038dc:	f7fe fb7e 	bl	8001fdc <HAL_GetTick>
 80038e0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80038f2:	887b      	ldrh	r3, [r7, #2]
 80038f4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80038f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d00f      	beq.n	800391e <HAL_SPI_TransmitReceive+0x70>
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003904:	d107      	bne.n	8003916 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d103      	bne.n	8003916 <HAL_SPI_TransmitReceive+0x68>
 800390e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003912:	2b04      	cmp	r3, #4
 8003914:	d003      	beq.n	800391e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003916:	2302      	movs	r3, #2
 8003918:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800391c:	e15b      	b.n	8003bd6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d005      	beq.n	8003930 <HAL_SPI_TransmitReceive+0x82>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d002      	beq.n	8003930 <HAL_SPI_TransmitReceive+0x82>
 800392a:	887b      	ldrh	r3, [r7, #2]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d103      	bne.n	8003938 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003936:	e14e      	b.n	8003bd6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b04      	cmp	r3, #4
 8003942:	d003      	beq.n	800394c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2205      	movs	r2, #5
 8003948:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	887a      	ldrh	r2, [r7, #2]
 800395c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	887a      	ldrh	r2, [r7, #2]
 8003962:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	887a      	ldrh	r2, [r7, #2]
 800396e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	887a      	ldrh	r2, [r7, #2]
 8003974:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398c:	2b40      	cmp	r3, #64	; 0x40
 800398e:	d007      	beq.n	80039a0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800399e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039a8:	d178      	bne.n	8003a9c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d002      	beq.n	80039b8 <HAL_SPI_TransmitReceive+0x10a>
 80039b2:	8b7b      	ldrh	r3, [r7, #26]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d166      	bne.n	8003a86 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039bc:	881a      	ldrh	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c8:	1c9a      	adds	r2, r3, #2
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	3b01      	subs	r3, #1
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039dc:	e053      	b.n	8003a86 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d11b      	bne.n	8003a24 <HAL_SPI_TransmitReceive+0x176>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d016      	beq.n	8003a24 <HAL_SPI_TransmitReceive+0x176>
 80039f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d113      	bne.n	8003a24 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a00:	881a      	ldrh	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0c:	1c9a      	adds	r2, r3, #2
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d119      	bne.n	8003a66 <HAL_SPI_TransmitReceive+0x1b8>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d014      	beq.n	8003a66 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68da      	ldr	r2, [r3, #12]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a46:	b292      	uxth	r2, r2
 8003a48:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4e:	1c9a      	adds	r2, r3, #2
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a62:	2301      	movs	r3, #1
 8003a64:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a66:	f7fe fab9 	bl	8001fdc <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d807      	bhi.n	8003a86 <HAL_SPI_TransmitReceive+0x1d8>
 8003a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a7c:	d003      	beq.n	8003a86 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003a84:	e0a7      	b.n	8003bd6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1a6      	bne.n	80039de <HAL_SPI_TransmitReceive+0x130>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1a1      	bne.n	80039de <HAL_SPI_TransmitReceive+0x130>
 8003a9a:	e07c      	b.n	8003b96 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d002      	beq.n	8003aaa <HAL_SPI_TransmitReceive+0x1fc>
 8003aa4:	8b7b      	ldrh	r3, [r7, #26]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d16b      	bne.n	8003b82 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	330c      	adds	r3, #12
 8003ab4:	7812      	ldrb	r2, [r2, #0]
 8003ab6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abc:	1c5a      	adds	r2, r3, #1
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ad0:	e057      	b.n	8003b82 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d11c      	bne.n	8003b1a <HAL_SPI_TransmitReceive+0x26c>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d017      	beq.n	8003b1a <HAL_SPI_TransmitReceive+0x26c>
 8003aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d114      	bne.n	8003b1a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	330c      	adds	r3, #12
 8003afa:	7812      	ldrb	r2, [r2, #0]
 8003afc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	1c5a      	adds	r2, r3, #1
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d119      	bne.n	8003b5c <HAL_SPI_TransmitReceive+0x2ae>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d014      	beq.n	8003b5c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68da      	ldr	r2, [r3, #12]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3c:	b2d2      	uxtb	r2, r2
 8003b3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b44:	1c5a      	adds	r2, r3, #1
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	3b01      	subs	r3, #1
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b5c:	f7fe fa3e 	bl	8001fdc <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d803      	bhi.n	8003b74 <HAL_SPI_TransmitReceive+0x2c6>
 8003b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b72:	d102      	bne.n	8003b7a <HAL_SPI_TransmitReceive+0x2cc>
 8003b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d103      	bne.n	8003b82 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003b80:	e029      	b.n	8003bd6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1a2      	bne.n	8003ad2 <HAL_SPI_TransmitReceive+0x224>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d19d      	bne.n	8003ad2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f000 f9fe 	bl	8003f9c <SPI_EndRxTxTransaction>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d006      	beq.n	8003bb4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2220      	movs	r2, #32
 8003bb0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003bb2:	e010      	b.n	8003bd6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10b      	bne.n	8003bd4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	617b      	str	r3, [r7, #20]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	617b      	str	r3, [r7, #20]
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	e000      	b.n	8003bd6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003bd4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003be6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3730      	adds	r7, #48	; 0x30
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
	...

08003bf4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c02:	2300      	movs	r3, #0
 8003c04:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d101      	bne.n	8003c14 <HAL_SPI_Transmit_DMA+0x20>
 8003c10:	2302      	movs	r3, #2
 8003c12:	e09b      	b.n	8003d4c <HAL_SPI_Transmit_DMA+0x158>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d002      	beq.n	8003c2e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003c28:	2302      	movs	r3, #2
 8003c2a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c2c:	e089      	b.n	8003d42 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d002      	beq.n	8003c3a <HAL_SPI_Transmit_DMA+0x46>
 8003c34:	88fb      	ldrh	r3, [r7, #6]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d102      	bne.n	8003c40 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c3e:	e080      	b.n	8003d42 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2203      	movs	r2, #3
 8003c44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	68ba      	ldr	r2, [r7, #8]
 8003c52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	88fa      	ldrh	r2, [r7, #6]
 8003c58:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	88fa      	ldrh	r2, [r7, #6]
 8003c5e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c86:	d10f      	bne.n	8003ca8 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c96:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ca6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cac:	4a29      	ldr	r2, [pc, #164]	; (8003d54 <HAL_SPI_Transmit_DMA+0x160>)
 8003cae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cb4:	4a28      	ldr	r2, [pc, #160]	; (8003d58 <HAL_SPI_Transmit_DMA+0x164>)
 8003cb6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cbc:	4a27      	ldr	r2, [pc, #156]	; (8003d5c <HAL_SPI_Transmit_DMA+0x168>)
 8003cbe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	330c      	adds	r3, #12
 8003cd8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cde:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003ce0:	f7fe fb6c 	bl	80023bc <HAL_DMA_Start_IT>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00c      	beq.n	8003d04 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cee:	f043 0210 	orr.w	r2, r3, #16
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003d02:	e01e      	b.n	8003d42 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0e:	2b40      	cmp	r3, #64	; 0x40
 8003d10:	d007      	beq.n	8003d22 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d20:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f042 0220 	orr.w	r2, r2, #32
 8003d30:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f042 0202 	orr.w	r2, r2, #2
 8003d40:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3718      	adds	r7, #24
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	08003e31 	.word	0x08003e31
 8003d58:	08003d89 	.word	0x08003d89
 8003d5c:	08003e4d 	.word	0x08003e4d

08003d60 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d94:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d96:	f7fe f921 	bl	8001fdc <HAL_GetTick>
 8003d9a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003daa:	d03b      	beq.n	8003e24 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0220 	bic.w	r2, r2, #32
 8003dba:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0202 	bic.w	r2, r2, #2
 8003dca:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	2164      	movs	r1, #100	; 0x64
 8003dd0:	6978      	ldr	r0, [r7, #20]
 8003dd2:	f000 f8e3 	bl	8003f9c <SPI_EndRxTxTransaction>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d005      	beq.n	8003de8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de0:	f043 0220 	orr.w	r2, r3, #32
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10a      	bne.n	8003e06 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003df0:	2300      	movs	r3, #0
 8003df2:	60fb      	str	r3, [r7, #12]
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	60fb      	str	r3, [r7, #12]
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003e1c:	6978      	ldr	r0, [r7, #20]
 8003e1e:	f7ff ffa9 	bl	8003d74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003e22:	e002      	b.n	8003e2a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003e24:	6978      	ldr	r0, [r7, #20]
 8003e26:	f7fc fd2b 	bl	8000880 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003e2a:	3718      	adds	r7, #24
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f7ff ff8e 	bl	8003d60 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003e44:	bf00      	nop
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e58:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	685a      	ldr	r2, [r3, #4]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 0203 	bic.w	r2, r2, #3
 8003e68:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6e:	f043 0210 	orr.w	r2, r3, #16
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f7ff ff78 	bl	8003d74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003e84:	bf00      	nop
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b088      	sub	sp, #32
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	603b      	str	r3, [r7, #0]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e9c:	f7fe f89e 	bl	8001fdc <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea4:	1a9b      	subs	r3, r3, r2
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003eac:	f7fe f896 	bl	8001fdc <HAL_GetTick>
 8003eb0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003eb2:	4b39      	ldr	r3, [pc, #228]	; (8003f98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	015b      	lsls	r3, r3, #5
 8003eb8:	0d1b      	lsrs	r3, r3, #20
 8003eba:	69fa      	ldr	r2, [r7, #28]
 8003ebc:	fb02 f303 	mul.w	r3, r2, r3
 8003ec0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ec2:	e054      	b.n	8003f6e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003eca:	d050      	beq.n	8003f6e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ecc:	f7fe f886 	bl	8001fdc <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	69fa      	ldr	r2, [r7, #28]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d902      	bls.n	8003ee2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d13d      	bne.n	8003f5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ef0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003efa:	d111      	bne.n	8003f20 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f04:	d004      	beq.n	8003f10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f0e:	d107      	bne.n	8003f20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f28:	d10f      	bne.n	8003f4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e017      	b.n	8003f8e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	4013      	ands	r3, r2
 8003f78:	68ba      	ldr	r2, [r7, #8]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	bf0c      	ite	eq
 8003f7e:	2301      	moveq	r3, #1
 8003f80:	2300      	movne	r3, #0
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	461a      	mov	r2, r3
 8003f86:	79fb      	ldrb	r3, [r7, #7]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d19b      	bne.n	8003ec4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3720      	adds	r7, #32
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	200000a0 	.word	0x200000a0

08003f9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b088      	sub	sp, #32
 8003fa0:	af02      	add	r7, sp, #8
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003fa8:	4b1b      	ldr	r3, [pc, #108]	; (8004018 <SPI_EndRxTxTransaction+0x7c>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a1b      	ldr	r2, [pc, #108]	; (800401c <SPI_EndRxTxTransaction+0x80>)
 8003fae:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb2:	0d5b      	lsrs	r3, r3, #21
 8003fb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003fb8:	fb02 f303 	mul.w	r3, r2, r3
 8003fbc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fc6:	d112      	bne.n	8003fee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	2180      	movs	r1, #128	; 0x80
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f7ff ff5a 	bl	8003e8c <SPI_WaitFlagStateUntilTimeout>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d016      	beq.n	800400c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe2:	f043 0220 	orr.w	r2, r3, #32
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e00f      	b.n	800400e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00a      	beq.n	800400a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004004:	2b80      	cmp	r3, #128	; 0x80
 8004006:	d0f2      	beq.n	8003fee <SPI_EndRxTxTransaction+0x52>
 8004008:	e000      	b.n	800400c <SPI_EndRxTxTransaction+0x70>
        break;
 800400a:	bf00      	nop
  }

  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3718      	adds	r7, #24
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	200000a0 	.word	0x200000a0
 800401c:	165e9f81 	.word	0x165e9f81

08004020 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e041      	b.n	80040b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d106      	bne.n	800404c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7fd ff18 	bl	8001e7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3304      	adds	r3, #4
 800405c:	4619      	mov	r1, r3
 800405e:	4610      	mov	r0, r2
 8004060:	f000 f8f4 	bl	800424c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b084      	sub	sp, #16
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
 80040c6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040c8:	2300      	movs	r3, #0
 80040ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d101      	bne.n	80040da <HAL_TIM_ConfigClockSource+0x1c>
 80040d6:	2302      	movs	r3, #2
 80040d8:	e0b4      	b.n	8004244 <HAL_TIM_ConfigClockSource+0x186>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2202      	movs	r2, #2
 80040e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040f8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004100:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68ba      	ldr	r2, [r7, #8]
 8004108:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004112:	d03e      	beq.n	8004192 <HAL_TIM_ConfigClockSource+0xd4>
 8004114:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004118:	f200 8087 	bhi.w	800422a <HAL_TIM_ConfigClockSource+0x16c>
 800411c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004120:	f000 8086 	beq.w	8004230 <HAL_TIM_ConfigClockSource+0x172>
 8004124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004128:	d87f      	bhi.n	800422a <HAL_TIM_ConfigClockSource+0x16c>
 800412a:	2b70      	cmp	r3, #112	; 0x70
 800412c:	d01a      	beq.n	8004164 <HAL_TIM_ConfigClockSource+0xa6>
 800412e:	2b70      	cmp	r3, #112	; 0x70
 8004130:	d87b      	bhi.n	800422a <HAL_TIM_ConfigClockSource+0x16c>
 8004132:	2b60      	cmp	r3, #96	; 0x60
 8004134:	d050      	beq.n	80041d8 <HAL_TIM_ConfigClockSource+0x11a>
 8004136:	2b60      	cmp	r3, #96	; 0x60
 8004138:	d877      	bhi.n	800422a <HAL_TIM_ConfigClockSource+0x16c>
 800413a:	2b50      	cmp	r3, #80	; 0x50
 800413c:	d03c      	beq.n	80041b8 <HAL_TIM_ConfigClockSource+0xfa>
 800413e:	2b50      	cmp	r3, #80	; 0x50
 8004140:	d873      	bhi.n	800422a <HAL_TIM_ConfigClockSource+0x16c>
 8004142:	2b40      	cmp	r3, #64	; 0x40
 8004144:	d058      	beq.n	80041f8 <HAL_TIM_ConfigClockSource+0x13a>
 8004146:	2b40      	cmp	r3, #64	; 0x40
 8004148:	d86f      	bhi.n	800422a <HAL_TIM_ConfigClockSource+0x16c>
 800414a:	2b30      	cmp	r3, #48	; 0x30
 800414c:	d064      	beq.n	8004218 <HAL_TIM_ConfigClockSource+0x15a>
 800414e:	2b30      	cmp	r3, #48	; 0x30
 8004150:	d86b      	bhi.n	800422a <HAL_TIM_ConfigClockSource+0x16c>
 8004152:	2b20      	cmp	r3, #32
 8004154:	d060      	beq.n	8004218 <HAL_TIM_ConfigClockSource+0x15a>
 8004156:	2b20      	cmp	r3, #32
 8004158:	d867      	bhi.n	800422a <HAL_TIM_ConfigClockSource+0x16c>
 800415a:	2b00      	cmp	r3, #0
 800415c:	d05c      	beq.n	8004218 <HAL_TIM_ConfigClockSource+0x15a>
 800415e:	2b10      	cmp	r3, #16
 8004160:	d05a      	beq.n	8004218 <HAL_TIM_ConfigClockSource+0x15a>
 8004162:	e062      	b.n	800422a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6818      	ldr	r0, [r3, #0]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	6899      	ldr	r1, [r3, #8]
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	f000 f964 	bl	8004440 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004186:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	609a      	str	r2, [r3, #8]
      break;
 8004190:	e04f      	b.n	8004232 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6818      	ldr	r0, [r3, #0]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	6899      	ldr	r1, [r3, #8]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	f000 f94d 	bl	8004440 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041b4:	609a      	str	r2, [r3, #8]
      break;
 80041b6:	e03c      	b.n	8004232 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6818      	ldr	r0, [r3, #0]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	6859      	ldr	r1, [r3, #4]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	461a      	mov	r2, r3
 80041c6:	f000 f8c1 	bl	800434c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2150      	movs	r1, #80	; 0x50
 80041d0:	4618      	mov	r0, r3
 80041d2:	f000 f91a 	bl	800440a <TIM_ITRx_SetConfig>
      break;
 80041d6:	e02c      	b.n	8004232 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6818      	ldr	r0, [r3, #0]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	6859      	ldr	r1, [r3, #4]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	461a      	mov	r2, r3
 80041e6:	f000 f8e0 	bl	80043aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2160      	movs	r1, #96	; 0x60
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 f90a 	bl	800440a <TIM_ITRx_SetConfig>
      break;
 80041f6:	e01c      	b.n	8004232 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6818      	ldr	r0, [r3, #0]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	6859      	ldr	r1, [r3, #4]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	461a      	mov	r2, r3
 8004206:	f000 f8a1 	bl	800434c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2140      	movs	r1, #64	; 0x40
 8004210:	4618      	mov	r0, r3
 8004212:	f000 f8fa 	bl	800440a <TIM_ITRx_SetConfig>
      break;
 8004216:	e00c      	b.n	8004232 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4619      	mov	r1, r3
 8004222:	4610      	mov	r0, r2
 8004224:	f000 f8f1 	bl	800440a <TIM_ITRx_SetConfig>
      break;
 8004228:	e003      	b.n	8004232 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	73fb      	strb	r3, [r7, #15]
      break;
 800422e:	e000      	b.n	8004232 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004230:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004242:	7bfb      	ldrb	r3, [r7, #15]
}
 8004244:	4618      	mov	r0, r3
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a34      	ldr	r2, [pc, #208]	; (8004330 <TIM_Base_SetConfig+0xe4>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d00f      	beq.n	8004284 <TIM_Base_SetConfig+0x38>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800426a:	d00b      	beq.n	8004284 <TIM_Base_SetConfig+0x38>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a31      	ldr	r2, [pc, #196]	; (8004334 <TIM_Base_SetConfig+0xe8>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d007      	beq.n	8004284 <TIM_Base_SetConfig+0x38>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a30      	ldr	r2, [pc, #192]	; (8004338 <TIM_Base_SetConfig+0xec>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d003      	beq.n	8004284 <TIM_Base_SetConfig+0x38>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a2f      	ldr	r2, [pc, #188]	; (800433c <TIM_Base_SetConfig+0xf0>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d108      	bne.n	8004296 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800428a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	4313      	orrs	r3, r2
 8004294:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a25      	ldr	r2, [pc, #148]	; (8004330 <TIM_Base_SetConfig+0xe4>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d01b      	beq.n	80042d6 <TIM_Base_SetConfig+0x8a>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a4:	d017      	beq.n	80042d6 <TIM_Base_SetConfig+0x8a>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a22      	ldr	r2, [pc, #136]	; (8004334 <TIM_Base_SetConfig+0xe8>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d013      	beq.n	80042d6 <TIM_Base_SetConfig+0x8a>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a21      	ldr	r2, [pc, #132]	; (8004338 <TIM_Base_SetConfig+0xec>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d00f      	beq.n	80042d6 <TIM_Base_SetConfig+0x8a>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a20      	ldr	r2, [pc, #128]	; (800433c <TIM_Base_SetConfig+0xf0>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d00b      	beq.n	80042d6 <TIM_Base_SetConfig+0x8a>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a1f      	ldr	r2, [pc, #124]	; (8004340 <TIM_Base_SetConfig+0xf4>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d007      	beq.n	80042d6 <TIM_Base_SetConfig+0x8a>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a1e      	ldr	r2, [pc, #120]	; (8004344 <TIM_Base_SetConfig+0xf8>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d003      	beq.n	80042d6 <TIM_Base_SetConfig+0x8a>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a1d      	ldr	r2, [pc, #116]	; (8004348 <TIM_Base_SetConfig+0xfc>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d108      	bne.n	80042e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a08      	ldr	r2, [pc, #32]	; (8004330 <TIM_Base_SetConfig+0xe4>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d103      	bne.n	800431c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	691a      	ldr	r2, [r3, #16]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	615a      	str	r2, [r3, #20]
}
 8004322:	bf00      	nop
 8004324:	3714      	adds	r7, #20
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	40010000 	.word	0x40010000
 8004334:	40000400 	.word	0x40000400
 8004338:	40000800 	.word	0x40000800
 800433c:	40000c00 	.word	0x40000c00
 8004340:	40014000 	.word	0x40014000
 8004344:	40014400 	.word	0x40014400
 8004348:	40014800 	.word	0x40014800

0800434c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800434c:	b480      	push	{r7}
 800434e:	b087      	sub	sp, #28
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	f023 0201 	bic.w	r2, r3, #1
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004376:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	4313      	orrs	r3, r2
 8004380:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f023 030a 	bic.w	r3, r3, #10
 8004388:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	4313      	orrs	r3, r2
 8004390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	621a      	str	r2, [r3, #32]
}
 800439e:	bf00      	nop
 80043a0:	371c      	adds	r7, #28
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b087      	sub	sp, #28
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	60f8      	str	r0, [r7, #12]
 80043b2:	60b9      	str	r1, [r7, #8]
 80043b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	f023 0210 	bic.w	r2, r3, #16
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	031b      	lsls	r3, r3, #12
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	4313      	orrs	r3, r2
 80043de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	011b      	lsls	r3, r3, #4
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	621a      	str	r2, [r3, #32]
}
 80043fe:	bf00      	nop
 8004400:	371c      	adds	r7, #28
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800440a:	b480      	push	{r7}
 800440c:	b085      	sub	sp, #20
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
 8004412:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004420:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004422:	683a      	ldr	r2, [r7, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	4313      	orrs	r3, r2
 8004428:	f043 0307 	orr.w	r3, r3, #7
 800442c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	609a      	str	r2, [r3, #8]
}
 8004434:	bf00      	nop
 8004436:	3714      	adds	r7, #20
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004440:	b480      	push	{r7}
 8004442:	b087      	sub	sp, #28
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
 800444c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800445a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	021a      	lsls	r2, r3, #8
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	431a      	orrs	r2, r3
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	4313      	orrs	r3, r2
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	4313      	orrs	r3, r2
 800446c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	609a      	str	r2, [r3, #8]
}
 8004474:	bf00      	nop
 8004476:	371c      	adds	r7, #28
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004490:	2b01      	cmp	r3, #1
 8004492:	d101      	bne.n	8004498 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004494:	2302      	movs	r3, #2
 8004496:	e050      	b.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2202      	movs	r2, #2
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a1c      	ldr	r2, [pc, #112]	; (8004548 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d018      	beq.n	800450e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e4:	d013      	beq.n	800450e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a18      	ldr	r2, [pc, #96]	; (800454c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d00e      	beq.n	800450e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a16      	ldr	r2, [pc, #88]	; (8004550 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d009      	beq.n	800450e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a15      	ldr	r2, [pc, #84]	; (8004554 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d004      	beq.n	800450e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a13      	ldr	r2, [pc, #76]	; (8004558 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d10c      	bne.n	8004528 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004514:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	4313      	orrs	r3, r2
 800451e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	40010000 	.word	0x40010000
 800454c:	40000400 	.word	0x40000400
 8004550:	40000800 	.word	0x40000800
 8004554:	40000c00 	.word	0x40000c00
 8004558:	40014000 	.word	0x40014000

0800455c <__libc_init_array>:
 800455c:	b570      	push	{r4, r5, r6, lr}
 800455e:	4d0d      	ldr	r5, [pc, #52]	; (8004594 <__libc_init_array+0x38>)
 8004560:	4c0d      	ldr	r4, [pc, #52]	; (8004598 <__libc_init_array+0x3c>)
 8004562:	1b64      	subs	r4, r4, r5
 8004564:	10a4      	asrs	r4, r4, #2
 8004566:	2600      	movs	r6, #0
 8004568:	42a6      	cmp	r6, r4
 800456a:	d109      	bne.n	8004580 <__libc_init_array+0x24>
 800456c:	4d0b      	ldr	r5, [pc, #44]	; (800459c <__libc_init_array+0x40>)
 800456e:	4c0c      	ldr	r4, [pc, #48]	; (80045a0 <__libc_init_array+0x44>)
 8004570:	f000 f820 	bl	80045b4 <_init>
 8004574:	1b64      	subs	r4, r4, r5
 8004576:	10a4      	asrs	r4, r4, #2
 8004578:	2600      	movs	r6, #0
 800457a:	42a6      	cmp	r6, r4
 800457c:	d105      	bne.n	800458a <__libc_init_array+0x2e>
 800457e:	bd70      	pop	{r4, r5, r6, pc}
 8004580:	f855 3b04 	ldr.w	r3, [r5], #4
 8004584:	4798      	blx	r3
 8004586:	3601      	adds	r6, #1
 8004588:	e7ee      	b.n	8004568 <__libc_init_array+0xc>
 800458a:	f855 3b04 	ldr.w	r3, [r5], #4
 800458e:	4798      	blx	r3
 8004590:	3601      	adds	r6, #1
 8004592:	e7f2      	b.n	800457a <__libc_init_array+0x1e>
 8004594:	0800578c 	.word	0x0800578c
 8004598:	0800578c 	.word	0x0800578c
 800459c:	0800578c 	.word	0x0800578c
 80045a0:	08005790 	.word	0x08005790

080045a4 <memset>:
 80045a4:	4402      	add	r2, r0
 80045a6:	4603      	mov	r3, r0
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d100      	bne.n	80045ae <memset+0xa>
 80045ac:	4770      	bx	lr
 80045ae:	f803 1b01 	strb.w	r1, [r3], #1
 80045b2:	e7f9      	b.n	80045a8 <memset+0x4>

080045b4 <_init>:
 80045b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045b6:	bf00      	nop
 80045b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ba:	bc08      	pop	{r3}
 80045bc:	469e      	mov	lr, r3
 80045be:	4770      	bx	lr

080045c0 <_fini>:
 80045c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c2:	bf00      	nop
 80045c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045c6:	bc08      	pop	{r3}
 80045c8:	469e      	mov	lr, r3
 80045ca:	4770      	bx	lr
